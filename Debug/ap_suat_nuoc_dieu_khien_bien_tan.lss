
ap_suat_nuoc_dieu_khien_bien_tan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000026a4  00002738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c8  0080010e  0080010e  00002746  2**0
                  ALLOC
  3 .stab         0000474c  00000000  00000000  00002748  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002406  00000000  00000000  00006e94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_18>
      4c:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ea       	ldi	r30, 0xA4	; 164
      7c:	f6 e2       	ldi	r31, 0x26	; 38
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ae 30       	cpi	r26, 0x0E	; 14
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	ae e0       	ldi	r26, 0x0E	; 14
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3d       	cpi	r26, 0xD6	; 214
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 90 12 	call	0x2520	; 0x2520 <main>
      9e:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_default>

000000a6 <archContextSwitch>:
      a6:	2f 92       	push	r2
      a8:	3f 92       	push	r3
      aa:	4f 92       	push	r4
      ac:	5f 92       	push	r5
      ae:	6f 92       	push	r6
      b0:	7f 92       	push	r7
      b2:	8f 92       	push	r8
      b4:	9f 92       	push	r9
      b6:	af 92       	push	r10
      b8:	bf 92       	push	r11
      ba:	cf 92       	push	r12
      bc:	df 92       	push	r13
      be:	ef 92       	push	r14
      c0:	ff 92       	push	r15
      c2:	0f 93       	push	r16
      c4:	1f 93       	push	r17
      c6:	cf 93       	push	r28
      c8:	df 93       	push	r29
      ca:	0d b7       	in	r16, 0x3d	; 61
      cc:	1e b7       	in	r17, 0x3e	; 62
      ce:	c8 2f       	mov	r28, r24
      d0:	d9 2f       	mov	r29, r25
      d2:	08 83       	st	Y, r16
      d4:	19 83       	std	Y+1, r17	; 0x01
      d6:	c6 2f       	mov	r28, r22
      d8:	d7 2f       	mov	r29, r23
      da:	08 81       	ld	r16, Y
      dc:	19 81       	ldd	r17, Y+1	; 0x01
      de:	0d bf       	out	0x3d, r16	; 61
      e0:	1e bf       	out	0x3e, r17	; 62
      e2:	df 91       	pop	r29
      e4:	cf 91       	pop	r28
      e6:	1f 91       	pop	r17
      e8:	0f 91       	pop	r16
      ea:	ff 90       	pop	r15
      ec:	ef 90       	pop	r14
      ee:	df 90       	pop	r13
      f0:	cf 90       	pop	r12
      f2:	bf 90       	pop	r11
      f4:	af 90       	pop	r10
      f6:	9f 90       	pop	r9
      f8:	8f 90       	pop	r8
      fa:	7f 90       	pop	r7
      fc:	6f 90       	pop	r6
      fe:	5f 90       	pop	r5
     100:	4f 90       	pop	r4
     102:	3f 90       	pop	r3
     104:	2f 90       	pop	r2
     106:	08 95       	ret

00000108 <archFirstThreadRestore>:
     108:	c8 2f       	mov	r28, r24
     10a:	d9 2f       	mov	r29, r25
     10c:	08 81       	ld	r16, Y
     10e:	19 81       	ldd	r17, Y+1	; 0x01
     110:	0d bf       	out	0x3d, r16	; 61
     112:	1e bf       	out	0x3e, r17	; 62
     114:	df 91       	pop	r29
     116:	cf 91       	pop	r28
     118:	1f 91       	pop	r17
     11a:	0f 91       	pop	r16
     11c:	ff 90       	pop	r15
     11e:	ef 90       	pop	r14
     120:	df 90       	pop	r13
     122:	cf 90       	pop	r12
     124:	bf 90       	pop	r11
     126:	af 90       	pop	r10
     128:	9f 90       	pop	r9
     12a:	8f 90       	pop	r8
     12c:	7f 90       	pop	r7
     12e:	6f 90       	pop	r6
     130:	5f 90       	pop	r5
     132:	4f 90       	pop	r4
     134:	3f 90       	pop	r3
     136:	2f 90       	pop	r2
     138:	18 95       	reti

0000013a <avrInitSystemTickTimer>:
 * Initialise the system tick timer. Uses the AVR's timer1 facility.
 *
 * @return None
 */
void avrInitSystemTickTimer ( void )
{
     13a:	df 93       	push	r29
     13c:	cf 93       	push	r28
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
    /* Set timer 1 compare match value for configured system tick,
     * with a prescaler of 256. We will get a compare match 1A
     * interrupt on every system tick, in which we must call the
     * OS's system tick handler. */
    OCR1A = (AVR_CPU_HZ / 256 / SYSTEM_TICKS_PER_SEC);
     142:	e8 e8       	ldi	r30, 0x88	; 136
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	81 e7       	ldi	r24, 0x71	; 113
     148:	92 e0       	ldi	r25, 0x02	; 2
     14a:	91 83       	std	Z+1, r25	; 0x01
     14c:	80 83       	st	Z, r24

    /* Enable compare match 1A interrupt */
#ifdef TIMSK
    TIMSK = _BV(OCIE1A);
#else
    TIMSK1 = _BV(OCIE1A);
     14e:	ef e6       	ldi	r30, 0x6F	; 111
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	80 83       	st	Z, r24
#endif

    /* Set prescaler 256 */
    TCCR1B = _BV(CS12) | _BV(WGM12);
     156:	e1 e8       	ldi	r30, 0x81	; 129
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	8c e0       	ldi	r24, 0x0C	; 12
     15c:	80 83       	st	Z, r24
}
     15e:	cf 91       	pop	r28
     160:	df 91       	pop	r29
     162:	08 95       	ret

00000164 <__vector_11>:
 * in case the interrupt handler makes more than one thread ready.
 *
 * @return None
 */
ISR (TIMER1_COMPA_vect)
{
     164:	1f 92       	push	r1
     166:	0f 92       	push	r0
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	0f 92       	push	r0
     16c:	11 24       	eor	r1, r1
     16e:	2f 93       	push	r18
     170:	3f 93       	push	r19
     172:	4f 93       	push	r20
     174:	5f 93       	push	r21
     176:	6f 93       	push	r22
     178:	7f 93       	push	r23
     17a:	8f 93       	push	r24
     17c:	9f 93       	push	r25
     17e:	af 93       	push	r26
     180:	bf 93       	push	r27
     182:	ef 93       	push	r30
     184:	ff 93       	push	r31
     186:	df 93       	push	r29
     188:	cf 93       	push	r28
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
    /* Call the interrupt entry routine */
    atomIntEnter();
     18e:	0e 94 ca 04 	call	0x994	; 0x994 <atomIntEnter>

    /* Call the OS system tick handler */
    atomTimerTick();
     192:	0e 94 1d 11 	call	0x223a	; 0x223a <atomTimerTick>

    /* Call the interrupt exit routine */
    atomIntExit(TRUE);
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	0e 94 da 04 	call	0x9b4	; 0x9b4 <atomIntExit>
}
     19c:	cf 91       	pop	r28
     19e:	df 91       	pop	r29
     1a0:	ff 91       	pop	r31
     1a2:	ef 91       	pop	r30
     1a4:	bf 91       	pop	r27
     1a6:	af 91       	pop	r26
     1a8:	9f 91       	pop	r25
     1aa:	8f 91       	pop	r24
     1ac:	7f 91       	pop	r23
     1ae:	6f 91       	pop	r22
     1b0:	5f 91       	pop	r21
     1b2:	4f 91       	pop	r20
     1b4:	3f 91       	pop	r19
     1b6:	2f 91       	pop	r18
     1b8:	0f 90       	pop	r0
     1ba:	0f be       	out	0x3f, r0	; 63
     1bc:	0f 90       	pop	r0
     1be:	1f 90       	pop	r1
     1c0:	18 95       	reti

000001c2 <__vector_default>:
 * tick interrupt.
 *
 * @return None
 */
ISR (BADISR_vect)
{
     1c2:	1f 92       	push	r1
     1c4:	0f 92       	push	r0
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	0f 92       	push	r0
     1ca:	11 24       	eor	r1, r1
     1cc:	df 93       	push	r29
     1ce:	cf 93       	push	r28
     1d0:	cd b7       	in	r28, 0x3d	; 61
     1d2:	de b7       	in	r29, 0x3e	; 62
    /* Empty */
}
     1d4:	cf 91       	pop	r28
     1d6:	df 91       	pop	r29
     1d8:	0f 90       	pop	r0
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	0f 90       	pop	r0
     1de:	1f 90       	pop	r1
     1e0:	18 95       	reti

000001e2 <thread_shell>:
 * starting threads for the first time.
 *
 * @return None
 */
static void thread_shell (void)
{
     1e2:	df 93       	push	r29
     1e4:	cf 93       	push	r28
     1e6:	00 d0       	rcall	.+0      	; 0x1e8 <thread_shell+0x6>
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
    ATOM_TCB *curr_tcb;

    /* Get the TCB of the thread being started */
    curr_tcb = atomCurrentContext();
     1ec:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <atomCurrentContext>
     1f0:	9a 83       	std	Y+2, r25	; 0x02
     1f2:	89 83       	std	Y+1, r24	; 0x01

    /**
     * Enable interrupts - these will not be enabled when a thread
     * is first restored.
     */
    sei();
     1f4:	78 94       	sei

    /* Call the thread entry point */
    if (curr_tcb && curr_tcb->entry_point)
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
     1f8:	9a 81       	ldd	r25, Y+2	; 0x02
     1fa:	00 97       	sbiw	r24, 0x00	; 0
     1fc:	a1 f0       	breq	.+40     	; 0x226 <thread_shell+0x44>
     1fe:	e9 81       	ldd	r30, Y+1	; 0x01
     200:	fa 81       	ldd	r31, Y+2	; 0x02
     202:	83 81       	ldd	r24, Z+3	; 0x03
     204:	94 81       	ldd	r25, Z+4	; 0x04
     206:	00 97       	sbiw	r24, 0x00	; 0
     208:	71 f0       	breq	.+28     	; 0x226 <thread_shell+0x44>
    {
        curr_tcb->entry_point(curr_tcb->entry_param);
     20a:	e9 81       	ldd	r30, Y+1	; 0x01
     20c:	fa 81       	ldd	r31, Y+2	; 0x02
     20e:	23 81       	ldd	r18, Z+3	; 0x03
     210:	34 81       	ldd	r19, Z+4	; 0x04
     212:	e9 81       	ldd	r30, Y+1	; 0x01
     214:	fa 81       	ldd	r31, Y+2	; 0x02
     216:	85 81       	ldd	r24, Z+5	; 0x05
     218:	96 81       	ldd	r25, Z+6	; 0x06
     21a:	a7 81       	ldd	r26, Z+7	; 0x07
     21c:	b0 85       	ldd	r27, Z+8	; 0x08
     21e:	bc 01       	movw	r22, r24
     220:	cd 01       	movw	r24, r26
     222:	f9 01       	movw	r30, r18
     224:	09 95       	icall
    }

    /* Thread has run to completion: remove it from the ready list */
    curr_tcb->terminated = TRUE;
     226:	e9 81       	ldd	r30, Y+1	; 0x01
     228:	fa 81       	ldd	r31, Y+2	; 0x02
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	81 8b       	std	Z+17, r24	; 0x11
    atomSched (FALSE);
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	0e 94 6f 03 	call	0x6de	; 0x6de <atomSched>
}
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	cf 91       	pop	r28
     23a:	df 91       	pop	r29
     23c:	08 95       	ret

0000023e <archThreadContextInit>:
 * @param[in] entry_param Parameter to be passed to the thread entry point
 *
 * @return None
 */
void archThreadContextInit (ATOM_TCB *tcb_ptr, void *stack_top, void (*entry_point)(uint32_t), uint32_t entry_param)
{
     23e:	0f 93       	push	r16
     240:	1f 93       	push	r17
     242:	df 93       	push	r29
     244:	cf 93       	push	r28
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
     24a:	2c 97       	sbiw	r28, 0x0c	; 12
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
     256:	9c 83       	std	Y+4, r25	; 0x04
     258:	8b 83       	std	Y+3, r24	; 0x03
     25a:	7e 83       	std	Y+6, r23	; 0x06
     25c:	6d 83       	std	Y+5, r22	; 0x05
     25e:	58 87       	std	Y+8, r21	; 0x08
     260:	4f 83       	std	Y+7, r20	; 0x07
     262:	09 87       	std	Y+9, r16	; 0x09
     264:	1a 87       	std	Y+10, r17	; 0x0a
     266:	2b 87       	std	Y+11, r18	; 0x0b
     268:	3c 87       	std	Y+12, r19	; 0x0c
    uint8_t *stack_ptr;

    /** Start at stack top */
    stack_ptr = (uint8_t *)stack_top;
     26a:	8d 81       	ldd	r24, Y+5	; 0x05
     26c:	9e 81       	ldd	r25, Y+6	; 0x06
     26e:	9a 83       	std	Y+2, r25	; 0x02
     270:	89 83       	std	Y+1, r24	; 0x01
     * and call it directly from the thread restore routines.
     *
     * Because we are filling the stack from top to bottom, this goes
     * on the stack first (at the top).
     */
    *stack_ptr-- = (uint8_t)((uint16_t)thread_shell & 0xFF);
     272:	81 ef       	ldi	r24, 0xF1	; 241
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	e9 81       	ldd	r30, Y+1	; 0x01
     278:	fa 81       	ldd	r31, Y+2	; 0x02
     27a:	80 83       	st	Z, r24
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	9a 81       	ldd	r25, Y+2	; 0x02
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	9a 83       	std	Y+2, r25	; 0x02
     284:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = (uint8_t)(((uint16_t)thread_shell >> 8) & 0xFF);
     286:	81 ef       	ldi	r24, 0xF1	; 241
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	89 2f       	mov	r24, r25
     28c:	99 27       	eor	r25, r25
     28e:	e9 81       	ldd	r30, Y+1	; 0x01
     290:	fa 81       	ldd	r31, Y+2	; 0x02
     292:	80 83       	st	Z, r24
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	9a 81       	ldd	r25, Y+2	; 0x02
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	9a 83       	std	Y+2, r25	; 0x02
     29c:	89 83       	std	Y+1, r24	; 0x01
     */

    /**
     * Store starting register values for R2-R17, R28-R29
     */
    *stack_ptr-- = 0x00;    /* R2 */
     29e:	e9 81       	ldd	r30, Y+1	; 0x01
     2a0:	fa 81       	ldd	r31, Y+2	; 0x02
     2a2:	10 82       	st	Z, r1
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	9a 81       	ldd	r25, Y+2	; 0x02
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	9a 83       	std	Y+2, r25	; 0x02
     2ac:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R3 */
     2ae:	e9 81       	ldd	r30, Y+1	; 0x01
     2b0:	fa 81       	ldd	r31, Y+2	; 0x02
     2b2:	10 82       	st	Z, r1
     2b4:	89 81       	ldd	r24, Y+1	; 0x01
     2b6:	9a 81       	ldd	r25, Y+2	; 0x02
     2b8:	01 97       	sbiw	r24, 0x01	; 1
     2ba:	9a 83       	std	Y+2, r25	; 0x02
     2bc:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R4 */
     2be:	e9 81       	ldd	r30, Y+1	; 0x01
     2c0:	fa 81       	ldd	r31, Y+2	; 0x02
     2c2:	10 82       	st	Z, r1
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	9a 81       	ldd	r25, Y+2	; 0x02
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	9a 83       	std	Y+2, r25	; 0x02
     2cc:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R5 */
     2ce:	e9 81       	ldd	r30, Y+1	; 0x01
     2d0:	fa 81       	ldd	r31, Y+2	; 0x02
     2d2:	10 82       	st	Z, r1
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	9a 81       	ldd	r25, Y+2	; 0x02
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	9a 83       	std	Y+2, r25	; 0x02
     2dc:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R6 */
     2de:	e9 81       	ldd	r30, Y+1	; 0x01
     2e0:	fa 81       	ldd	r31, Y+2	; 0x02
     2e2:	10 82       	st	Z, r1
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	9a 83       	std	Y+2, r25	; 0x02
     2ec:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R7 */
     2ee:	e9 81       	ldd	r30, Y+1	; 0x01
     2f0:	fa 81       	ldd	r31, Y+2	; 0x02
     2f2:	10 82       	st	Z, r1
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	9a 81       	ldd	r25, Y+2	; 0x02
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	9a 83       	std	Y+2, r25	; 0x02
     2fc:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R8 */
     2fe:	e9 81       	ldd	r30, Y+1	; 0x01
     300:	fa 81       	ldd	r31, Y+2	; 0x02
     302:	10 82       	st	Z, r1
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	9a 81       	ldd	r25, Y+2	; 0x02
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	9a 83       	std	Y+2, r25	; 0x02
     30c:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R9 */
     30e:	e9 81       	ldd	r30, Y+1	; 0x01
     310:	fa 81       	ldd	r31, Y+2	; 0x02
     312:	10 82       	st	Z, r1
     314:	89 81       	ldd	r24, Y+1	; 0x01
     316:	9a 81       	ldd	r25, Y+2	; 0x02
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	9a 83       	std	Y+2, r25	; 0x02
     31c:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R10 */
     31e:	e9 81       	ldd	r30, Y+1	; 0x01
     320:	fa 81       	ldd	r31, Y+2	; 0x02
     322:	10 82       	st	Z, r1
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	9a 81       	ldd	r25, Y+2	; 0x02
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	9a 83       	std	Y+2, r25	; 0x02
     32c:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R11 */
     32e:	e9 81       	ldd	r30, Y+1	; 0x01
     330:	fa 81       	ldd	r31, Y+2	; 0x02
     332:	10 82       	st	Z, r1
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	9a 81       	ldd	r25, Y+2	; 0x02
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	9a 83       	std	Y+2, r25	; 0x02
     33c:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R12 */
     33e:	e9 81       	ldd	r30, Y+1	; 0x01
     340:	fa 81       	ldd	r31, Y+2	; 0x02
     342:	10 82       	st	Z, r1
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	9a 81       	ldd	r25, Y+2	; 0x02
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	9a 83       	std	Y+2, r25	; 0x02
     34c:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R13 */
     34e:	e9 81       	ldd	r30, Y+1	; 0x01
     350:	fa 81       	ldd	r31, Y+2	; 0x02
     352:	10 82       	st	Z, r1
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	9a 81       	ldd	r25, Y+2	; 0x02
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	9a 83       	std	Y+2, r25	; 0x02
     35c:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R14 */
     35e:	e9 81       	ldd	r30, Y+1	; 0x01
     360:	fa 81       	ldd	r31, Y+2	; 0x02
     362:	10 82       	st	Z, r1
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	9a 81       	ldd	r25, Y+2	; 0x02
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	9a 83       	std	Y+2, r25	; 0x02
     36c:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R15 */
     36e:	e9 81       	ldd	r30, Y+1	; 0x01
     370:	fa 81       	ldd	r31, Y+2	; 0x02
     372:	10 82       	st	Z, r1
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	9a 81       	ldd	r25, Y+2	; 0x02
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	9a 83       	std	Y+2, r25	; 0x02
     37c:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R16 */
     37e:	e9 81       	ldd	r30, Y+1	; 0x01
     380:	fa 81       	ldd	r31, Y+2	; 0x02
     382:	10 82       	st	Z, r1
     384:	89 81       	ldd	r24, Y+1	; 0x01
     386:	9a 81       	ldd	r25, Y+2	; 0x02
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	9a 83       	std	Y+2, r25	; 0x02
     38c:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R17 */
     38e:	e9 81       	ldd	r30, Y+1	; 0x01
     390:	fa 81       	ldd	r31, Y+2	; 0x02
     392:	10 82       	st	Z, r1
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	9a 81       	ldd	r25, Y+2	; 0x02
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	9a 83       	std	Y+2, r25	; 0x02
     39c:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R28 */
     39e:	e9 81       	ldd	r30, Y+1	; 0x01
     3a0:	fa 81       	ldd	r31, Y+2	; 0x02
     3a2:	10 82       	st	Z, r1
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	9a 81       	ldd	r25, Y+2	; 0x02
     3a8:	01 97       	sbiw	r24, 0x01	; 1
     3aa:	9a 83       	std	Y+2, r25	; 0x02
     3ac:	89 83       	std	Y+1, r24	; 0x01
    *stack_ptr-- = 0x00;    /* R29 */
     3ae:	e9 81       	ldd	r30, Y+1	; 0x01
     3b0:	fa 81       	ldd	r31, Y+2	; 0x02
     3b2:	10 82       	st	Z, r1
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
     3b6:	9a 81       	ldd	r25, Y+2	; 0x02
     3b8:	01 97       	sbiw	r24, 0x01	; 1
     3ba:	9a 83       	std	Y+2, r25	; 0x02
     3bc:	89 83       	std	Y+1, r24	; 0x01
    /**
     * All thread context has now been initialised. Save the current
     * stack pointer to the thread's TCB so it knows where to start
     * looking when the thread is started.
     */
    tcb_ptr->sp_save_ptr = stack_ptr;
     3be:	eb 81       	ldd	r30, Y+3	; 0x03
     3c0:	fc 81       	ldd	r31, Y+4	; 0x04
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	9a 81       	ldd	r25, Y+2	; 0x02
     3c6:	91 83       	std	Z+1, r25	; 0x01
     3c8:	80 83       	st	Z, r24

}
     3ca:	2c 96       	adiw	r28, 0x0c	; 12
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
     3d6:	cf 91       	pop	r28
     3d8:	df 91       	pop	r29
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	8f 93       	push	r24
     3ec:	9f 93       	push	r25
     3ee:	ef 93       	push	r30
     3f0:	ff 93       	push	r31
     3f2:	df 93       	push	r29
     3f4:	cf 93       	push	r28
     3f6:	00 d0       	rcall	.+0      	; 0x3f8 <__vector_18+0x18>
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <__vector_18+0x1a>
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     3fe:	e0 ec       	ldi	r30, 0xC0	; 192
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
     406:	e6 ec       	ldi	r30, 0xC6	; 198
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	8b 83       	std	Y+3, r24	; 0x03
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
     40e:	8a 81       	ldd	r24, Y+2	; 0x02
     410:	88 71       	andi	r24, 0x18	; 24
     412:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     414:	80 91 50 01 	lds	r24, 0x0150
     418:	8f 5f       	subi	r24, 0xFF	; 255
     41a:	8f 71       	andi	r24, 0x1F	; 31
     41c:	8c 83       	std	Y+4, r24	; 0x04
    
    if ( tmphead == UART_RxTail ) {
     41e:	90 91 51 01 	lds	r25, 0x0151
     422:	8c 81       	ldd	r24, Y+4	; 0x04
     424:	89 17       	cp	r24, r25
     426:	19 f4       	brne	.+6      	; 0x42e <__vector_18+0x4e>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	0b c0       	rjmp	.+22     	; 0x444 <__vector_18+0x64>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     42e:	8c 81       	ldd	r24, Y+4	; 0x04
     430:	80 93 50 01 	sts	0x0150, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     434:	8c 81       	ldd	r24, Y+4	; 0x04
     436:	88 2f       	mov	r24, r24
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	fc 01       	movw	r30, r24
     43c:	e2 5d       	subi	r30, 0xD2	; 210
     43e:	fe 4f       	sbci	r31, 0xFE	; 254
     440:	8b 81       	ldd	r24, Y+3	; 0x03
     442:	80 83       	st	Z, r24
    }
    UART_LastRxError = lastRxError;   
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	80 93 52 01 	sts	0x0152, r24
}
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	cf 91       	pop	r28
     454:	df 91       	pop	r29
     456:	ff 91       	pop	r31
     458:	ef 91       	pop	r30
     45a:	9f 91       	pop	r25
     45c:	8f 91       	pop	r24
     45e:	0f 90       	pop	r0
     460:	0f be       	out	0x3f, r0	; 63
     462:	0f 90       	pop	r0
     464:	1f 90       	pop	r1
     466:	18 95       	reti

00000468 <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     468:	1f 92       	push	r1
     46a:	0f 92       	push	r0
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	0f 92       	push	r0
     470:	11 24       	eor	r1, r1
     472:	8f 93       	push	r24
     474:	9f 93       	push	r25
     476:	af 93       	push	r26
     478:	bf 93       	push	r27
     47a:	ef 93       	push	r30
     47c:	ff 93       	push	r31
     47e:	df 93       	push	r29
     480:	cf 93       	push	r28
     482:	0f 92       	push	r0
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     488:	90 91 4e 01 	lds	r25, 0x014E
     48c:	80 91 4f 01 	lds	r24, 0x014F
     490:	98 17       	cp	r25, r24
     492:	99 f0       	breq	.+38     	; 0x4ba <__vector_19+0x52>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     494:	80 91 4f 01 	lds	r24, 0x014F
     498:	8f 5f       	subi	r24, 0xFF	; 255
     49a:	8f 71       	andi	r24, 0x1F	; 31
     49c:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
     49e:	89 81       	ldd	r24, Y+1	; 0x01
     4a0:	80 93 4f 01 	sts	0x014F, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     4a4:	a6 ec       	ldi	r26, 0xC6	; 198
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	88 2f       	mov	r24, r24
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	fc 01       	movw	r30, r24
     4b0:	e2 5f       	subi	r30, 0xF2	; 242
     4b2:	fe 4f       	sbci	r31, 0xFE	; 254
     4b4:	80 81       	ld	r24, Z
     4b6:	8c 93       	st	X, r24
     4b8:	07 c0       	rjmp	.+14     	; 0x4c8 <__vector_19+0x60>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     4ba:	a1 ec       	ldi	r26, 0xC1	; 193
     4bc:	b0 e0       	ldi	r27, 0x00	; 0
     4be:	e1 ec       	ldi	r30, 0xC1	; 193
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	80 81       	ld	r24, Z
     4c4:	8f 7d       	andi	r24, 0xDF	; 223
     4c6:	8c 93       	st	X, r24
    }
}
     4c8:	0f 90       	pop	r0
     4ca:	cf 91       	pop	r28
     4cc:	df 91       	pop	r29
     4ce:	ff 91       	pop	r31
     4d0:	ef 91       	pop	r30
     4d2:	bf 91       	pop	r27
     4d4:	af 91       	pop	r26
     4d6:	9f 91       	pop	r25
     4d8:	8f 91       	pop	r24
     4da:	0f 90       	pop	r0
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	0f 90       	pop	r0
     4e0:	1f 90       	pop	r1
     4e2:	18 95       	reti

000004e4 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
     4e4:	df 93       	push	r29
     4e6:	cf 93       	push	r28
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <uart_init+0x6>
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	9a 83       	std	Y+2, r25	; 0x02
     4f0:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
     4f2:	10 92 4e 01 	sts	0x014E, r1
    UART_TxTail = 0;
     4f6:	10 92 4f 01 	sts	0x014F, r1
    UART_RxHead = 0;
     4fa:	10 92 50 01 	sts	0x0150, r1
    UART_RxTail = 0;
     4fe:	10 92 51 01 	sts	0x0151, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	9a 81       	ldd	r25, Y+2	; 0x02
     506:	99 23       	and	r25, r25
     508:	4c f4       	brge	.+18     	; 0x51c <uart_init+0x38>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
     50a:	e0 ec       	ldi	r30, 0xC0	; 192
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	80 83       	st	Z, r24
   		baudrate &= ~0x8000;
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	9a 81       	ldd	r25, Y+2	; 0x02
     516:	9f 77       	andi	r25, 0x7F	; 127
     518:	9a 83       	std	Y+2, r25	; 0x02
     51a:	89 83       	std	Y+1, r24	; 0x01
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
     51c:	e5 ec       	ldi	r30, 0xC5	; 197
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	9a 81       	ldd	r25, Y+2	; 0x02
     524:	89 2f       	mov	r24, r25
     526:	99 27       	eor	r25, r25
     528:	80 83       	st	Z, r24
    UBRR0L = (unsigned char) baudrate;
     52a:	e4 ec       	ldi	r30, 0xC4	; 196
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	80 83       	st	Z, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     532:	e1 ec       	ldi	r30, 0xC1	; 193
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	88 e9       	ldi	r24, 0x98	; 152
     538:	80 83       	st	Z, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
     53a:	e2 ec       	ldi	r30, 0xC2	; 194
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	86 e0       	ldi	r24, 0x06	; 6
     540:	80 83       	st	Z, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	cf 91       	pop	r28
     548:	df 91       	pop	r29
     54a:	08 95       	ret

0000054c <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
     54c:	df 93       	push	r29
     54e:	cf 93       	push	r28
     550:	00 d0       	rcall	.+0      	; 0x552 <uart_getc+0x6>
     552:	00 d0       	rcall	.+0      	; 0x554 <uart_getc+0x8>
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
     558:	90 91 50 01 	lds	r25, 0x0150
     55c:	80 91 51 01 	lds	r24, 0x0151
     560:	98 17       	cp	r25, r24
     562:	29 f4       	brne	.+10     	; 0x56e <uart_getc+0x22>
        return UART_NO_DATA;   /* no data available */
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	9c 83       	std	Y+4, r25	; 0x04
     56a:	8b 83       	std	Y+3, r24	; 0x03
     56c:	1d c0       	rjmp	.+58     	; 0x5a8 <uart_getc+0x5c>
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     56e:	80 91 51 01 	lds	r24, 0x0151
     572:	8f 5f       	subi	r24, 0xFF	; 255
     574:	8f 71       	andi	r24, 0x1F	; 31
     576:	8a 83       	std	Y+2, r24	; 0x02
    UART_RxTail = tmptail; 
     578:	8a 81       	ldd	r24, Y+2	; 0x02
     57a:	80 93 51 01 	sts	0x0151, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     57e:	8a 81       	ldd	r24, Y+2	; 0x02
     580:	88 2f       	mov	r24, r24
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	fc 01       	movw	r30, r24
     586:	e2 5d       	subi	r30, 0xD2	; 210
     588:	fe 4f       	sbci	r31, 0xFE	; 254
     58a:	80 81       	ld	r24, Z
     58c:	89 83       	std	Y+1, r24	; 0x01
    
    return (UART_LastRxError << 8) + data;
     58e:	80 91 52 01 	lds	r24, 0x0152
     592:	88 2f       	mov	r24, r24
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	38 2f       	mov	r19, r24
     598:	22 27       	eor	r18, r18
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	88 2f       	mov	r24, r24
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	82 0f       	add	r24, r18
     5a2:	93 1f       	adc	r25, r19
     5a4:	9c 83       	std	Y+4, r25	; 0x04
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	8b 81       	ldd	r24, Y+3	; 0x03
     5aa:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	cf 91       	pop	r28
     5b6:	df 91       	pop	r29
     5b8:	08 95       	ret

000005ba <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
     5ba:	df 93       	push	r29
     5bc:	cf 93       	push	r28
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <uart_putc+0x6>
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     5c6:	80 91 4e 01 	lds	r24, 0x014E
     5ca:	8f 5f       	subi	r24, 0xFF	; 255
     5cc:	8f 71       	andi	r24, 0x1F	; 31
     5ce:	89 83       	std	Y+1, r24	; 0x01
    
    while ( tmphead == UART_TxTail ){
     5d0:	90 91 4f 01 	lds	r25, 0x014F
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	89 17       	cp	r24, r25
     5d8:	d9 f3       	breq	.-10     	; 0x5d0 <uart_putc+0x16>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     5da:	89 81       	ldd	r24, Y+1	; 0x01
     5dc:	88 2f       	mov	r24, r24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	fc 01       	movw	r30, r24
     5e2:	e2 5f       	subi	r30, 0xF2	; 242
     5e4:	fe 4f       	sbci	r31, 0xFE	; 254
     5e6:	8a 81       	ldd	r24, Y+2	; 0x02
     5e8:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	80 93 4e 01 	sts	0x014E, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     5f0:	a1 ec       	ldi	r26, 0xC1	; 193
     5f2:	b0 e0       	ldi	r27, 0x00	; 0
     5f4:	e1 ec       	ldi	r30, 0xC1	; 193
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	80 81       	ld	r24, Z
     5fa:	80 62       	ori	r24, 0x20	; 32
     5fc:	8c 93       	st	X, r24

}/* uart_putc */
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	cf 91       	pop	r28
     604:	df 91       	pop	r29
     606:	08 95       	ret

00000608 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     608:	df 93       	push	r29
     60a:	cf 93       	push	r28
     60c:	00 d0       	rcall	.+0      	; 0x60e <uart_puts+0x6>
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	9a 83       	std	Y+2, r25	; 0x02
     614:	89 83       	std	Y+1, r24	; 0x01
     616:	0b c0       	rjmp	.+22     	; 0x62e <uart_puts+0x26>
    while (*s) 
      uart_putc(*s++);
     618:	e9 81       	ldd	r30, Y+1	; 0x01
     61a:	fa 81       	ldd	r31, Y+2	; 0x02
     61c:	20 81       	ld	r18, Z
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	9a 81       	ldd	r25, Y+2	; 0x02
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	9a 83       	std	Y+2, r25	; 0x02
     626:	89 83       	std	Y+1, r24	; 0x01
     628:	82 2f       	mov	r24, r18
     62a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     62e:	e9 81       	ldd	r30, Y+1	; 0x01
     630:	fa 81       	ldd	r31, Y+2	; 0x02
     632:	80 81       	ld	r24, Z
     634:	88 23       	and	r24, r24
     636:	81 f7       	brne	.-32     	; 0x618 <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	cf 91       	pop	r28
     63e:	df 91       	pop	r29
     640:	08 95       	ret

00000642 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
     642:	df 93       	push	r29
     644:	cf 93       	push	r28
     646:	00 d0       	rcall	.+0      	; 0x648 <uart_puts_p+0x6>
     648:	00 d0       	rcall	.+0      	; 0x64a <uart_puts_p+0x8>
     64a:	00 d0       	rcall	.+0      	; 0x64c <uart_puts_p+0xa>
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	9d 83       	std	Y+5, r25	; 0x05
     652:	8c 83       	std	Y+4, r24	; 0x04
     654:	03 c0       	rjmp	.+6      	; 0x65c <uart_puts_p+0x1a>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
     656:	8e 81       	ldd	r24, Y+6	; 0x06
     658:	0e 94 dd 02 	call	0x5ba	; 0x5ba <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
     65c:	8c 81       	ldd	r24, Y+4	; 0x04
     65e:	9d 81       	ldd	r25, Y+5	; 0x05
     660:	9b 83       	std	Y+3, r25	; 0x03
     662:	8a 83       	std	Y+2, r24	; 0x02
     664:	8c 81       	ldd	r24, Y+4	; 0x04
     666:	9d 81       	ldd	r25, Y+5	; 0x05
     668:	01 96       	adiw	r24, 0x01	; 1
     66a:	9d 83       	std	Y+5, r25	; 0x05
     66c:	8c 83       	std	Y+4, r24	; 0x04
     66e:	ea 81       	ldd	r30, Y+2	; 0x02
     670:	fb 81       	ldd	r31, Y+3	; 0x03
     672:	84 91       	lpm	r24, Z+
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	8e 83       	std	Y+6, r24	; 0x06
     67a:	8e 81       	ldd	r24, Y+6	; 0x06
     67c:	88 23       	and	r24, r24
     67e:	59 f7       	brne	.-42     	; 0x656 <uart_puts_p+0x14>
      uart_putc(c);

}/* uart_puts_p */
     680:	26 96       	adiw	r28, 0x06	; 6
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	cf 91       	pop	r28
     68e:	df 91       	pop	r29
     690:	08 95       	ret

00000692 <uart_available>:
Purpose:  Determine the number of bytes waiting in the receive buffer
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
int uart_available(void)
{
     692:	df 93       	push	r29
     694:	cf 93       	push	r28
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
        return (UART_RX_BUFFER_MASK + UART_RxHead - UART_RxTail) % UART_RX_BUFFER_MASK;
     69a:	80 91 50 01 	lds	r24, 0x0150
     69e:	88 2f       	mov	r24, r24
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	9c 01       	movw	r18, r24
     6a4:	21 5e       	subi	r18, 0xE1	; 225
     6a6:	3f 4f       	sbci	r19, 0xFF	; 255
     6a8:	80 91 51 01 	lds	r24, 0x0151
     6ac:	88 2f       	mov	r24, r24
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	a9 01       	movw	r20, r18
     6b2:	48 1b       	sub	r20, r24
     6b4:	59 0b       	sbc	r21, r25
     6b6:	ca 01       	movw	r24, r20
     6b8:	2f e1       	ldi	r18, 0x1F	; 31
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	b9 01       	movw	r22, r18
     6be:	0e 94 20 13 	call	0x2640	; 0x2640 <__divmodhi4>
}/* uart_available */
     6c2:	cf 91       	pop	r28
     6c4:	df 91       	pop	r29
     6c6:	08 95       	ret

000006c8 <uart_flush>:
Purpose:  Flush bytes waiting the receive buffer.  Acutally ignores them.
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
     6c8:	df 93       	push	r29
     6ca:	cf 93       	push	r28
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
        UART_RxHead = UART_RxTail;
     6d0:	80 91 51 01 	lds	r24, 0x0151
     6d4:	80 93 50 01 	sts	0x0150, r24
}/* uart_flush */
     6d8:	cf 91       	pop	r28
     6da:	df 91       	pop	r29
     6dc:	08 95       	ret

000006de <atomSched>:
 * @param[in] timer_tick Should be TRUE when called from the system tick
 *
 * @return None
 */
void atomSched (uint8_t timer_tick)
{
     6de:	df 93       	push	r29
     6e0:	cf 93       	push	r28
     6e2:	00 d0       	rcall	.+0      	; 0x6e4 <atomSched+0x6>
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <atomSched+0x8>
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <atomSched+0xa>
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	8e 83       	std	Y+6, r24	; 0x06
    CRITICAL_STORE;
    ATOM_TCB *new_tcb = NULL;
     6ee:	1c 82       	std	Y+4, r1	; 0x04
     6f0:	1b 82       	std	Y+3, r1	; 0x03
    /**
     * Check the OS has actually started. As long as the proper initialisation
     * sequence is followed there should be no calls here until the OS is
     * started, but we check to handle badly-behaved ports.
     */
    if (atomOSStarted == FALSE)
     6f2:	80 91 55 01 	lds	r24, 0x0155
     6f6:	88 23       	and	r24, r24
     6f8:	09 f4       	brne	.+2      	; 0x6fc <atomSched+0x1e>
     6fa:	6c c0       	rjmp	.+216    	; 0x7d4 <atomSched+0xf6>
        /* Don't schedule anything in until the OS is started */
        return;
    }

    /* Enter critical section */
    CRITICAL_START ();
     6fc:	ef e5       	ldi	r30, 0x5F	; 95
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	80 81       	ld	r24, Z
     702:	8d 83       	std	Y+5, r24	; 0x05
     704:	f8 94       	cli
    /**
     * If the current thread is going into suspension or is being
     * terminated (run to completion), then unconditionally dequeue
     * the next thread for execution.
     */
    if ((curr_tcb->suspended == TRUE) || (curr_tcb->terminated == TRUE))
     706:	e0 91 56 01 	lds	r30, 0x0156
     70a:	f0 91 57 01 	lds	r31, 0x0157
     70e:	85 85       	ldd	r24, Z+13	; 0x0d
     710:	81 30       	cpi	r24, 0x01	; 1
     712:	39 f0       	breq	.+14     	; 0x722 <atomSched+0x44>
     714:	e0 91 56 01 	lds	r30, 0x0156
     718:	f0 91 57 01 	lds	r31, 0x0157
     71c:	81 89       	ldd	r24, Z+17	; 0x11
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	81 f4       	brne	.+32     	; 0x742 <atomSched+0x64>
         * Dequeue the next ready to run thread. There will always be
         * at least the idle thread waiting. Note that this could
         * actually be the suspending thread if it was unsuspended
         * before the scheduler was called.
         */
        new_tcb = tcbDequeueHead (&tcbReadyQ);
     722:	83 e5       	ldi	r24, 0x53	; 83
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	0e 94 0f 06 	call	0xc1e	; 0xc1e <tcbDequeueHead>
     72a:	9c 83       	std	Y+4, r25	; 0x04
     72c:	8b 83       	std	Y+3, r24	; 0x03
         * sitting on a suspend queue or similar within one of the OS
         * primitive libraries (e.g. semaphore).
         */

        /* Switch to the new thread */
        atomThreadSwitch (curr_tcb, new_tcb);
     72e:	80 91 56 01 	lds	r24, 0x0156
     732:	90 91 57 01 	lds	r25, 0x0157
     736:	2b 81       	ldd	r18, Y+3	; 0x03
     738:	3c 81       	ldd	r19, Y+4	; 0x04
     73a:	b9 01       	movw	r22, r18
     73c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <atomThreadSwitch>
     740:	45 c0       	rjmp	.+138    	; 0x7cc <atomSched+0xee>
     * if any other threads are ready.
     */
    else
    {
        /* Calculate which priority is allowed to be scheduled in */
        if (timer_tick == TRUE)
     742:	8e 81       	ldd	r24, Y+6	; 0x06
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	51 f4       	brne	.+20     	; 0x75c <atomSched+0x7e>
        {
            /* Same priority or higher threads can preempt */
            lowest_pri = (int16_t)curr_tcb->priority;
     748:	e0 91 56 01 	lds	r30, 0x0156
     74c:	f0 91 57 01 	lds	r31, 0x0157
     750:	82 81       	ldd	r24, Z+2	; 0x02
     752:	88 2f       	mov	r24, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	9a 83       	std	Y+2, r25	; 0x02
     758:	89 83       	std	Y+1, r24	; 0x01
     75a:	16 c0       	rjmp	.+44     	; 0x788 <atomSched+0xaa>
        }
        else if (curr_tcb->priority > 0)
     75c:	e0 91 56 01 	lds	r30, 0x0156
     760:	f0 91 57 01 	lds	r31, 0x0157
     764:	82 81       	ldd	r24, Z+2	; 0x02
     766:	88 23       	and	r24, r24
     768:	59 f0       	breq	.+22     	; 0x780 <atomSched+0xa2>
        {
            /* Only higher priority threads can preempt, invalid for 0 (highest) */
            lowest_pri = (int16_t)(curr_tcb->priority - 1);
     76a:	e0 91 56 01 	lds	r30, 0x0156
     76e:	f0 91 57 01 	lds	r31, 0x0157
     772:	82 81       	ldd	r24, Z+2	; 0x02
     774:	88 2f       	mov	r24, r24
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	01 97       	sbiw	r24, 0x01	; 1
     77a:	9a 83       	std	Y+2, r25	; 0x02
     77c:	89 83       	std	Y+1, r24	; 0x01
     77e:	04 c0       	rjmp	.+8      	; 0x788 <atomSched+0xaa>
        {
            /**
             * Current priority is already highest (0), don't allow preempt by
             * threads of any priority because this is not a time-slice.
             */
            lowest_pri = -1;
     780:	8f ef       	ldi	r24, 0xFF	; 255
     782:	9f ef       	ldi	r25, 0xFF	; 255
     784:	9a 83       	std	Y+2, r25	; 0x02
     786:	89 83       	std	Y+1, r24	; 0x01
        }

        /* Check if a reschedule is allowed */
        if (lowest_pri >= 0)
     788:	89 81       	ldd	r24, Y+1	; 0x01
     78a:	9a 81       	ldd	r25, Y+2	; 0x02
     78c:	99 23       	and	r25, r25
     78e:	f4 f0       	brlt	.+60     	; 0x7cc <atomSched+0xee>
        {
            /* Check for a thread at the given minimum priority level or higher */
            new_tcb = tcbDequeuePriority (&tcbReadyQ, (uint8_t)lowest_pri);
     790:	29 81       	ldd	r18, Y+1	; 0x01
     792:	83 e5       	ldi	r24, 0x53	; 83
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	62 2f       	mov	r22, r18
     798:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <tcbDequeuePriority>
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	8b 83       	std	Y+3, r24	; 0x03

            /* If a thread was found, schedule it in */
            if (new_tcb)
     7a0:	8b 81       	ldd	r24, Y+3	; 0x03
     7a2:	9c 81       	ldd	r25, Y+4	; 0x04
     7a4:	00 97       	sbiw	r24, 0x00	; 0
     7a6:	91 f0       	breq	.+36     	; 0x7cc <atomSched+0xee>
            {
                /* Add the current thread to the ready queue */
                (void)tcbEnqueuePriority (&tcbReadyQ, curr_tcb);
     7a8:	20 91 56 01 	lds	r18, 0x0156
     7ac:	30 91 57 01 	lds	r19, 0x0157
     7b0:	83 e5       	ldi	r24, 0x53	; 83
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	b9 01       	movw	r22, r18
     7b6:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>

                /* Switch to the new thread */
                atomThreadSwitch (curr_tcb, new_tcb);
     7ba:	80 91 56 01 	lds	r24, 0x0156
     7be:	90 91 57 01 	lds	r25, 0x0157
     7c2:	2b 81       	ldd	r18, Y+3	; 0x03
     7c4:	3c 81       	ldd	r19, Y+4	; 0x04
     7c6:	b9 01       	movw	r22, r18
     7c8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <atomThreadSwitch>
            }
        }
    }

    /* Exit critical section */
    CRITICAL_END ();
     7cc:	ef e5       	ldi	r30, 0x5F	; 95
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	8d 81       	ldd	r24, Y+5	; 0x05
     7d2:	80 83       	st	Z, r24
}
     7d4:	26 96       	adiw	r28, 0x06	; 6
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	cf 91       	pop	r28
     7e2:	df 91       	pop	r29
     7e4:	08 95       	ret

000007e6 <atomThreadSwitch>:
 * @param[in] new_tcb Pointer to TCB for thread being scheduled in
 *
 * @return None
 */
static void atomThreadSwitch(ATOM_TCB *old_tcb, ATOM_TCB *new_tcb)
{
     7e6:	df 93       	push	r29
     7e8:	cf 93       	push	r28
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <atomThreadSwitch+0x6>
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <atomThreadSwitch+0x8>
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	9a 83       	std	Y+2, r25	; 0x02
     7f4:	89 83       	std	Y+1, r24	; 0x01
     7f6:	7c 83       	std	Y+4, r23	; 0x04
     7f8:	6b 83       	std	Y+3, r22	; 0x03
    /**
     * The context switch will shift execution to a different thread. The
     * new thread is now ready to run so clear its suspend status in
     * preparation for it waking up.
     */
    new_tcb->suspended = FALSE;
     7fa:	eb 81       	ldd	r30, Y+3	; 0x03
     7fc:	fc 81       	ldd	r31, Y+4	; 0x04
     7fe:	15 86       	std	Z+13, r1	; 0x0d
     * Check if the new thread is actually the current one, in which
     * case we don't need to do any context switch. This can happen
     * if a thread goes into suspend but is unsuspended again before
     * it is fully scheduled out.
     */
    if (old_tcb != new_tcb)
     800:	29 81       	ldd	r18, Y+1	; 0x01
     802:	3a 81       	ldd	r19, Y+2	; 0x02
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	9c 81       	ldd	r25, Y+4	; 0x04
     808:	28 17       	cp	r18, r24
     80a:	39 07       	cpc	r19, r25
     80c:	69 f0       	breq	.+26     	; 0x828 <atomThreadSwitch+0x42>
    {
        /* Set the new currently-running thread pointer */
        curr_tcb = new_tcb;
     80e:	8b 81       	ldd	r24, Y+3	; 0x03
     810:	9c 81       	ldd	r25, Y+4	; 0x04
     812:	90 93 57 01 	sts	0x0157, r25
     816:	80 93 56 01 	sts	0x0156, r24

        /* Call the architecture-specific context switch */
        archContextSwitch (old_tcb, new_tcb);
     81a:	89 81       	ldd	r24, Y+1	; 0x01
     81c:	9a 81       	ldd	r25, Y+2	; 0x02
     81e:	2b 81       	ldd	r18, Y+3	; 0x03
     820:	3c 81       	ldd	r19, Y+4	; 0x04
     822:	b9 01       	movw	r22, r18
     824:	0e 94 53 00 	call	0xa6	; 0xa6 <archContextSwitch>
    }
}
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	cf 91       	pop	r28
     832:	df 91       	pop	r29
     834:	08 95       	ret

00000836 <atomThreadCreate>:
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 * @retval ATOM_ERR_QUEUE Error putting the thread on the ready queue
 */
uint8_t atomThreadCreate (ATOM_TCB *tcb_ptr, uint8_t priority, void (*entry_point)(uint32_t), uint32_t entry_param, void *stack_bottom, uint32_t stack_size, uint8_t stack_check)
{
     836:	8f 92       	push	r8
     838:	af 92       	push	r10
     83a:	bf 92       	push	r11
     83c:	cf 92       	push	r12
     83e:	df 92       	push	r13
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	df 93       	push	r29
     84a:	cf 93       	push	r28
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
     850:	64 97       	sbiw	r28, 0x14	; 20
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	9e 83       	std	Y+6, r25	; 0x06
     85e:	8d 83       	std	Y+5, r24	; 0x05
     860:	6f 83       	std	Y+7, r22	; 0x07
     862:	59 87       	std	Y+9, r21	; 0x09
     864:	48 87       	std	Y+8, r20	; 0x08
     866:	0a 87       	std	Y+10, r16	; 0x0a
     868:	1b 87       	std	Y+11, r17	; 0x0b
     86a:	2c 87       	std	Y+12, r18	; 0x0c
     86c:	3d 87       	std	Y+13, r19	; 0x0d
     86e:	ff 86       	std	Y+15, r15	; 0x0f
     870:	ee 86       	std	Y+14, r14	; 0x0e
     872:	a8 8a       	std	Y+16, r10	; 0x10
     874:	b9 8a       	std	Y+17, r11	; 0x11
     876:	ca 8a       	std	Y+18, r12	; 0x12
     878:	db 8a       	std	Y+19, r13	; 0x13
     87a:	8c 8a       	std	Y+20, r8	; 0x14
    uint8_t *stack_top;
#ifdef ATOM_STACK_CHECKING
	int32_t count;
#endif

    if ((tcb_ptr == NULL) || (entry_point == NULL) || (stack_bottom == NULL)
     87c:	8d 81       	ldd	r24, Y+5	; 0x05
     87e:	9e 81       	ldd	r25, Y+6	; 0x06
     880:	00 97       	sbiw	r24, 0x00	; 0
     882:	81 f0       	breq	.+32     	; 0x8a4 <atomThreadCreate+0x6e>
     884:	88 85       	ldd	r24, Y+8	; 0x08
     886:	99 85       	ldd	r25, Y+9	; 0x09
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	61 f0       	breq	.+24     	; 0x8a4 <atomThreadCreate+0x6e>
     88c:	8e 85       	ldd	r24, Y+14	; 0x0e
     88e:	9f 85       	ldd	r25, Y+15	; 0x0f
     890:	00 97       	sbiw	r24, 0x00	; 0
     892:	41 f0       	breq	.+16     	; 0x8a4 <atomThreadCreate+0x6e>
     894:	88 89       	ldd	r24, Y+16	; 0x10
     896:	99 89       	ldd	r25, Y+17	; 0x11
     898:	aa 89       	ldd	r26, Y+18	; 0x12
     89a:	bb 89       	ldd	r27, Y+19	; 0x13
     89c:	00 97       	sbiw	r24, 0x00	; 0
     89e:	a1 05       	cpc	r26, r1
     8a0:	b1 05       	cpc	r27, r1
     8a2:	19 f4       	brne	.+6      	; 0x8aa <atomThreadCreate+0x74>
        || (stack_size == 0))
    {
        /* Bad parameters */
        status = ATOM_ERR_PARAM;
     8a4:	89 ec       	ldi	r24, 0xC9	; 201
     8a6:	8b 83       	std	Y+3, r24	; 0x03
     8a8:	62 c0       	rjmp	.+196    	; 0x96e <__stack+0x6f>
    }
    else
    {

        /* Set up the TCB initial values */
        tcb_ptr->suspended = FALSE;
     8aa:	ed 81       	ldd	r30, Y+5	; 0x05
     8ac:	fe 81       	ldd	r31, Y+6	; 0x06
     8ae:	15 86       	std	Z+13, r1	; 0x0d
        tcb_ptr->terminated = FALSE;
     8b0:	ed 81       	ldd	r30, Y+5	; 0x05
     8b2:	fe 81       	ldd	r31, Y+6	; 0x06
     8b4:	11 8a       	std	Z+17, r1	; 0x11
        tcb_ptr->priority = priority;
     8b6:	ed 81       	ldd	r30, Y+5	; 0x05
     8b8:	fe 81       	ldd	r31, Y+6	; 0x06
     8ba:	8f 81       	ldd	r24, Y+7	; 0x07
     8bc:	82 83       	std	Z+2, r24	; 0x02
        tcb_ptr->prev_tcb = NULL;
     8be:	ed 81       	ldd	r30, Y+5	; 0x05
     8c0:	fe 81       	ldd	r31, Y+6	; 0x06
     8c2:	12 86       	std	Z+10, r1	; 0x0a
     8c4:	11 86       	std	Z+9, r1	; 0x09
        tcb_ptr->next_tcb = NULL;
     8c6:	ed 81       	ldd	r30, Y+5	; 0x05
     8c8:	fe 81       	ldd	r31, Y+6	; 0x06
     8ca:	14 86       	std	Z+12, r1	; 0x0c
     8cc:	13 86       	std	Z+11, r1	; 0x0b
        tcb_ptr->suspend_timo_cb = NULL;
     8ce:	ed 81       	ldd	r30, Y+5	; 0x05
     8d0:	fe 81       	ldd	r31, Y+6	; 0x06
     8d2:	10 8a       	std	Z+16, r1	; 0x10
     8d4:	17 86       	std	Z+15, r1	; 0x0f
        /**
         * Store the thread entry point and parameter in the TCB. This may
         * not be necessary for all architecture ports if they put all of
         * this information in the initial thread stack.
         */
        tcb_ptr->entry_point = entry_point;
     8d6:	ed 81       	ldd	r30, Y+5	; 0x05
     8d8:	fe 81       	ldd	r31, Y+6	; 0x06
     8da:	88 85       	ldd	r24, Y+8	; 0x08
     8dc:	99 85       	ldd	r25, Y+9	; 0x09
     8de:	94 83       	std	Z+4, r25	; 0x04
     8e0:	83 83       	std	Z+3, r24	; 0x03
        tcb_ptr->entry_param = entry_param;
     8e2:	ed 81       	ldd	r30, Y+5	; 0x05
     8e4:	fe 81       	ldd	r31, Y+6	; 0x06
     8e6:	8a 85       	ldd	r24, Y+10	; 0x0a
     8e8:	9b 85       	ldd	r25, Y+11	; 0x0b
     8ea:	ac 85       	ldd	r26, Y+12	; 0x0c
     8ec:	bd 85       	ldd	r27, Y+13	; 0x0d
     8ee:	85 83       	std	Z+5, r24	; 0x05
     8f0:	96 83       	std	Z+6, r25	; 0x06
     8f2:	a7 83       	std	Z+7, r26	; 0x07
     8f4:	b0 87       	std	Z+8, r27	; 0x08
        /**
         * Calculate a pointer to the topmost stack entry, suitably aligned
         * for the architecture. This may discard the top few bytes if the
         * stack size is not a multiple of the stack entry/alignment size.
         */
        stack_top = (uint8_t *)stack_bottom + (stack_size & ~(STACK_ALIGN_SIZE - 1)) - STACK_ALIGN_SIZE;
     8f6:	2e 85       	ldd	r18, Y+14	; 0x0e
     8f8:	3f 85       	ldd	r19, Y+15	; 0x0f
     8fa:	88 89       	ldd	r24, Y+16	; 0x10
     8fc:	99 89       	ldd	r25, Y+17	; 0x11
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	82 0f       	add	r24, r18
     902:	93 1f       	adc	r25, r19
     904:	9a 83       	std	Y+2, r25	; 0x02
     906:	89 83       	std	Y+1, r24	; 0x01
         * archContextSwitch() call when this thread gets scheduled in the
         * first time will then restore the program counter to the thread
         * entry point, and any other necessary register values ready for
         * it to start running.
         */
        archThreadContextInit (tcb_ptr, stack_top, entry_point, entry_param);
     908:	8d 81       	ldd	r24, Y+5	; 0x05
     90a:	9e 81       	ldd	r25, Y+6	; 0x06
     90c:	49 81       	ldd	r20, Y+1	; 0x01
     90e:	5a 81       	ldd	r21, Y+2	; 0x02
     910:	e8 85       	ldd	r30, Y+8	; 0x08
     912:	f9 85       	ldd	r31, Y+9	; 0x09
     914:	0a 85       	ldd	r16, Y+10	; 0x0a
     916:	1b 85       	ldd	r17, Y+11	; 0x0b
     918:	2c 85       	ldd	r18, Y+12	; 0x0c
     91a:	3d 85       	ldd	r19, Y+13	; 0x0d
     91c:	ba 01       	movw	r22, r20
     91e:	af 01       	movw	r20, r30
     920:	0e 94 1f 01 	call	0x23e	; 0x23e <archThreadContextInit>

        /* Protect access to the OS queue */
        CRITICAL_START ();
     924:	ef e5       	ldi	r30, 0x5F	; 95
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	8c 83       	std	Y+4, r24	; 0x04
     92c:	f8 94       	cli

        /* Put this thread on the ready queue */
        if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) != ATOM_OK)
     92e:	83 e5       	ldi	r24, 0x53	; 83
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	2d 81       	ldd	r18, Y+5	; 0x05
     934:	3e 81       	ldd	r19, Y+6	; 0x06
     936:	b9 01       	movw	r22, r18
     938:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>
     93c:	88 23       	and	r24, r24
     93e:	39 f0       	breq	.+14     	; 0x94e <__stack+0x4f>
        {
            /* Exit critical region */
            CRITICAL_END ();
     940:	ef e5       	ldi	r30, 0x5F	; 95
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	8c 81       	ldd	r24, Y+4	; 0x04
     946:	80 83       	st	Z, r24

            /* Queue-related error */
            status = ATOM_ERR_QUEUE;
     948:	8c ec       	ldi	r24, 0xCC	; 204
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	10 c0       	rjmp	.+32     	; 0x96e <__stack+0x6f>
        }
        else
        {
            /* Exit critical region */
            CRITICAL_END ();
     94e:	ef e5       	ldi	r30, 0x5F	; 95
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	8c 81       	ldd	r24, Y+4	; 0x04
     954:	80 83       	st	Z, r24

            /**
             * If the OS is started and we're in thread context, check if we
             * should be scheduled in now.
             */
            if ((atomOSStarted == TRUE) && atomCurrentContext())
     956:	80 91 55 01 	lds	r24, 0x0155
     95a:	81 30       	cpi	r24, 0x01	; 1
     95c:	39 f4       	brne	.+14     	; 0x96c <__stack+0x6d>
     95e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <atomCurrentContext>
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	19 f0       	breq	.+6      	; 0x96c <__stack+0x6d>
                atomSched (FALSE);
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	0e 94 6f 03 	call	0x6de	; 0x6de <atomSched>

            /* Success */
            status = ATOM_OK;
     96c:	1b 82       	std	Y+3, r1	; 0x03
        }
    }

    return (status);
     96e:	8b 81       	ldd	r24, Y+3	; 0x03
}
     970:	64 96       	adiw	r28, 0x14	; 20
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	cf 91       	pop	r28
     97e:	df 91       	pop	r29
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	bf 90       	pop	r11
     98e:	af 90       	pop	r10
     990:	8f 90       	pop	r8
     992:	08 95       	ret

00000994 <atomIntEnter>:
 * call an OS primitive and make a thread ready.
 *
 * @return None
 */
void atomIntEnter (void)
{
     994:	df 93       	push	r29
     996:	cf 93       	push	r28
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
    /* Increment the interrupt count */
    atomIntCnt++;
     99c:	80 91 58 01 	lds	r24, 0x0158
     9a0:	90 91 59 01 	lds	r25, 0x0159
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	90 93 59 01 	sts	0x0159, r25
     9aa:	80 93 58 01 	sts	0x0158, r24
}
     9ae:	cf 91       	pop	r28
     9b0:	df 91       	pop	r29
     9b2:	08 95       	ret

000009b4 <atomIntExit>:
 * @param timer_tick TRUE if this is a timer tick
 *
 * @return None
 */
void atomIntExit (uint8_t timer_tick)
{
     9b4:	df 93       	push	r29
     9b6:	cf 93       	push	r28
     9b8:	0f 92       	push	r0
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	89 83       	std	Y+1, r24	; 0x01
    /* Decrement the interrupt count */
    atomIntCnt--;
     9c0:	80 91 58 01 	lds	r24, 0x0158
     9c4:	90 91 59 01 	lds	r25, 0x0159
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	90 93 59 01 	sts	0x0159, r25
     9ce:	80 93 58 01 	sts	0x0158, r24

    /* Call the scheduler */
    atomSched (timer_tick);
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	0e 94 6f 03 	call	0x6de	; 0x6de <atomSched>
}
     9d8:	0f 90       	pop	r0
     9da:	cf 91       	pop	r28
     9dc:	df 91       	pop	r29
     9de:	08 95       	ret

000009e0 <atomCurrentContext>:
 * thread-context (in interrupt context).
 *
 * @retval Pointer to current thread's TCB, NULL if in interrupt context
 */
ATOM_TCB *atomCurrentContext (void)
{
     9e0:	df 93       	push	r29
     9e2:	cf 93       	push	r28
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <atomCurrentContext+0x6>
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
    /* Return the current thread's TCB or NULL if in interrupt context */
    if (atomIntCnt == 0)
     9ea:	80 91 58 01 	lds	r24, 0x0158
     9ee:	90 91 59 01 	lds	r25, 0x0159
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	39 f4       	brne	.+14     	; 0xa04 <atomCurrentContext+0x24>
        return (curr_tcb);
     9f6:	80 91 56 01 	lds	r24, 0x0156
     9fa:	90 91 57 01 	lds	r25, 0x0157
     9fe:	9a 83       	std	Y+2, r25	; 0x02
     a00:	89 83       	std	Y+1, r24	; 0x01
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <atomCurrentContext+0x28>
    else
        return (NULL);
     a04:	1a 82       	std	Y+2, r1	; 0x02
     a06:	19 82       	std	Y+1, r1	; 0x01
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	cf 91       	pop	r28
     a12:	df 91       	pop	r29
     a14:	08 95       	ret

00000a16 <atomOSInit>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERROR Initialisation error
 */
uint8_t atomOSInit (void *idle_thread_stack_bottom, uint32_t idle_thread_stack_size, uint8_t idle_thread_stack_check)
{
     a16:	8f 92       	push	r8
     a18:	af 92       	push	r10
     a1a:	bf 92       	push	r11
     a1c:	cf 92       	push	r12
     a1e:	df 92       	push	r13
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	df 93       	push	r29
     a2a:	cf 93       	push	r28
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62
     a30:	28 97       	sbiw	r28, 0x08	; 8
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	f8 94       	cli
     a36:	de bf       	out	0x3e, r29	; 62
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	cd bf       	out	0x3d, r28	; 61
     a3c:	9b 83       	std	Y+3, r25	; 0x03
     a3e:	8a 83       	std	Y+2, r24	; 0x02
     a40:	4c 83       	std	Y+4, r20	; 0x04
     a42:	5d 83       	std	Y+5, r21	; 0x05
     a44:	6e 83       	std	Y+6, r22	; 0x06
     a46:	7f 83       	std	Y+7, r23	; 0x07
     a48:	28 87       	std	Y+8, r18	; 0x08
    uint8_t status;

    /* Initialise data */
    curr_tcb = NULL;
     a4a:	10 92 57 01 	sts	0x0157, r1
     a4e:	10 92 56 01 	sts	0x0156, r1
    tcbReadyQ = NULL;
     a52:	10 92 54 01 	sts	0x0154, r1
     a56:	10 92 53 01 	sts	0x0153, r1
    atomOSStarted = FALSE;
     a5a:	10 92 55 01 	sts	0x0155, r1

    /* Create the idle thread */
    status = atomThreadCreate(&idle_tcb,
     a5e:	8a e5       	ldi	r24, 0x5A	; 90
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	29 e7       	ldi	r18, 0x79	; 121
     a64:	35 e0       	ldi	r19, 0x05	; 5
     a66:	ea 81       	ldd	r30, Y+2	; 0x02
     a68:	fb 81       	ldd	r31, Y+3	; 0x03
     a6a:	ac 80       	ldd	r10, Y+4	; 0x04
     a6c:	bd 80       	ldd	r11, Y+5	; 0x05
     a6e:	ce 80       	ldd	r12, Y+6	; 0x06
     a70:	df 80       	ldd	r13, Y+7	; 0x07
     a72:	6f ef       	ldi	r22, 0xFF	; 255
     a74:	a9 01       	movw	r20, r18
     a76:	00 e0       	ldi	r16, 0x00	; 0
     a78:	10 e0       	ldi	r17, 0x00	; 0
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	7f 01       	movw	r14, r30
     a80:	88 84       	ldd	r8, Y+8	; 0x08
     a82:	0e 94 1b 04 	call	0x836	; 0x836 <atomThreadCreate>
     a86:	89 83       	std	Y+1, r24	; 0x01
                 idle_thread_stack_bottom,
                 idle_thread_stack_size,
				 idle_thread_stack_check);

    /* Return status */
    return (status);
     a88:	89 81       	ldd	r24, Y+1	; 0x01

}
     a8a:	28 96       	adiw	r28, 0x08	; 8
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
     a96:	cf 91       	pop	r28
     a98:	df 91       	pop	r29
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	ef 90       	pop	r14
     aa2:	df 90       	pop	r13
     aa4:	cf 90       	pop	r12
     aa6:	bf 90       	pop	r11
     aa8:	af 90       	pop	r10
     aaa:	8f 90       	pop	r8
     aac:	08 95       	ret

00000aae <atomOSStart>:
 * archFirstThreadRestore() routine.
 *
 * @return None
 */
void atomOSStart (void)
{
     aae:	df 93       	push	r29
     ab0:	cf 93       	push	r28
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <atomOSStart+0x6>
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
    /**
     * Enable the OS started flag. This stops routines like atomThreadCreate()
     * attempting to schedule in a newly-created thread until the scheduler is
     * up and running.
     */
    atomOSStarted = TRUE;
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	80 93 55 01 	sts	0x0155, r24
     * thread to the ready queue. Take the highest priority one off and
     * schedule it in. If no threads were created, the OS will simply start
     * the idle thread (the lowest priority allowed to be scheduled is the
     * idle thread's priority, 255).
     */
    new_tcb = tcbDequeuePriority (&tcbReadyQ, 255);
     abe:	83 e5       	ldi	r24, 0x53	; 83
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	6f ef       	ldi	r22, 0xFF	; 255
     ac4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <tcbDequeuePriority>
     ac8:	9a 83       	std	Y+2, r25	; 0x02
     aca:	89 83       	std	Y+1, r24	; 0x01
    if (new_tcb)
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	9a 81       	ldd	r25, Y+2	; 0x02
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	51 f0       	breq	.+20     	; 0xae8 <atomOSStart+0x3a>
    {
        /* Set the new currently-running thread pointer */
        curr_tcb = new_tcb;
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	9a 81       	ldd	r25, Y+2	; 0x02
     ad8:	90 93 57 01 	sts	0x0157, r25
     adc:	80 93 56 01 	sts	0x0156, r24

        /* Restore and run the first thread */
        archFirstThreadRestore (new_tcb);
     ae0:	89 81       	ldd	r24, Y+1	; 0x01
     ae2:	9a 81       	ldd	r25, Y+2	; 0x02
     ae4:	0e 94 84 00 	call	0x108	; 0x108 <archFirstThreadRestore>
    else
    {
        /* No ready threads were found. atomOSInit() probably was not called */
    }

}
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	cf 91       	pop	r28
     aee:	df 91       	pop	r29
     af0:	08 95       	ret

00000af2 <atomIdleThread>:
 * @param[in] param Unused (optional thread entry parameter)
 *
 * @return None
 */
static void atomIdleThread (uint32_t param)
{
     af2:	df 93       	push	r29
     af4:	cf 93       	push	r28
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <atomIdleThread+0x6>
     af8:	00 d0       	rcall	.+0      	; 0xafa <atomIdleThread+0x8>
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	69 83       	std	Y+1, r22	; 0x01
     b00:	7a 83       	std	Y+2, r23	; 0x02
     b02:	8b 83       	std	Y+3, r24	; 0x03
     b04:	9c 83       	std	Y+4, r25	; 0x04
     b06:	ff cf       	rjmp	.-2      	; 0xb06 <atomIdleThread+0x14>

00000b08 <tcbEnqueuePriority>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 */
uint8_t tcbEnqueuePriority (ATOM_TCB **tcb_queue_ptr, ATOM_TCB *tcb_ptr)
{
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	29 97       	sbiw	r28, 0x09	; 9
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	9f 83       	std	Y+7, r25	; 0x07
     b1e:	8e 83       	std	Y+6, r24	; 0x06
     b20:	79 87       	std	Y+9, r23	; 0x09
     b22:	68 87       	std	Y+8, r22	; 0x08
    uint8_t status;
    ATOM_TCB *prev_ptr, *next_ptr;

    /* Parameter check */
    if ((tcb_queue_ptr == NULL) || (tcb_ptr == NULL))
     b24:	8e 81       	ldd	r24, Y+6	; 0x06
     b26:	9f 81       	ldd	r25, Y+7	; 0x07
     b28:	00 97       	sbiw	r24, 0x00	; 0
     b2a:	21 f0       	breq	.+8      	; 0xb34 <tcbEnqueuePriority+0x2c>
     b2c:	88 85       	ldd	r24, Y+8	; 0x08
     b2e:	99 85       	ldd	r25, Y+9	; 0x09
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	19 f4       	brne	.+6      	; 0xb3a <tcbEnqueuePriority+0x32>
    {
        /* Return error */
        status = ATOM_ERR_PARAM;
     b34:	89 ec       	ldi	r24, 0xC9	; 201
     b36:	8d 83       	std	Y+5, r24	; 0x05
     b38:	68 c0       	rjmp	.+208    	; 0xc0a <tcbEnqueuePriority+0x102>
    }
    else
    {
        /* Walk the list and enqueue at the end of the TCBs at this priority */
        prev_ptr = next_ptr = *tcb_queue_ptr;
     b3a:	ee 81       	ldd	r30, Y+6	; 0x06
     b3c:	ff 81       	ldd	r31, Y+7	; 0x07
     b3e:	80 81       	ld	r24, Z
     b40:	91 81       	ldd	r25, Z+1	; 0x01
     b42:	9a 83       	std	Y+2, r25	; 0x02
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
     b4a:	9c 83       	std	Y+4, r25	; 0x04
     b4c:	8b 83       	std	Y+3, r24	; 0x03
        {
            /* Insert if:
             *   next_ptr = NULL (we're at the head of an empty queue or at the tail)
             *   the next TCB in the list is lower priority than the one we're enqueuing.
             */
            if ((next_ptr == NULL) || (next_ptr->priority > tcb_ptr->priority))
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	9a 81       	ldd	r25, Y+2	; 0x02
     b52:	00 97       	sbiw	r24, 0x00	; 0
     b54:	49 f0       	breq	.+18     	; 0xb68 <tcbEnqueuePriority+0x60>
     b56:	e9 81       	ldd	r30, Y+1	; 0x01
     b58:	fa 81       	ldd	r31, Y+2	; 0x02
     b5a:	92 81       	ldd	r25, Z+2	; 0x02
     b5c:	e8 85       	ldd	r30, Y+8	; 0x08
     b5e:	f9 85       	ldd	r31, Y+9	; 0x09
     b60:	82 81       	ldd	r24, Z+2	; 0x02
     b62:	89 17       	cp	r24, r25
     b64:	08 f0       	brcs	.+2      	; 0xb68 <tcbEnqueuePriority+0x60>
     b66:	41 c0       	rjmp	.+130    	; 0xbea <tcbEnqueuePriority+0xe2>
            {
                /* Make this TCB the new listhead */
                if (next_ptr == *tcb_queue_ptr)
     b68:	ee 81       	ldd	r30, Y+6	; 0x06
     b6a:	ff 81       	ldd	r31, Y+7	; 0x07
     b6c:	20 81       	ld	r18, Z
     b6e:	31 81       	ldd	r19, Z+1	; 0x01
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	9a 81       	ldd	r25, Y+2	; 0x02
     b74:	28 17       	cp	r18, r24
     b76:	39 07       	cpc	r19, r25
     b78:	d9 f4       	brne	.+54     	; 0xbb0 <tcbEnqueuePriority+0xa8>
                {
                    *tcb_queue_ptr = tcb_ptr;
     b7a:	ee 81       	ldd	r30, Y+6	; 0x06
     b7c:	ff 81       	ldd	r31, Y+7	; 0x07
     b7e:	88 85       	ldd	r24, Y+8	; 0x08
     b80:	99 85       	ldd	r25, Y+9	; 0x09
     b82:	91 83       	std	Z+1, r25	; 0x01
     b84:	80 83       	st	Z, r24
                    tcb_ptr->prev_tcb = NULL;
     b86:	e8 85       	ldd	r30, Y+8	; 0x08
     b88:	f9 85       	ldd	r31, Y+9	; 0x09
     b8a:	12 86       	std	Z+10, r1	; 0x0a
     b8c:	11 86       	std	Z+9, r1	; 0x09
                    tcb_ptr->next_tcb = next_ptr;
     b8e:	e8 85       	ldd	r30, Y+8	; 0x08
     b90:	f9 85       	ldd	r31, Y+9	; 0x09
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	9a 81       	ldd	r25, Y+2	; 0x02
     b96:	94 87       	std	Z+12, r25	; 0x0c
     b98:	83 87       	std	Z+11, r24	; 0x0b
                    if (next_ptr)
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	9a 81       	ldd	r25, Y+2	; 0x02
     b9e:	00 97       	sbiw	r24, 0x00	; 0
     ba0:	99 f1       	breq	.+102    	; 0xc08 <tcbEnqueuePriority+0x100>
                        next_ptr->prev_tcb = tcb_ptr;
     ba2:	e9 81       	ldd	r30, Y+1	; 0x01
     ba4:	fa 81       	ldd	r31, Y+2	; 0x02
     ba6:	88 85       	ldd	r24, Y+8	; 0x08
     ba8:	99 85       	ldd	r25, Y+9	; 0x09
     baa:	92 87       	std	Z+10, r25	; 0x0a
     bac:	81 87       	std	Z+9, r24	; 0x09
     bae:	2c c0       	rjmp	.+88     	; 0xc08 <tcbEnqueuePriority+0x100>
                }
                /* Insert between two TCBs or at the tail */
                else
                {
                    tcb_ptr->prev_tcb = prev_ptr;
     bb0:	e8 85       	ldd	r30, Y+8	; 0x08
     bb2:	f9 85       	ldd	r31, Y+9	; 0x09
     bb4:	8b 81       	ldd	r24, Y+3	; 0x03
     bb6:	9c 81       	ldd	r25, Y+4	; 0x04
     bb8:	92 87       	std	Z+10, r25	; 0x0a
     bba:	81 87       	std	Z+9, r24	; 0x09
                    tcb_ptr->next_tcb = next_ptr;
     bbc:	e8 85       	ldd	r30, Y+8	; 0x08
     bbe:	f9 85       	ldd	r31, Y+9	; 0x09
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	9a 81       	ldd	r25, Y+2	; 0x02
     bc4:	94 87       	std	Z+12, r25	; 0x0c
     bc6:	83 87       	std	Z+11, r24	; 0x0b
                    prev_ptr->next_tcb = tcb_ptr;
     bc8:	eb 81       	ldd	r30, Y+3	; 0x03
     bca:	fc 81       	ldd	r31, Y+4	; 0x04
     bcc:	88 85       	ldd	r24, Y+8	; 0x08
     bce:	99 85       	ldd	r25, Y+9	; 0x09
     bd0:	94 87       	std	Z+12, r25	; 0x0c
     bd2:	83 87       	std	Z+11, r24	; 0x0b
                    if (next_ptr)
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	9a 81       	ldd	r25, Y+2	; 0x02
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	b1 f0       	breq	.+44     	; 0xc08 <tcbEnqueuePriority+0x100>
                        next_ptr->prev_tcb = tcb_ptr;
     bdc:	e9 81       	ldd	r30, Y+1	; 0x01
     bde:	fa 81       	ldd	r31, Y+2	; 0x02
     be0:	88 85       	ldd	r24, Y+8	; 0x08
     be2:	99 85       	ldd	r25, Y+9	; 0x09
     be4:	92 87       	std	Z+10, r25	; 0x0a
     be6:	81 87       	std	Z+9, r24	; 0x09
     be8:	0f c0       	rjmp	.+30     	; 0xc08 <tcbEnqueuePriority+0x100>
                break;
            }
            else
            {
                /* Not inserting here, try the next one */
                prev_ptr = next_ptr;
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	9a 81       	ldd	r25, Y+2	; 0x02
     bee:	9c 83       	std	Y+4, r25	; 0x04
     bf0:	8b 83       	std	Y+3, r24	; 0x03
                next_ptr = next_ptr->next_tcb;
     bf2:	e9 81       	ldd	r30, Y+1	; 0x01
     bf4:	fa 81       	ldd	r31, Y+2	; 0x02
     bf6:	83 85       	ldd	r24, Z+11	; 0x0b
     bf8:	94 85       	ldd	r25, Z+12	; 0x0c
     bfa:	9a 83       	std	Y+2, r25	; 0x02
     bfc:	89 83       	std	Y+1, r24	; 0x01
            }

        }
        while (prev_ptr != NULL);
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	09 f0       	breq	.+2      	; 0xc08 <tcbEnqueuePriority+0x100>
     c06:	a3 cf       	rjmp	.-186    	; 0xb4e <tcbEnqueuePriority+0x46>

        /* Successful */
        status = ATOM_OK;
     c08:	1d 82       	std	Y+5, r1	; 0x05
    }

    return (status);
     c0a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c0c:	29 96       	adiw	r28, 0x09	; 9
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <tcbDequeueHead>:
 * @param[in,out] tcb_queue_ptr Pointer to TCB queue head pointer
 *
 * @return Pointer to highest priority TCB on queue, or NULL if queue empty
 */
ATOM_TCB *tcbDequeueHead (ATOM_TCB **tcb_queue_ptr)
{
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	00 d0       	rcall	.+0      	; 0xc24 <tcbDequeueHead+0x6>
     c24:	00 d0       	rcall	.+0      	; 0xc26 <tcbDequeueHead+0x8>
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	9c 83       	std	Y+4, r25	; 0x04
     c2c:	8b 83       	std	Y+3, r24	; 0x03
    ATOM_TCB *ret_ptr;

    /* Parameter check */
    if (tcb_queue_ptr == NULL)
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	9c 81       	ldd	r25, Y+4	; 0x04
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	19 f4       	brne	.+6      	; 0xc3c <tcbDequeueHead+0x1e>
    {
        /* Return NULL */
        ret_ptr = NULL;
     c36:	1a 82       	std	Y+2, r1	; 0x02
     c38:	19 82       	std	Y+1, r1	; 0x01
     c3a:	30 c0       	rjmp	.+96     	; 0xc9c <tcbDequeueHead+0x7e>
    }
    /* Check for an empty queue */
    else if (*tcb_queue_ptr == NULL)
     c3c:	eb 81       	ldd	r30, Y+3	; 0x03
     c3e:	fc 81       	ldd	r31, Y+4	; 0x04
     c40:	80 81       	ld	r24, Z
     c42:	91 81       	ldd	r25, Z+1	; 0x01
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	19 f4       	brne	.+6      	; 0xc4e <tcbDequeueHead+0x30>
    {
        /* Return NULL */
        ret_ptr = NULL;
     c48:	1a 82       	std	Y+2, r1	; 0x02
     c4a:	19 82       	std	Y+1, r1	; 0x01
     c4c:	27 c0       	rjmp	.+78     	; 0xc9c <tcbDequeueHead+0x7e>
    }
    /* Remove and return the listhead */
    else
    {
        ret_ptr = *tcb_queue_ptr;
     c4e:	eb 81       	ldd	r30, Y+3	; 0x03
     c50:	fc 81       	ldd	r31, Y+4	; 0x04
     c52:	80 81       	ld	r24, Z
     c54:	91 81       	ldd	r25, Z+1	; 0x01
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
        *tcb_queue_ptr = ret_ptr->next_tcb;
     c5a:	e9 81       	ldd	r30, Y+1	; 0x01
     c5c:	fa 81       	ldd	r31, Y+2	; 0x02
     c5e:	83 85       	ldd	r24, Z+11	; 0x0b
     c60:	94 85       	ldd	r25, Z+12	; 0x0c
     c62:	eb 81       	ldd	r30, Y+3	; 0x03
     c64:	fc 81       	ldd	r31, Y+4	; 0x04
     c66:	91 83       	std	Z+1, r25	; 0x01
     c68:	80 83       	st	Z, r24
        if (*tcb_queue_ptr)
     c6a:	eb 81       	ldd	r30, Y+3	; 0x03
     c6c:	fc 81       	ldd	r31, Y+4	; 0x04
     c6e:	80 81       	ld	r24, Z
     c70:	91 81       	ldd	r25, Z+1	; 0x01
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	39 f0       	breq	.+14     	; 0xc84 <tcbDequeueHead+0x66>
            (*tcb_queue_ptr)->prev_tcb = NULL;
     c76:	eb 81       	ldd	r30, Y+3	; 0x03
     c78:	fc 81       	ldd	r31, Y+4	; 0x04
     c7a:	01 90       	ld	r0, Z+
     c7c:	f0 81       	ld	r31, Z
     c7e:	e0 2d       	mov	r30, r0
     c80:	12 86       	std	Z+10, r1	; 0x0a
     c82:	11 86       	std	Z+9, r1	; 0x09
        ret_ptr->next_tcb = ret_ptr->prev_tcb = NULL;
     c84:	e9 81       	ldd	r30, Y+1	; 0x01
     c86:	fa 81       	ldd	r31, Y+2	; 0x02
     c88:	12 86       	std	Z+10, r1	; 0x0a
     c8a:	11 86       	std	Z+9, r1	; 0x09
     c8c:	e9 81       	ldd	r30, Y+1	; 0x01
     c8e:	fa 81       	ldd	r31, Y+2	; 0x02
     c90:	81 85       	ldd	r24, Z+9	; 0x09
     c92:	92 85       	ldd	r25, Z+10	; 0x0a
     c94:	e9 81       	ldd	r30, Y+1	; 0x01
     c96:	fa 81       	ldd	r31, Y+2	; 0x02
     c98:	94 87       	std	Z+12, r25	; 0x0c
     c9a:	83 87       	std	Z+11, r24	; 0x0b
    }

    return (ret_ptr);
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <tcbDequeueEntry>:
 * @param[in] tcb_ptr Pointer to TCB to dequeue
 *
 * @return Pointer to the dequeued TCB, or NULL if entry wasn't found
 */
ATOM_TCB *tcbDequeueEntry (ATOM_TCB **tcb_queue_ptr, ATOM_TCB *tcb_ptr)
{
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	2a 97       	sbiw	r28, 0x0a	; 10
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	cd bf       	out	0x3d, r28	; 61
     cc2:	98 87       	std	Y+8, r25	; 0x08
     cc4:	8f 83       	std	Y+7, r24	; 0x07
     cc6:	7a 87       	std	Y+10, r23	; 0x0a
     cc8:	69 87       	std	Y+9, r22	; 0x09
    ATOM_TCB *ret_ptr, *prev_ptr, *next_ptr;

    /* Parameter check */
    if (tcb_queue_ptr == NULL)
     cca:	8f 81       	ldd	r24, Y+7	; 0x07
     ccc:	98 85       	ldd	r25, Y+8	; 0x08
     cce:	00 97       	sbiw	r24, 0x00	; 0
     cd0:	19 f4       	brne	.+6      	; 0xcd8 <tcbDequeueEntry+0x2a>
    {
        /* Return NULL */
        ret_ptr = NULL;
     cd2:	1e 82       	std	Y+6, r1	; 0x06
     cd4:	1d 82       	std	Y+5, r1	; 0x05
     cd6:	74 c0       	rjmp	.+232    	; 0xdc0 <tcbDequeueEntry+0x112>
    }
    /* Check for an empty queue */
    else if (*tcb_queue_ptr == NULL)
     cd8:	ef 81       	ldd	r30, Y+7	; 0x07
     cda:	f8 85       	ldd	r31, Y+8	; 0x08
     cdc:	80 81       	ld	r24, Z
     cde:	91 81       	ldd	r25, Z+1	; 0x01
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	19 f4       	brne	.+6      	; 0xcea <tcbDequeueEntry+0x3c>
    {
        /* Return NULL */
        ret_ptr = NULL;
     ce4:	1e 82       	std	Y+6, r1	; 0x06
     ce6:	1d 82       	std	Y+5, r1	; 0x05
     ce8:	6b c0       	rjmp	.+214    	; 0xdc0 <tcbDequeueEntry+0x112>
    }
    /* Find and remove/return the specified entry */
    else
    {
        ret_ptr = NULL;
     cea:	1e 82       	std	Y+6, r1	; 0x06
     cec:	1d 82       	std	Y+5, r1	; 0x05
        prev_ptr = next_ptr = *tcb_queue_ptr;
     cee:	ef 81       	ldd	r30, Y+7	; 0x07
     cf0:	f8 85       	ldd	r31, Y+8	; 0x08
     cf2:	80 81       	ld	r24, Z
     cf4:	91 81       	ldd	r25, Z+1	; 0x01
     cf6:	9a 83       	std	Y+2, r25	; 0x02
     cf8:	89 83       	std	Y+1, r24	; 0x01
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	9a 81       	ldd	r25, Y+2	; 0x02
     cfe:	9c 83       	std	Y+4, r25	; 0x04
     d00:	8b 83       	std	Y+3, r24	; 0x03
     d02:	59 c0       	rjmp	.+178    	; 0xdb6 <tcbDequeueEntry+0x108>
        while (next_ptr)
        {
            /* Is this entry the one we're looking for? */
            if (next_ptr == tcb_ptr)
     d04:	29 81       	ldd	r18, Y+1	; 0x01
     d06:	3a 81       	ldd	r19, Y+2	; 0x02
     d08:	89 85       	ldd	r24, Y+9	; 0x09
     d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0c:	28 17       	cp	r18, r24
     d0e:	39 07       	cpc	r19, r25
     d10:	09 f0       	breq	.+2      	; 0xd14 <tcbDequeueEntry+0x66>
     d12:	47 c0       	rjmp	.+142    	; 0xda2 <tcbDequeueEntry+0xf4>
            {
                if (next_ptr == *tcb_queue_ptr)
     d14:	ef 81       	ldd	r30, Y+7	; 0x07
     d16:	f8 85       	ldd	r31, Y+8	; 0x08
     d18:	20 81       	ld	r18, Z
     d1a:	31 81       	ldd	r19, Z+1	; 0x01
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	b1 f4       	brne	.+44     	; 0xd52 <tcbDequeueEntry+0xa4>
                {
                    /* We're removing the list head */
                    *tcb_queue_ptr = next_ptr->next_tcb;
     d26:	e9 81       	ldd	r30, Y+1	; 0x01
     d28:	fa 81       	ldd	r31, Y+2	; 0x02
     d2a:	83 85       	ldd	r24, Z+11	; 0x0b
     d2c:	94 85       	ldd	r25, Z+12	; 0x0c
     d2e:	ef 81       	ldd	r30, Y+7	; 0x07
     d30:	f8 85       	ldd	r31, Y+8	; 0x08
     d32:	91 83       	std	Z+1, r25	; 0x01
     d34:	80 83       	st	Z, r24
                    if (*tcb_queue_ptr)
     d36:	ef 81       	ldd	r30, Y+7	; 0x07
     d38:	f8 85       	ldd	r31, Y+8	; 0x08
     d3a:	80 81       	ld	r24, Z
     d3c:	91 81       	ldd	r25, Z+1	; 0x01
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	f9 f0       	breq	.+62     	; 0xd80 <tcbDequeueEntry+0xd2>
                        (*tcb_queue_ptr)->prev_tcb = NULL;
     d42:	ef 81       	ldd	r30, Y+7	; 0x07
     d44:	f8 85       	ldd	r31, Y+8	; 0x08
     d46:	01 90       	ld	r0, Z+
     d48:	f0 81       	ld	r31, Z
     d4a:	e0 2d       	mov	r30, r0
     d4c:	12 86       	std	Z+10, r1	; 0x0a
     d4e:	11 86       	std	Z+9, r1	; 0x09
     d50:	17 c0       	rjmp	.+46     	; 0xd80 <tcbDequeueEntry+0xd2>
                }
                else
                {
                    /* We're removing a mid or tail TCB */
                    prev_ptr->next_tcb = next_ptr->next_tcb;
     d52:	e9 81       	ldd	r30, Y+1	; 0x01
     d54:	fa 81       	ldd	r31, Y+2	; 0x02
     d56:	83 85       	ldd	r24, Z+11	; 0x0b
     d58:	94 85       	ldd	r25, Z+12	; 0x0c
     d5a:	eb 81       	ldd	r30, Y+3	; 0x03
     d5c:	fc 81       	ldd	r31, Y+4	; 0x04
     d5e:	94 87       	std	Z+12, r25	; 0x0c
     d60:	83 87       	std	Z+11, r24	; 0x0b
                    if (next_ptr->next_tcb)
     d62:	e9 81       	ldd	r30, Y+1	; 0x01
     d64:	fa 81       	ldd	r31, Y+2	; 0x02
     d66:	83 85       	ldd	r24, Z+11	; 0x0b
     d68:	94 85       	ldd	r25, Z+12	; 0x0c
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	49 f0       	breq	.+18     	; 0xd80 <tcbDequeueEntry+0xd2>
                        next_ptr->next_tcb->prev_tcb = prev_ptr;
     d6e:	e9 81       	ldd	r30, Y+1	; 0x01
     d70:	fa 81       	ldd	r31, Y+2	; 0x02
     d72:	03 84       	ldd	r0, Z+11	; 0x0b
     d74:	f4 85       	ldd	r31, Z+12	; 0x0c
     d76:	e0 2d       	mov	r30, r0
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	9c 81       	ldd	r25, Y+4	; 0x04
     d7c:	92 87       	std	Z+10, r25	; 0x0a
     d7e:	81 87       	std	Z+9, r24	; 0x09
                }
                ret_ptr = next_ptr;
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	9e 83       	std	Y+6, r25	; 0x06
     d86:	8d 83       	std	Y+5, r24	; 0x05
                ret_ptr->prev_tcb = ret_ptr->next_tcb = NULL;
     d88:	ed 81       	ldd	r30, Y+5	; 0x05
     d8a:	fe 81       	ldd	r31, Y+6	; 0x06
     d8c:	14 86       	std	Z+12, r1	; 0x0c
     d8e:	13 86       	std	Z+11, r1	; 0x0b
     d90:	ed 81       	ldd	r30, Y+5	; 0x05
     d92:	fe 81       	ldd	r31, Y+6	; 0x06
     d94:	83 85       	ldd	r24, Z+11	; 0x0b
     d96:	94 85       	ldd	r25, Z+12	; 0x0c
     d98:	ed 81       	ldd	r30, Y+5	; 0x05
     d9a:	fe 81       	ldd	r31, Y+6	; 0x06
     d9c:	92 87       	std	Z+10, r25	; 0x0a
     d9e:	81 87       	std	Z+9, r24	; 0x09
     da0:	0f c0       	rjmp	.+30     	; 0xdc0 <tcbDequeueEntry+0x112>
                break;
            }

            /* Move on to the next in the list */
            prev_ptr = next_ptr;
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	9c 83       	std	Y+4, r25	; 0x04
     da8:	8b 83       	std	Y+3, r24	; 0x03
            next_ptr = next_ptr->next_tcb;
     daa:	e9 81       	ldd	r30, Y+1	; 0x01
     dac:	fa 81       	ldd	r31, Y+2	; 0x02
     dae:	83 85       	ldd	r24, Z+11	; 0x0b
     db0:	94 85       	ldd	r25, Z+12	; 0x0c
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
    /* Find and remove/return the specified entry */
    else
    {
        ret_ptr = NULL;
        prev_ptr = next_ptr = *tcb_queue_ptr;
        while (next_ptr)
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <tcbDequeueEntry+0x112>
     dbe:	a2 cf       	rjmp	.-188    	; 0xd04 <tcbDequeueEntry+0x56>
            prev_ptr = next_ptr;
            next_ptr = next_ptr->next_tcb;
        }
    }

    return (ret_ptr);
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
     dc2:	9e 81       	ldd	r25, Y+6	; 0x06
}
     dc4:	2a 96       	adiw	r28, 0x0a	; 10
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <tcbDequeuePriority>:
 * @param[in] priority Minimum priority to qualify for dequeue
 *
 * @return Pointer to the dequeued TCB, or NULL if none found within priority
 */
ATOM_TCB *tcbDequeuePriority (ATOM_TCB **tcb_queue_ptr, uint8_t priority)
{
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	00 d0       	rcall	.+0      	; 0xddc <tcbDequeuePriority+0x6>
     ddc:	00 d0       	rcall	.+0      	; 0xdde <tcbDequeuePriority+0x8>
     dde:	0f 92       	push	r0
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	9c 83       	std	Y+4, r25	; 0x04
     de6:	8b 83       	std	Y+3, r24	; 0x03
     de8:	6d 83       	std	Y+5, r22	; 0x05
    ATOM_TCB *ret_ptr;

    /* Parameter check */
    if (tcb_queue_ptr == NULL)
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	9c 81       	ldd	r25, Y+4	; 0x04
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	19 f4       	brne	.+6      	; 0xdf8 <tcbDequeuePriority+0x22>
    {
        /* Return NULL */
        ret_ptr = NULL;
     df2:	1a 82       	std	Y+2, r1	; 0x02
     df4:	19 82       	std	Y+1, r1	; 0x01
     df6:	37 c0       	rjmp	.+110    	; 0xe66 <tcbDequeuePriority+0x90>
    }
    /* Check for an empty queue */
    else if (*tcb_queue_ptr == NULL)
     df8:	eb 81       	ldd	r30, Y+3	; 0x03
     dfa:	fc 81       	ldd	r31, Y+4	; 0x04
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	19 f4       	brne	.+6      	; 0xe0a <tcbDequeuePriority+0x34>
    {
        /* Return NULL */
        ret_ptr = NULL;
     e04:	1a 82       	std	Y+2, r1	; 0x02
     e06:	19 82       	std	Y+1, r1	; 0x01
     e08:	2e c0       	rjmp	.+92     	; 0xe66 <tcbDequeuePriority+0x90>
    }
    /* Check if the list head priority is within our range */
    else if ((*tcb_queue_ptr)->priority <= priority)
     e0a:	eb 81       	ldd	r30, Y+3	; 0x03
     e0c:	fc 81       	ldd	r31, Y+4	; 0x04
     e0e:	01 90       	ld	r0, Z+
     e10:	f0 81       	ld	r31, Z
     e12:	e0 2d       	mov	r30, r0
     e14:	92 81       	ldd	r25, Z+2	; 0x02
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	89 17       	cp	r24, r25
     e1a:	18 f1       	brcs	.+70     	; 0xe62 <tcbDequeuePriority+0x8c>
    {
       /* Remove the list head */
        ret_ptr = *tcb_queue_ptr;
     e1c:	eb 81       	ldd	r30, Y+3	; 0x03
     e1e:	fc 81       	ldd	r31, Y+4	; 0x04
     e20:	80 81       	ld	r24, Z
     e22:	91 81       	ldd	r25, Z+1	; 0x01
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
        *tcb_queue_ptr = (*tcb_queue_ptr)->next_tcb;
     e28:	eb 81       	ldd	r30, Y+3	; 0x03
     e2a:	fc 81       	ldd	r31, Y+4	; 0x04
     e2c:	01 90       	ld	r0, Z+
     e2e:	f0 81       	ld	r31, Z
     e30:	e0 2d       	mov	r30, r0
     e32:	83 85       	ldd	r24, Z+11	; 0x0b
     e34:	94 85       	ldd	r25, Z+12	; 0x0c
     e36:	eb 81       	ldd	r30, Y+3	; 0x03
     e38:	fc 81       	ldd	r31, Y+4	; 0x04
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	80 83       	st	Z, r24
        if (*tcb_queue_ptr)
     e3e:	eb 81       	ldd	r30, Y+3	; 0x03
     e40:	fc 81       	ldd	r31, Y+4	; 0x04
     e42:	80 81       	ld	r24, Z
     e44:	91 81       	ldd	r25, Z+1	; 0x01
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	71 f0       	breq	.+28     	; 0xe66 <tcbDequeuePriority+0x90>
        {
            (*tcb_queue_ptr)->prev_tcb = NULL;
     e4a:	eb 81       	ldd	r30, Y+3	; 0x03
     e4c:	fc 81       	ldd	r31, Y+4	; 0x04
     e4e:	01 90       	ld	r0, Z+
     e50:	f0 81       	ld	r31, Z
     e52:	e0 2d       	mov	r30, r0
     e54:	12 86       	std	Z+10, r1	; 0x0a
     e56:	11 86       	std	Z+9, r1	; 0x09
            ret_ptr->next_tcb = NULL;
     e58:	e9 81       	ldd	r30, Y+1	; 0x01
     e5a:	fa 81       	ldd	r31, Y+2	; 0x02
     e5c:	14 86       	std	Z+12, r1	; 0x0c
     e5e:	13 86       	std	Z+11, r1	; 0x0b
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <tcbDequeuePriority+0x90>
        }
    }
    else
    {
        /* No higher priority ready threads found */
        ret_ptr = NULL;
     e62:	1a 82       	std	Y+2, r1	; 0x02
     e64:	19 82       	std	Y+1, r1	; 0x01
    }

    return (ret_ptr);
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <atomMutexCreate>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 */
uint8_t atomMutexCreate (ATOM_MUTEX *mutex)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <atomMutexCreate+0x6>
     e80:	0f 92       	push	r0
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	9b 83       	std	Y+3, r25	; 0x03
     e88:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t status;

    /* Parameter check */
    if (mutex == NULL)
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	9b 81       	ldd	r25, Y+3	; 0x03
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	19 f4       	brne	.+6      	; 0xe98 <atomMutexCreate+0x1e>
    {
        /* Bad mutex pointer */
        status = ATOM_ERR_PARAM;
     e92:	89 ec       	ldi	r24, 0xC9	; 201
     e94:	89 83       	std	Y+1, r24	; 0x01
     e96:	0c c0       	rjmp	.+24     	; 0xeb0 <atomMutexCreate+0x36>
    }
    else
    {
        /* Start with no owner (unlocked) */
        mutex->owner = NULL;
     e98:	ea 81       	ldd	r30, Y+2	; 0x02
     e9a:	fb 81       	ldd	r31, Y+3	; 0x03
     e9c:	13 82       	std	Z+3, r1	; 0x03
     e9e:	12 82       	std	Z+2, r1	; 0x02

        /* Reset the initial lock count */
        mutex->count = 0;
     ea0:	ea 81       	ldd	r30, Y+2	; 0x02
     ea2:	fb 81       	ldd	r31, Y+3	; 0x03
     ea4:	14 82       	std	Z+4, r1	; 0x04

        /* Initialise the suspended threads queue */
        mutex->suspQ = NULL;
     ea6:	ea 81       	ldd	r30, Y+2	; 0x02
     ea8:	fb 81       	ldd	r31, Y+3	; 0x03
     eaa:	11 82       	std	Z+1, r1	; 0x01
     eac:	10 82       	st	Z, r1

        /* Successful */
        status = ATOM_OK;
     eae:	19 82       	std	Y+1, r1	; 0x01
    }

    return (status);
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <atomMutexDelete>:
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_QUEUE Problem putting a woken thread on the ready queue
 * @retval ATOM_ERR_TIMER Problem cancelling a timeout on a woken thread
 */
uint8_t atomMutexDelete (ATOM_MUTEX *mutex)
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	27 97       	sbiw	r28, 0x07	; 7
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	9f 83       	std	Y+7, r25	; 0x07
     ed4:	8e 83       	std	Y+6, r24	; 0x06
    uint8_t status;
    CRITICAL_STORE;
    ATOM_TCB *tcb_ptr;
    uint8_t woken_threads = FALSE;
     ed6:	19 82       	std	Y+1, r1	; 0x01

    /* Parameter check */
    if (mutex == NULL)
     ed8:	8e 81       	ldd	r24, Y+6	; 0x06
     eda:	9f 81       	ldd	r25, Y+7	; 0x07
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	19 f4       	brne	.+6      	; 0xee6 <atomMutexDelete+0x28>
    {
        /* Bad mutex pointer */
        status = ATOM_ERR_PARAM;
     ee0:	89 ec       	ldi	r24, 0xC9	; 201
     ee2:	8d 83       	std	Y+5, r24	; 0x05
     ee4:	52 c0       	rjmp	.+164    	; 0xf8a <atomMutexDelete+0xcc>
    }
    else
    {
        /* Default to success status unless errors occur during wakeup */
        status = ATOM_OK;
     ee6:	1d 82       	std	Y+5, r1	; 0x05

        /* Wake up all suspended tasks */
        while (1)
        {
            /* Enter critical region */
            CRITICAL_START ();
     ee8:	ef e5       	ldi	r30, 0x5F	; 95
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8c 83       	std	Y+4, r24	; 0x04
     ef0:	f8 94       	cli

            /* Check if any threads are suspended */
            tcb_ptr = tcbDequeueHead (&mutex->suspQ);
     ef2:	8e 81       	ldd	r24, Y+6	; 0x06
     ef4:	9f 81       	ldd	r25, Y+7	; 0x07
     ef6:	0e 94 0f 06 	call	0xc1e	; 0xc1e <tcbDequeueHead>
     efa:	9b 83       	std	Y+3, r25	; 0x03
     efc:	8a 83       	std	Y+2, r24	; 0x02

            /* A thread is suspended on the mutex */
            if (tcb_ptr)
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	9b 81       	ldd	r25, Y+3	; 0x03
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	a1 f1       	breq	.+104    	; 0xf6e <atomMutexDelete+0xb0>
            {
                /* Return error status to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_ERR_DELETED;
     f06:	ea 81       	ldd	r30, Y+2	; 0x02
     f08:	fb 81       	ldd	r31, Y+3	; 0x03
     f0a:	8a ec       	ldi	r24, 0xCA	; 202
     f0c:	86 87       	std	Z+14, r24	; 0x0e

                /* Put the thread on the ready queue */
                if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) != ATOM_OK)
     f0e:	83 e5       	ldi	r24, 0x53	; 83
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	2a 81       	ldd	r18, Y+2	; 0x02
     f14:	3b 81       	ldd	r19, Y+3	; 0x03
     f16:	b9 01       	movw	r22, r18
     f18:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>
     f1c:	88 23       	and	r24, r24
     f1e:	39 f0       	breq	.+14     	; 0xf2e <atomMutexDelete+0x70>
                {
                    /* Exit critical region */
                    CRITICAL_END ();
     f20:	ef e5       	ldi	r30, 0x5F	; 95
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	8c 81       	ldd	r24, Y+4	; 0x04
     f26:	80 83       	st	Z, r24

                    /* Quit the loop, returning error */
                    status = ATOM_ERR_QUEUE;
     f28:	8c ec       	ldi	r24, 0xCC	; 204
     f2a:	8d 83       	std	Y+5, r24	; 0x05
     f2c:	24 c0       	rjmp	.+72     	; 0xf76 <atomMutexDelete+0xb8>
                    break;
                }

                /* If there's a timeout on this suspension, cancel it */
                if (tcb_ptr->suspend_timo_cb)
     f2e:	ea 81       	ldd	r30, Y+2	; 0x02
     f30:	fb 81       	ldd	r31, Y+3	; 0x03
     f32:	87 85       	ldd	r24, Z+15	; 0x0f
     f34:	90 89       	ldd	r25, Z+16	; 0x10
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	99 f0       	breq	.+38     	; 0xf60 <atomMutexDelete+0xa2>
                {
                    /* Cancel the callback */
                    if (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK)
     f3a:	ea 81       	ldd	r30, Y+2	; 0x02
     f3c:	fb 81       	ldd	r31, Y+3	; 0x03
     f3e:	87 85       	ldd	r24, Z+15	; 0x0f
     f40:	90 89       	ldd	r25, Z+16	; 0x10
     f42:	0e 94 8b 10 	call	0x2116	; 0x2116 <atomTimerCancel>
     f46:	88 23       	and	r24, r24
     f48:	39 f0       	breq	.+14     	; 0xf58 <atomMutexDelete+0x9a>
                    {
                        /* Exit critical region */
                        CRITICAL_END ();
     f4a:	ef e5       	ldi	r30, 0x5F	; 95
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	8c 81       	ldd	r24, Y+4	; 0x04
     f50:	80 83       	st	Z, r24

                        /* Quit the loop, returning error */
                        status = ATOM_ERR_TIMER;
     f52:	8d ec       	ldi	r24, 0xCD	; 205
     f54:	8d 83       	std	Y+5, r24	; 0x05
     f56:	0f c0       	rjmp	.+30     	; 0xf76 <atomMutexDelete+0xb8>
                        break;
                    }

                    /* Flag as no timeout registered */
                    tcb_ptr->suspend_timo_cb = NULL;
     f58:	ea 81       	ldd	r30, Y+2	; 0x02
     f5a:	fb 81       	ldd	r31, Y+3	; 0x03
     f5c:	10 8a       	std	Z+16, r1	; 0x10
     f5e:	17 86       	std	Z+15, r1	; 0x0f

                }

                /* Exit critical region */
                CRITICAL_END ();
     f60:	ef e5       	ldi	r30, 0x5F	; 95
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	80 83       	st	Z, r24

                /* Request a reschedule */
                woken_threads = TRUE;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	bd cf       	rjmp	.-134    	; 0xee8 <atomMutexDelete+0x2a>

            /* No more suspended threads */
            else
            {
                /* Exit critical region and quit the loop */
                CRITICAL_END ();
     f6e:	ef e5       	ldi	r30, 0x5F	; 95
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	80 83       	st	Z, r24
                break;
            }
        }

        /* Call scheduler if any threads were woken up */
        if (woken_threads == TRUE)
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	39 f4       	brne	.+14     	; 0xf8a <atomMutexDelete+0xcc>
        {
            /**
             * Only call the scheduler if we are in thread context, otherwise
             * it will be called on exiting the ISR by atomIntExit().
             */
            if (atomCurrentContext())
     f7c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <atomCurrentContext>
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	19 f0       	breq	.+6      	; 0xf8a <atomMutexDelete+0xcc>
                atomSched (FALSE);
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	0e 94 6f 03 	call	0x6de	; 0x6de <atomSched>
        }
    }

    return (status);
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f8c:	27 96       	adiw	r28, 0x07	; 7
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <atomMutexGet>:
 * @retval ATOM_ERR_QUEUE Problem putting the thread on the suspend queue
 * @retval ATOM_ERR_TIMER Problem registering the timeout
 * @retval ATOM_ERR_OVF The recursive lock count would have overflowed (>255)
 */
uint8_t atomMutexGet (ATOM_MUTEX *mutex, int32_t timeout)
{
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	68 97       	sbiw	r28, 0x18	; 24
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	9c 8b       	std	Y+20, r25	; 0x14
     fb4:	8b 8b       	std	Y+19, r24	; 0x13
     fb6:	4d 8b       	std	Y+21, r20	; 0x15
     fb8:	5e 8b       	std	Y+22, r21	; 0x16
     fba:	6f 8b       	std	Y+23, r22	; 0x17
     fbc:	78 8f       	std	Y+24, r23	; 0x18
    MUTEX_TIMER timer_data;
    ATOM_TIMER timer_cb;
    ATOM_TCB *curr_tcb_ptr;

    /* Check parameters */
    if (mutex == NULL)
     fbe:	8b 89       	ldd	r24, Y+19	; 0x13
     fc0:	9c 89       	ldd	r25, Y+20	; 0x14
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	19 f4       	brne	.+6      	; 0xfcc <atomMutexGet+0x2e>
    {
        /* Bad mutex pointer */
        status = ATOM_ERR_PARAM;
     fc6:	89 ec       	ldi	r24, 0xC9	; 201
     fc8:	8b 83       	std	Y+3, r24	; 0x03
     fca:	c2 c0       	rjmp	.+388    	; 0x1150 <atomMutexGet+0x1b2>
    }
    else
    {
        /* Get the current TCB */
        curr_tcb_ptr = atomCurrentContext();
     fcc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <atomCurrentContext>
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	89 83       	std	Y+1, r24	; 0x01

        /* Protect access to the mutex object and OS queues */
        CRITICAL_START ();
     fd4:	ef e5       	ldi	r30, 0x5F	; 95
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8c 83       	std	Y+4, r24	; 0x04
     fdc:	f8 94       	cli
        /**
         * Check we are at thread context. Because mutexes have the concept of
         * owner threads, it is never valid to call here from an ISR,
         * regardless of whether we will block.
         */
        if (curr_tcb_ptr == NULL)
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	9a 81       	ldd	r25, Y+2	; 0x02
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	39 f4       	brne	.+14     	; 0xff4 <atomMutexGet+0x56>
        {
            /* Exit critical region */
            CRITICAL_END ();
     fe6:	ef e5       	ldi	r30, 0x5F	; 95
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
     fec:	80 83       	st	Z, r24

            /* Not currently in thread context, can't suspend */
            status = ATOM_ERR_CONTEXT;
     fee:	88 ec       	ldi	r24, 0xC8	; 200
     ff0:	8b 83       	std	Y+3, r24	; 0x03
     ff2:	ae c0       	rjmp	.+348    	; 0x1150 <atomMutexGet+0x1b2>
        }

        /* Otherwise if mutex is owned by another thread, block the calling thread */
        else if ((mutex->owner != NULL) && (mutex->owner != curr_tcb_ptr))
     ff4:	eb 89       	ldd	r30, Y+19	; 0x13
     ff6:	fc 89       	ldd	r31, Y+20	; 0x14
     ff8:	82 81       	ldd	r24, Z+2	; 0x02
     ffa:	93 81       	ldd	r25, Z+3	; 0x03
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	09 f4       	brne	.+2      	; 0x1002 <atomMutexGet+0x64>
    1000:	87 c0       	rjmp	.+270    	; 0x1110 <atomMutexGet+0x172>
    1002:	eb 89       	ldd	r30, Y+19	; 0x13
    1004:	fc 89       	ldd	r31, Y+20	; 0x14
    1006:	22 81       	ldd	r18, Z+2	; 0x02
    1008:	33 81       	ldd	r19, Z+3	; 0x03
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	9a 81       	ldd	r25, Y+2	; 0x02
    100e:	28 17       	cp	r18, r24
    1010:	39 07       	cpc	r19, r25
    1012:	09 f4       	brne	.+2      	; 0x1016 <atomMutexGet+0x78>
    1014:	7d c0       	rjmp	.+250    	; 0x1110 <atomMutexGet+0x172>
        {
            /* If called with timeout >= 0, we should block */
            if (timeout >= 0)
    1016:	8d 89       	ldd	r24, Y+21	; 0x15
    1018:	9e 89       	ldd	r25, Y+22	; 0x16
    101a:	af 89       	ldd	r26, Y+23	; 0x17
    101c:	b8 8d       	ldd	r27, Y+24	; 0x18
    101e:	bb 23       	and	r27, r27
    1020:	0c f4       	brge	.+2      	; 0x1024 <atomMutexGet+0x86>
    1022:	6f c0       	rjmp	.+222    	; 0x1102 <atomMutexGet+0x164>
            {
                /* Add current thread to the suspend list on this mutex */
                if (tcbEnqueuePriority (&mutex->suspQ, curr_tcb_ptr) != ATOM_OK)
    1024:	8b 89       	ldd	r24, Y+19	; 0x13
    1026:	9c 89       	ldd	r25, Y+20	; 0x14
    1028:	29 81       	ldd	r18, Y+1	; 0x01
    102a:	3a 81       	ldd	r19, Y+2	; 0x02
    102c:	b9 01       	movw	r22, r18
    102e:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>
    1032:	88 23       	and	r24, r24
    1034:	39 f0       	breq	.+14     	; 0x1044 <atomMutexGet+0xa6>
                {
                    /* Exit critical region */
                    CRITICAL_END ();
    1036:	ef e5       	ldi	r30, 0x5F	; 95
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	80 83       	st	Z, r24

                    /* There was an error putting this thread on the suspend list */
                    status = ATOM_ERR_QUEUE;
    103e:	8c ec       	ldi	r24, 0xCC	; 204
    1040:	8b 83       	std	Y+3, r24	; 0x03
    1042:	86 c0       	rjmp	.+268    	; 0x1150 <atomMutexGet+0x1b2>
                }
                else
                {
                    /* Set suspended status for the current thread */
                    curr_tcb_ptr->suspended = TRUE;
    1044:	e9 81       	ldd	r30, Y+1	; 0x01
    1046:	fa 81       	ldd	r31, Y+2	; 0x02
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	85 87       	std	Z+13, r24	; 0x0d

                    /* Track errors */
                    status = ATOM_OK;
    104c:	1b 82       	std	Y+3, r1	; 0x03

                    /* Register a timer callback if requested */
                    if (timeout)
    104e:	8d 89       	ldd	r24, Y+21	; 0x15
    1050:	9e 89       	ldd	r25, Y+22	; 0x16
    1052:	af 89       	ldd	r26, Y+23	; 0x17
    1054:	b8 8d       	ldd	r27, Y+24	; 0x18
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	a1 05       	cpc	r26, r1
    105a:	b1 05       	cpc	r27, r1
    105c:	a9 f1       	breq	.+106    	; 0x10c8 <atomMutexGet+0x12a>
                    {
                        /* Fill out the data needed by the callback to wake us up */
                        timer_data.tcb_ptr = curr_tcb_ptr;
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	9a 81       	ldd	r25, Y+2	; 0x02
    1062:	9e 83       	std	Y+6, r25	; 0x06
    1064:	8d 83       	std	Y+5, r24	; 0x05
                        timer_data.mutex_ptr = mutex;
    1066:	8b 89       	ldd	r24, Y+19	; 0x13
    1068:	9c 89       	ldd	r25, Y+20	; 0x14
    106a:	98 87       	std	Y+8, r25	; 0x08
    106c:	8f 83       	std	Y+7, r24	; 0x07

                        /* Fill out the timer callback request structure */
                        timer_cb.cb_func = atomMutexTimerCallback;
    106e:	87 e4       	ldi	r24, 0x47	; 71
    1070:	99 e0       	ldi	r25, 0x09	; 9
    1072:	9a 87       	std	Y+10, r25	; 0x0a
    1074:	89 87       	std	Y+9, r24	; 0x09
                        timer_cb.cb_data = (POINTER)&timer_data;
    1076:	ce 01       	movw	r24, r28
    1078:	05 96       	adiw	r24, 0x05	; 5
    107a:	9c 87       	std	Y+12, r25	; 0x0c
    107c:	8b 87       	std	Y+11, r24	; 0x0b
                        timer_cb.cb_ticks = timeout;
    107e:	8d 89       	ldd	r24, Y+21	; 0x15
    1080:	9e 89       	ldd	r25, Y+22	; 0x16
    1082:	af 89       	ldd	r26, Y+23	; 0x17
    1084:	b8 8d       	ldd	r27, Y+24	; 0x18
    1086:	8d 87       	std	Y+13, r24	; 0x0d
    1088:	9e 87       	std	Y+14, r25	; 0x0e
    108a:	af 87       	std	Y+15, r26	; 0x0f
    108c:	b8 8b       	std	Y+16, r27	; 0x10
                        /**
                         * Store the timer details in the TCB so that we can
                         * cancel the timer callback if the mutex is put
                         * before the timeout occurs.
                         */
                        curr_tcb_ptr->suspend_timo_cb = &timer_cb;
    108e:	e9 81       	ldd	r30, Y+1	; 0x01
    1090:	fa 81       	ldd	r31, Y+2	; 0x02
    1092:	ce 01       	movw	r24, r28
    1094:	09 96       	adiw	r24, 0x09	; 9
    1096:	90 8b       	std	Z+16, r25	; 0x10
    1098:	87 87       	std	Z+15, r24	; 0x0f

                        /* Register a callback on timeout */
                        if (atomTimerRegister (&timer_cb) != ATOM_OK)
    109a:	ce 01       	movw	r24, r28
    109c:	09 96       	adiw	r24, 0x09	; 9
    109e:	0e 94 3b 10 	call	0x2076	; 0x2076 <atomTimerRegister>
    10a2:	88 23       	and	r24, r24
    10a4:	a9 f0       	breq	.+42     	; 0x10d0 <atomMutexGet+0x132>
                        {
                            /* Timer registration failed */
                            status = ATOM_ERR_TIMER;
    10a6:	8d ec       	ldi	r24, 0xCD	; 205
    10a8:	8b 83       	std	Y+3, r24	; 0x03

                            /* Clean up and return to the caller */
                            (void)tcbDequeueEntry (&mutex->suspQ, curr_tcb_ptr);
    10aa:	8b 89       	ldd	r24, Y+19	; 0x13
    10ac:	9c 89       	ldd	r25, Y+20	; 0x14
    10ae:	29 81       	ldd	r18, Y+1	; 0x01
    10b0:	3a 81       	ldd	r19, Y+2	; 0x02
    10b2:	b9 01       	movw	r22, r18
    10b4:	0e 94 57 06 	call	0xcae	; 0xcae <tcbDequeueEntry>
                            curr_tcb_ptr->suspended = FALSE;
    10b8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ba:	fa 81       	ldd	r31, Y+2	; 0x02
    10bc:	15 86       	std	Z+13, r1	; 0x0d
                            curr_tcb_ptr->suspend_timo_cb = NULL;
    10be:	e9 81       	ldd	r30, Y+1	; 0x01
    10c0:	fa 81       	ldd	r31, Y+2	; 0x02
    10c2:	10 8a       	std	Z+16, r1	; 0x10
    10c4:	17 86       	std	Z+15, r1	; 0x0f
    10c6:	04 c0       	rjmp	.+8      	; 0x10d0 <atomMutexGet+0x132>

                    /* Set no timeout requested */
                    else
                    {
                        /* No need to cancel timeouts on this one */
                        curr_tcb_ptr->suspend_timo_cb = NULL;
    10c8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ca:	fa 81       	ldd	r31, Y+2	; 0x02
    10cc:	10 8a       	std	Z+16, r1	; 0x10
    10ce:	17 86       	std	Z+15, r1	; 0x0f
                    }

                    /* Exit critical region */
                    CRITICAL_END ();
    10d0:	ef e5       	ldi	r30, 0x5F	; 95
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	80 83       	st	Z, r24

                    /* Check no errors have occurred */
                    if (status == ATOM_OK)
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	88 23       	and	r24, r24
    10dc:	c9 f5       	brne	.+114    	; 0x1150 <atomMutexGet+0x1b2>
                        /**
                         * Current thread now blocking, schedule in a new
                         * one. We already know we are in thread context
                         * so can call the scheduler from here.
                         */
                        atomSched (FALSE);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	0e 94 6f 03 	call	0x6de	; 0x6de <atomSched>

                        /**
                         * Normal atomMutexPut() wakeups will set ATOM_OK status,
                         * while timeouts will set ATOM_TIMEOUT and mutex
                         * deletions will set ATOM_ERR_DELETED. */
                        status = curr_tcb_ptr->suspend_wake_status;
    10e4:	e9 81       	ldd	r30, Y+1	; 0x01
    10e6:	fa 81       	ldd	r31, Y+2	; 0x02
    10e8:	86 85       	ldd	r24, Z+14	; 0x0e
    10ea:	8b 83       	std	Y+3, r24	; 0x03
                         * owner before waking the thread ensures that no other
                         * thread can preempt and take ownership of the mutex
                         * between this thread being made ready to run, and
                         * actually being scheduled back in here.
                         */
                        if (status == ATOM_OK)
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	88 23       	and	r24, r24
    10f0:	79 f5       	brne	.+94     	; 0x1150 <atomMutexGet+0x1b2>
                            /**
                             * Since this thread has just gained ownership, the
                             * lock count is zero and should be incremented
                             * once for this call.
                             */
                            mutex->count++;
    10f2:	eb 89       	ldd	r30, Y+19	; 0x13
    10f4:	fc 89       	ldd	r31, Y+20	; 0x14
    10f6:	84 81       	ldd	r24, Z+4	; 0x04
    10f8:	8f 5f       	subi	r24, 0xFF	; 255
    10fa:	eb 89       	ldd	r30, Y+19	; 0x13
    10fc:	fc 89       	ldd	r31, Y+20	; 0x14
    10fe:	84 83       	std	Z+4, r24	; 0x04
    1100:	27 c0       	rjmp	.+78     	; 0x1150 <atomMutexGet+0x1b2>
                }
            }
            else
            {
                /* timeout == -1, requested not to block and mutex is owned by another thread */
                CRITICAL_END();
    1102:	ef e5       	ldi	r30, 0x5F	; 95
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	80 83       	st	Z, r24
                status = ATOM_WOULDBLOCK;
    110a:	83 e0       	ldi	r24, 0x03	; 3
    110c:	8b 83       	std	Y+3, r24	; 0x03
    110e:	20 c0       	rjmp	.+64     	; 0x1150 <atomMutexGet+0x1b2>
        else
        {
            /* Thread is not owned or is owned by us, we can claim ownership */

            /* Increment the lock count, checking for count overflow */
            if (mutex->count == 255)
    1110:	eb 89       	ldd	r30, Y+19	; 0x13
    1112:	fc 89       	ldd	r31, Y+20	; 0x14
    1114:	84 81       	ldd	r24, Z+4	; 0x04
    1116:	8f 3f       	cpi	r24, 0xFF	; 255
    1118:	19 f4       	brne	.+6      	; 0x1120 <atomMutexGet+0x182>
            {
                /* Don't increment, just return error status */
                status = ATOM_ERR_OVF;
    111a:	8b ec       	ldi	r24, 0xCB	; 203
    111c:	8b 83       	std	Y+3, r24	; 0x03
    111e:	14 c0       	rjmp	.+40     	; 0x1148 <atomMutexGet+0x1aa>
            }
            else
            {
                /* Increment the count and return to the calling thread */
                mutex->count++;
    1120:	eb 89       	ldd	r30, Y+19	; 0x13
    1122:	fc 89       	ldd	r31, Y+20	; 0x14
    1124:	84 81       	ldd	r24, Z+4	; 0x04
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	eb 89       	ldd	r30, Y+19	; 0x13
    112a:	fc 89       	ldd	r31, Y+20	; 0x14
    112c:	84 83       	std	Z+4, r24	; 0x04

                /* If the mutex is not locked, mark the calling thread as the new owner */
                if (mutex->owner == NULL)
    112e:	eb 89       	ldd	r30, Y+19	; 0x13
    1130:	fc 89       	ldd	r31, Y+20	; 0x14
    1132:	82 81       	ldd	r24, Z+2	; 0x02
    1134:	93 81       	ldd	r25, Z+3	; 0x03
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	31 f4       	brne	.+12     	; 0x1146 <atomMutexGet+0x1a8>
                {
                    mutex->owner = curr_tcb_ptr;
    113a:	eb 89       	ldd	r30, Y+19	; 0x13
    113c:	fc 89       	ldd	r31, Y+20	; 0x14
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	93 83       	std	Z+3, r25	; 0x03
    1144:	82 83       	std	Z+2, r24	; 0x02
                }

                /* Successful */
                status = ATOM_OK;
    1146:	1b 82       	std	Y+3, r1	; 0x03
            }

            /* Exit critical region */
            CRITICAL_END ();
    1148:	ef e5       	ldi	r30, 0x5F	; 95
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	80 83       	st	Z, r24
        }
    }

    return (status);
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1152:	68 96       	adiw	r28, 0x18	; 24
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <atomMutexPut>:
 * @retval ATOM_ERR_QUEUE Problem putting a woken thread on the ready queue
 * @retval ATOM_ERR_TIMER Problem cancelling a timeout for a woken thread
 * @retval ATOM_ERR_OWNERSHIP Attempt to unlock mutex not owned by this thread
 */
uint8_t atomMutexPut (ATOM_MUTEX * mutex)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	28 97       	sbiw	r28, 0x08	; 8
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	de bf       	out	0x3e, r29	; 62
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	cd bf       	out	0x3d, r28	; 61
    1178:	98 87       	std	Y+8, r25	; 0x08
    117a:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t status;
    CRITICAL_STORE;
    ATOM_TCB *tcb_ptr, *curr_tcb_ptr;

    /* Check parameters */
    if (mutex == NULL)
    117c:	8f 81       	ldd	r24, Y+7	; 0x07
    117e:	98 85       	ldd	r25, Y+8	; 0x08
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	19 f4       	brne	.+6      	; 0x118a <atomMutexPut+0x26>
    {
        /* Bad mutex pointer */
        status = ATOM_ERR_PARAM;
    1184:	89 ec       	ldi	r24, 0xC9	; 201
    1186:	8e 83       	std	Y+6, r24	; 0x06
    1188:	78 c0       	rjmp	.+240    	; 0x127a <atomMutexPut+0x116>
    }
    else
    {
        /* Get the current TCB */
        curr_tcb_ptr = atomCurrentContext();
    118a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <atomCurrentContext>
    118e:	9a 83       	std	Y+2, r25	; 0x02
    1190:	89 83       	std	Y+1, r24	; 0x01

        /* Protect access to the mutex object and OS queues */
        CRITICAL_START ();
    1192:	ef e5       	ldi	r30, 0x5F	; 95
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8d 83       	std	Y+5, r24	; 0x05
    119a:	f8 94       	cli

        /* Check if the calling thread owns this mutex */
        if (mutex->owner != curr_tcb_ptr)
    119c:	ef 81       	ldd	r30, Y+7	; 0x07
    119e:	f8 85       	ldd	r31, Y+8	; 0x08
    11a0:	22 81       	ldd	r18, Z+2	; 0x02
    11a2:	33 81       	ldd	r19, Z+3	; 0x03
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	28 17       	cp	r18, r24
    11aa:	39 07       	cpc	r19, r25
    11ac:	39 f0       	breq	.+14     	; 0x11bc <atomMutexPut+0x58>
        {
            /* Exit critical region */
            CRITICAL_END ();
    11ae:	ef e5       	ldi	r30, 0x5F	; 95
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	8d 81       	ldd	r24, Y+5	; 0x05
    11b4:	80 83       	st	Z, r24

            /* Attempt to unlock by non-owning thread */
            status = ATOM_ERR_OWNERSHIP;
    11b6:	8f ec       	ldi	r24, 0xCF	; 207
    11b8:	8e 83       	std	Y+6, r24	; 0x06
    11ba:	5f c0       	rjmp	.+190    	; 0x127a <atomMutexPut+0x116>
        }
        else
        {
            /* Lock is owned by this thread, decrement the recursive lock count */
            mutex->count--;
    11bc:	ef 81       	ldd	r30, Y+7	; 0x07
    11be:	f8 85       	ldd	r31, Y+8	; 0x08
    11c0:	84 81       	ldd	r24, Z+4	; 0x04
    11c2:	81 50       	subi	r24, 0x01	; 1
    11c4:	ef 81       	ldd	r30, Y+7	; 0x07
    11c6:	f8 85       	ldd	r31, Y+8	; 0x08
    11c8:	84 83       	std	Z+4, r24	; 0x04

            /* Once recursive lock count reaches zero, we relinquish ownership */
            if (mutex->count == 0)
    11ca:	ef 81       	ldd	r30, Y+7	; 0x07
    11cc:	f8 85       	ldd	r31, Y+8	; 0x08
    11ce:	84 81       	ldd	r24, Z+4	; 0x04
    11d0:	88 23       	and	r24, r24
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <atomMutexPut+0x72>
    11d4:	4d c0       	rjmp	.+154    	; 0x1270 <atomMutexPut+0x10c>
            {
                /* Relinquish ownership */
                mutex->owner = NULL;
    11d6:	ef 81       	ldd	r30, Y+7	; 0x07
    11d8:	f8 85       	ldd	r31, Y+8	; 0x08
    11da:	13 82       	std	Z+3, r1	; 0x03
    11dc:	12 82       	std	Z+2, r1	; 0x02

                /* If any threads are blocking on this mutex, wake them now */
                if (mutex->suspQ)
    11de:	ef 81       	ldd	r30, Y+7	; 0x07
    11e0:	f8 85       	ldd	r31, Y+8	; 0x08
    11e2:	80 81       	ld	r24, Z
    11e4:	91 81       	ldd	r25, Z+1	; 0x01
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	e9 f1       	breq	.+122    	; 0x1264 <atomMutexPut+0x100>
                    /**
                     * Threads are woken up in priority order, with a FIFO system
                     * used on same priority threads. We always take the head,
                     * ordering is taken care of by an ordered list enqueue.
                     */
                    tcb_ptr = tcbDequeueHead (&mutex->suspQ);
    11ea:	8f 81       	ldd	r24, Y+7	; 0x07
    11ec:	98 85       	ldd	r25, Y+8	; 0x08
    11ee:	0e 94 0f 06 	call	0xc1e	; 0xc1e <tcbDequeueHead>
    11f2:	9c 83       	std	Y+4, r25	; 0x04
    11f4:	8b 83       	std	Y+3, r24	; 0x03
                    if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) != ATOM_OK)
    11f6:	83 e5       	ldi	r24, 0x53	; 83
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	2b 81       	ldd	r18, Y+3	; 0x03
    11fc:	3c 81       	ldd	r19, Y+4	; 0x04
    11fe:	b9 01       	movw	r22, r18
    1200:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>
    1204:	88 23       	and	r24, r24
    1206:	39 f0       	breq	.+14     	; 0x1216 <atomMutexPut+0xb2>
                    {
                        /* Exit critical region */
                        CRITICAL_END ();
    1208:	ef e5       	ldi	r30, 0x5F	; 95
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	80 83       	st	Z, r24

                        /* There was a problem putting the thread on the ready queue */
                        status = ATOM_ERR_QUEUE;
    1210:	8c ec       	ldi	r24, 0xCC	; 204
    1212:	8e 83       	std	Y+6, r24	; 0x06
    1214:	32 c0       	rjmp	.+100    	; 0x127a <atomMutexPut+0x116>
                    }
                    else
                    {
                        /* Set OK status to be returned to the waiting thread */
                        tcb_ptr->suspend_wake_status = ATOM_OK;
    1216:	eb 81       	ldd	r30, Y+3	; 0x03
    1218:	fc 81       	ldd	r31, Y+4	; 0x04
    121a:	16 86       	std	Z+14, r1	; 0x0e

                        /* Set this thread as the new owner of the mutex */
                        mutex->owner = tcb_ptr;
    121c:	ef 81       	ldd	r30, Y+7	; 0x07
    121e:	f8 85       	ldd	r31, Y+8	; 0x08
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	93 83       	std	Z+3, r25	; 0x03
    1226:	82 83       	std	Z+2, r24	; 0x02

                        /* If there's a timeout on this suspension, cancel it */
                        if ((tcb_ptr->suspend_timo_cb != NULL)
    1228:	eb 81       	ldd	r30, Y+3	; 0x03
    122a:	fc 81       	ldd	r31, Y+4	; 0x04
    122c:	87 85       	ldd	r24, Z+15	; 0x0f
    122e:	90 89       	ldd	r25, Z+16	; 0x10
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	59 f0       	breq	.+22     	; 0x124a <atomMutexPut+0xe6>
    1234:	eb 81       	ldd	r30, Y+3	; 0x03
    1236:	fc 81       	ldd	r31, Y+4	; 0x04
    1238:	87 85       	ldd	r24, Z+15	; 0x0f
    123a:	90 89       	ldd	r25, Z+16	; 0x10
    123c:	0e 94 8b 10 	call	0x2116	; 0x2116 <atomTimerCancel>
    1240:	88 23       	and	r24, r24
    1242:	19 f0       	breq	.+6      	; 0x124a <atomMutexPut+0xe6>
                            && (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK))
                        {
                            /* There was a problem cancelling a timeout on this mutex */
                            status = ATOM_ERR_TIMER;
    1244:	8d ec       	ldi	r24, 0xCD	; 205
    1246:	8e 83       	std	Y+6, r24	; 0x06
    1248:	05 c0       	rjmp	.+10     	; 0x1254 <atomMutexPut+0xf0>
                        }
                        else
                        {
                            /* Flag as no timeout registered */
                            tcb_ptr->suspend_timo_cb = NULL;
    124a:	eb 81       	ldd	r30, Y+3	; 0x03
    124c:	fc 81       	ldd	r31, Y+4	; 0x04
    124e:	10 8a       	std	Z+16, r1	; 0x10
    1250:	17 86       	std	Z+15, r1	; 0x0f

                            /* Successful */
                            status = ATOM_OK;
    1252:	1e 82       	std	Y+6, r1	; 0x06
                        }

                        /* Exit critical region */
                        CRITICAL_END ();
    1254:	ef e5       	ldi	r30, 0x5F	; 95
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	8d 81       	ldd	r24, Y+5	; 0x05
    125a:	80 83       	st	Z, r24
                        /**
                         * The scheduler may now make a policy decision to
                         * thread switch. We already know we are in thread
                         * context so can call the scheduler from here.
                         */
                        atomSched (FALSE);
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	0e 94 6f 03 	call	0x6de	; 0x6de <atomSched>
    1262:	0b c0       	rjmp	.+22     	; 0x127a <atomMutexPut+0x116>
                     * Relinquished ownership and no threads waiting.
                     * Nothing to do.
                     */

                    /* Exit critical region */
                    CRITICAL_END ();
    1264:	ef e5       	ldi	r30, 0x5F	; 95
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	80 83       	st	Z, r24

                    /* Successful */
                    status = ATOM_OK;
    126c:	1e 82       	std	Y+6, r1	; 0x06
    126e:	05 c0       	rjmp	.+10     	; 0x127a <atomMutexPut+0x116>
                 * Decremented lock but still retain ownership due to
                 * recursion. Nothing to do.
                 */

                /* Exit critical region */
                CRITICAL_END ();
    1270:	ef e5       	ldi	r30, 0x5F	; 95
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	8d 81       	ldd	r24, Y+5	; 0x05
    1276:	80 83       	st	Z, r24

                /* Successful */
                status = ATOM_OK;
    1278:	1e 82       	std	Y+6, r1	; 0x06
            }
        }
    }

    return (status);
    127a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    127c:	28 96       	adiw	r28, 0x08	; 8
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <atomMutexTimerCallback>:
 * mutex details.
 *
 * @param[in] cb_data Pointer to a MUTEX_TIMER object
 */
static void atomMutexTimerCallback (POINTER cb_data)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <atomMutexTimerCallback+0x6>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <atomMutexTimerCallback+0x8>
    1296:	0f 92       	push	r0
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	9d 83       	std	Y+5, r25	; 0x05
    129e:	8c 83       	std	Y+4, r24	; 0x04
    MUTEX_TIMER *timer_data_ptr;
    CRITICAL_STORE;

    /* Get the MUTEX_TIMER structure pointer */
    timer_data_ptr = (MUTEX_TIMER *)cb_data;
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	9d 81       	ldd	r25, Y+5	; 0x05
    12a4:	9b 83       	std	Y+3, r25	; 0x03
    12a6:	8a 83       	std	Y+2, r24	; 0x02

    /* Check parameter is valid */
    if (timer_data_ptr)
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	9b 81       	ldd	r25, Y+3	; 0x03
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	59 f1       	breq	.+86     	; 0x1306 <atomMutexTimerCallback+0x78>
    {
        /* Enter critical region */
        CRITICAL_START ();
    12b0:	ef e5       	ldi	r30, 0x5F	; 95
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	f8 94       	cli

        /* Set status to indicate to the waiting thread that it timed out */
        timer_data_ptr->tcb_ptr->suspend_wake_status = ATOM_TIMEOUT;
    12ba:	ea 81       	ldd	r30, Y+2	; 0x02
    12bc:	fb 81       	ldd	r31, Y+3	; 0x03
    12be:	01 90       	ld	r0, Z+
    12c0:	f0 81       	ld	r31, Z
    12c2:	e0 2d       	mov	r30, r0
    12c4:	82 e0       	ldi	r24, 0x02	; 2
    12c6:	86 87       	std	Z+14, r24	; 0x0e

        /* Flag as no timeout registered */
        timer_data_ptr->tcb_ptr->suspend_timo_cb = NULL;
    12c8:	ea 81       	ldd	r30, Y+2	; 0x02
    12ca:	fb 81       	ldd	r31, Y+3	; 0x03
    12cc:	01 90       	ld	r0, Z+
    12ce:	f0 81       	ld	r31, Z
    12d0:	e0 2d       	mov	r30, r0
    12d2:	10 8a       	std	Z+16, r1	; 0x10
    12d4:	17 86       	std	Z+15, r1	; 0x0f

        /* Remove this thread from the mutex's suspend list */
        (void)tcbDequeueEntry (&timer_data_ptr->mutex_ptr->suspQ, timer_data_ptr->tcb_ptr);
    12d6:	ea 81       	ldd	r30, Y+2	; 0x02
    12d8:	fb 81       	ldd	r31, Y+3	; 0x03
    12da:	82 81       	ldd	r24, Z+2	; 0x02
    12dc:	93 81       	ldd	r25, Z+3	; 0x03
    12de:	ea 81       	ldd	r30, Y+2	; 0x02
    12e0:	fb 81       	ldd	r31, Y+3	; 0x03
    12e2:	20 81       	ld	r18, Z
    12e4:	31 81       	ldd	r19, Z+1	; 0x01
    12e6:	b9 01       	movw	r22, r18
    12e8:	0e 94 57 06 	call	0xcae	; 0xcae <tcbDequeueEntry>

        /* Put the thread on the ready queue */
        (void)tcbEnqueuePriority (&tcbReadyQ, timer_data_ptr->tcb_ptr);
    12ec:	ea 81       	ldd	r30, Y+2	; 0x02
    12ee:	fb 81       	ldd	r31, Y+3	; 0x03
    12f0:	20 81       	ld	r18, Z
    12f2:	31 81       	ldd	r19, Z+1	; 0x01
    12f4:	83 e5       	ldi	r24, 0x53	; 83
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	b9 01       	movw	r22, r18
    12fa:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>

        /* Exit critical region */
        CRITICAL_END ();
    12fe:	ef e5       	ldi	r30, 0x5F	; 95
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	80 83       	st	Z, r24
        /**
         * Note that we don't call the scheduler now as it will be called
         * when we exit the ISR by atomIntExit().
         */
    }
}
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <atomQueueCreate>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 */
uint8_t atomQueueCreate (ATOM_QUEUE *qptr, uint8_t *buff_ptr, uint32_t unit_size, uint32_t max_num_msgs)
{
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	2d 97       	sbiw	r28, 0x0d	; 13
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	9b 83       	std	Y+3, r25	; 0x03
    1334:	8a 83       	std	Y+2, r24	; 0x02
    1336:	7d 83       	std	Y+5, r23	; 0x05
    1338:	6c 83       	std	Y+4, r22	; 0x04
    133a:	2e 83       	std	Y+6, r18	; 0x06
    133c:	3f 83       	std	Y+7, r19	; 0x07
    133e:	48 87       	std	Y+8, r20	; 0x08
    1340:	59 87       	std	Y+9, r21	; 0x09
    1342:	ea 86       	std	Y+10, r14	; 0x0a
    1344:	fb 86       	std	Y+11, r15	; 0x0b
    1346:	0c 87       	std	Y+12, r16	; 0x0c
    1348:	1d 87       	std	Y+13, r17	; 0x0d
    uint8_t status;

    /* Parameter check */
    if ((qptr == NULL) || (buff_ptr == NULL))
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	9b 81       	ldd	r25, Y+3	; 0x03
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	21 f0       	breq	.+8      	; 0x135a <atomQueueCreate+0x44>
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	9d 81       	ldd	r25, Y+5	; 0x05
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	19 f4       	brne	.+6      	; 0x1360 <atomQueueCreate+0x4a>
    {
        /* Bad pointers */
        status = ATOM_ERR_PARAM;
    135a:	89 ec       	ldi	r24, 0xC9	; 201
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	48 c0       	rjmp	.+144    	; 0x13f0 <atomQueueCreate+0xda>
    }
    else if ((unit_size == 0) || (max_num_msgs == 0))
    1360:	8e 81       	ldd	r24, Y+6	; 0x06
    1362:	9f 81       	ldd	r25, Y+7	; 0x07
    1364:	a8 85       	ldd	r26, Y+8	; 0x08
    1366:	b9 85       	ldd	r27, Y+9	; 0x09
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	a1 05       	cpc	r26, r1
    136c:	b1 05       	cpc	r27, r1
    136e:	41 f0       	breq	.+16     	; 0x1380 <atomQueueCreate+0x6a>
    1370:	8a 85       	ldd	r24, Y+10	; 0x0a
    1372:	9b 85       	ldd	r25, Y+11	; 0x0b
    1374:	ac 85       	ldd	r26, Y+12	; 0x0c
    1376:	bd 85       	ldd	r27, Y+13	; 0x0d
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	a1 05       	cpc	r26, r1
    137c:	b1 05       	cpc	r27, r1
    137e:	19 f4       	brne	.+6      	; 0x1386 <atomQueueCreate+0x70>
    {
        /* Bad values */
        status = ATOM_ERR_PARAM;
    1380:	89 ec       	ldi	r24, 0xC9	; 201
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	35 c0       	rjmp	.+106    	; 0x13f0 <atomQueueCreate+0xda>
    }
    else
    {
       /* Store the queue details */
        qptr->buff_ptr = buff_ptr;
    1386:	ea 81       	ldd	r30, Y+2	; 0x02
    1388:	fb 81       	ldd	r31, Y+3	; 0x03
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	9d 81       	ldd	r25, Y+5	; 0x05
    138e:	95 83       	std	Z+5, r25	; 0x05
    1390:	84 83       	std	Z+4, r24	; 0x04
        qptr->unit_size = unit_size;
    1392:	ea 81       	ldd	r30, Y+2	; 0x02
    1394:	fb 81       	ldd	r31, Y+3	; 0x03
    1396:	8e 81       	ldd	r24, Y+6	; 0x06
    1398:	9f 81       	ldd	r25, Y+7	; 0x07
    139a:	a8 85       	ldd	r26, Y+8	; 0x08
    139c:	b9 85       	ldd	r27, Y+9	; 0x09
    139e:	86 83       	std	Z+6, r24	; 0x06
    13a0:	97 83       	std	Z+7, r25	; 0x07
    13a2:	a0 87       	std	Z+8, r26	; 0x08
    13a4:	b1 87       	std	Z+9, r27	; 0x09
        qptr->max_num_msgs = max_num_msgs;
    13a6:	ea 81       	ldd	r30, Y+2	; 0x02
    13a8:	fb 81       	ldd	r31, Y+3	; 0x03
    13aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    13ae:	ac 85       	ldd	r26, Y+12	; 0x0c
    13b0:	bd 85       	ldd	r27, Y+13	; 0x0d
    13b2:	82 87       	std	Z+10, r24	; 0x0a
    13b4:	93 87       	std	Z+11, r25	; 0x0b
    13b6:	a4 87       	std	Z+12, r26	; 0x0c
    13b8:	b5 87       	std	Z+13, r27	; 0x0d

        /* Initialise the suspended threads queues */
        qptr->putSuspQ = NULL;
    13ba:	ea 81       	ldd	r30, Y+2	; 0x02
    13bc:	fb 81       	ldd	r31, Y+3	; 0x03
    13be:	11 82       	std	Z+1, r1	; 0x01
    13c0:	10 82       	st	Z, r1
        qptr->getSuspQ = NULL;
    13c2:	ea 81       	ldd	r30, Y+2	; 0x02
    13c4:	fb 81       	ldd	r31, Y+3	; 0x03
    13c6:	13 82       	std	Z+3, r1	; 0x03
    13c8:	12 82       	std	Z+2, r1	; 0x02

        /* Initialise the insert/remove pointers */
        qptr->insert_index = 0;
    13ca:	ea 81       	ldd	r30, Y+2	; 0x02
    13cc:	fb 81       	ldd	r31, Y+3	; 0x03
    13ce:	16 86       	std	Z+14, r1	; 0x0e
    13d0:	17 86       	std	Z+15, r1	; 0x0f
    13d2:	10 8a       	std	Z+16, r1	; 0x10
    13d4:	11 8a       	std	Z+17, r1	; 0x11
        qptr->remove_index = 0;
    13d6:	ea 81       	ldd	r30, Y+2	; 0x02
    13d8:	fb 81       	ldd	r31, Y+3	; 0x03
    13da:	12 8a       	std	Z+18, r1	; 0x12
    13dc:	13 8a       	std	Z+19, r1	; 0x13
    13de:	14 8a       	std	Z+20, r1	; 0x14
    13e0:	15 8a       	std	Z+21, r1	; 0x15
        qptr->num_msgs_stored = 0;
    13e2:	ea 81       	ldd	r30, Y+2	; 0x02
    13e4:	fb 81       	ldd	r31, Y+3	; 0x03
    13e6:	16 8a       	std	Z+22, r1	; 0x16
    13e8:	17 8a       	std	Z+23, r1	; 0x17
    13ea:	10 8e       	std	Z+24, r1	; 0x18
    13ec:	11 8e       	std	Z+25, r1	; 0x19

        /* Successful */
        status = ATOM_OK;
    13ee:	19 82       	std	Y+1, r1	; 0x01
    }

    return (status);
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f2:	2d 96       	adiw	r28, 0x0d	; 13
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	ff 90       	pop	r15
    1408:	ef 90       	pop	r14
    140a:	08 95       	ret

0000140c <atomQueueDelete>:
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_QUEUE Problem putting a woken thread on the ready queue
 * @retval ATOM_ERR_TIMER Problem cancelling a timeout on a woken thread
 */
uint8_t atomQueueDelete (ATOM_QUEUE *qptr)
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	27 97       	sbiw	r28, 0x07	; 7
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	9f 83       	std	Y+7, r25	; 0x07
    1422:	8e 83       	std	Y+6, r24	; 0x06
    uint8_t status;
    CRITICAL_STORE;
    ATOM_TCB *tcb_ptr;
    uint8_t woken_threads = FALSE;
    1424:	19 82       	std	Y+1, r1	; 0x01

    /* Parameter check */
    if (qptr == NULL)
    1426:	8e 81       	ldd	r24, Y+6	; 0x06
    1428:	9f 81       	ldd	r25, Y+7	; 0x07
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	19 f4       	brne	.+6      	; 0x1434 <atomQueueDelete+0x28>
    {
        /* Bad pointer */
        status = ATOM_ERR_PARAM;
    142e:	89 ec       	ldi	r24, 0xC9	; 201
    1430:	8d 83       	std	Y+5, r24	; 0x05
    1432:	5d c0       	rjmp	.+186    	; 0x14ee <atomQueueDelete+0xe2>
    }
    else
    {
        /* Default to success status unless errors occur during wakeup */
        status = ATOM_OK;
    1434:	1d 82       	std	Y+5, r1	; 0x05

        /* Wake up all suspended tasks */
        while (1)
        {
            /* Enter critical region */
            CRITICAL_START ();
    1436:	ef e5       	ldi	r30, 0x5F	; 95
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	8c 83       	std	Y+4, r24	; 0x04
    143e:	f8 94       	cli

            /* Check if any threads are suspended */
            if (((tcb_ptr = tcbDequeueHead (&qptr->getSuspQ)) != NULL)
    1440:	8e 81       	ldd	r24, Y+6	; 0x06
    1442:	9f 81       	ldd	r25, Y+7	; 0x07
    1444:	02 96       	adiw	r24, 0x02	; 2
    1446:	0e 94 0f 06 	call	0xc1e	; 0xc1e <tcbDequeueHead>
    144a:	9b 83       	std	Y+3, r25	; 0x03
    144c:	8a 83       	std	Y+2, r24	; 0x02
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	9b 81       	ldd	r25, Y+3	; 0x03
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	51 f4       	brne	.+20     	; 0x146a <atomQueueDelete+0x5e>
    1456:	8e 81       	ldd	r24, Y+6	; 0x06
    1458:	9f 81       	ldd	r25, Y+7	; 0x07
    145a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <tcbDequeueHead>
    145e:	9b 83       	std	Y+3, r25	; 0x03
    1460:	8a 83       	std	Y+2, r24	; 0x02
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	9b 81       	ldd	r25, Y+3	; 0x03
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	a1 f1       	breq	.+104    	; 0x14d2 <atomQueueDelete+0xc6>
                || ((tcb_ptr = tcbDequeueHead (&qptr->putSuspQ)) != NULL))
            {
                /* A thread is waiting on a suspend queue */

                /* Return error status to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_ERR_DELETED;
    146a:	ea 81       	ldd	r30, Y+2	; 0x02
    146c:	fb 81       	ldd	r31, Y+3	; 0x03
    146e:	8a ec       	ldi	r24, 0xCA	; 202
    1470:	86 87       	std	Z+14, r24	; 0x0e

                /* Put the thread on the ready queue */
                if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) != ATOM_OK)
    1472:	83 e5       	ldi	r24, 0x53	; 83
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	2a 81       	ldd	r18, Y+2	; 0x02
    1478:	3b 81       	ldd	r19, Y+3	; 0x03
    147a:	b9 01       	movw	r22, r18
    147c:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>
    1480:	88 23       	and	r24, r24
    1482:	39 f0       	breq	.+14     	; 0x1492 <atomQueueDelete+0x86>
                {
                    /* Exit critical region */
                    CRITICAL_END ();
    1484:	ef e5       	ldi	r30, 0x5F	; 95
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	80 83       	st	Z, r24

                    /* Quit the loop, returning error */
                    status = ATOM_ERR_QUEUE;
    148c:	8c ec       	ldi	r24, 0xCC	; 204
    148e:	8d 83       	std	Y+5, r24	; 0x05
    1490:	24 c0       	rjmp	.+72     	; 0x14da <atomQueueDelete+0xce>
                    break;
                }

                /* If there's a timeout on this suspension, cancel it */
                if (tcb_ptr->suspend_timo_cb)
    1492:	ea 81       	ldd	r30, Y+2	; 0x02
    1494:	fb 81       	ldd	r31, Y+3	; 0x03
    1496:	87 85       	ldd	r24, Z+15	; 0x0f
    1498:	90 89       	ldd	r25, Z+16	; 0x10
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	99 f0       	breq	.+38     	; 0x14c4 <atomQueueDelete+0xb8>
                {
                    /* Cancel the callback */
                    if (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK)
    149e:	ea 81       	ldd	r30, Y+2	; 0x02
    14a0:	fb 81       	ldd	r31, Y+3	; 0x03
    14a2:	87 85       	ldd	r24, Z+15	; 0x0f
    14a4:	90 89       	ldd	r25, Z+16	; 0x10
    14a6:	0e 94 8b 10 	call	0x2116	; 0x2116 <atomTimerCancel>
    14aa:	88 23       	and	r24, r24
    14ac:	39 f0       	breq	.+14     	; 0x14bc <atomQueueDelete+0xb0>
                    {
                        /* Exit critical region */
                        CRITICAL_END ();
    14ae:	ef e5       	ldi	r30, 0x5F	; 95
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	80 83       	st	Z, r24

                        /* Quit the loop, returning error */
                        status = ATOM_ERR_TIMER;
    14b6:	8d ec       	ldi	r24, 0xCD	; 205
    14b8:	8d 83       	std	Y+5, r24	; 0x05
    14ba:	0f c0       	rjmp	.+30     	; 0x14da <atomQueueDelete+0xce>
                        break;
                    }

                    /* Flag as no timeout registered */
                    tcb_ptr->suspend_timo_cb = NULL;
    14bc:	ea 81       	ldd	r30, Y+2	; 0x02
    14be:	fb 81       	ldd	r31, Y+3	; 0x03
    14c0:	10 8a       	std	Z+16, r1	; 0x10
    14c2:	17 86       	std	Z+15, r1	; 0x0f

                }

                /* Exit critical region */
                CRITICAL_END ();
    14c4:	ef e5       	ldi	r30, 0x5F	; 95
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	80 83       	st	Z, r24

                /* Request a reschedule */
                woken_threads = TRUE;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	b2 cf       	rjmp	.-156    	; 0x1436 <atomQueueDelete+0x2a>

            /* No more suspended threads */
            else
            {
                /* Exit critical region and quit the loop */
                CRITICAL_END ();
    14d2:	ef e5       	ldi	r30, 0x5F	; 95
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	80 83       	st	Z, r24
                break;
            }
        }

        /* Call scheduler if any threads were woken up */
        if (woken_threads == TRUE)
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	81 30       	cpi	r24, 0x01	; 1
    14de:	39 f4       	brne	.+14     	; 0x14ee <atomQueueDelete+0xe2>
        {
            /**
             * Only call the scheduler if we are in thread context, otherwise
             * it will be called on exiting the ISR by atomIntExit().
             */
            if (atomCurrentContext())
    14e0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <atomCurrentContext>
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	19 f0       	breq	.+6      	; 0x14ee <atomQueueDelete+0xe2>
                atomSched (FALSE);
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	0e 94 6f 03 	call	0x6de	; 0x6de <atomSched>
        }
    }

    return (status);
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
}
    14f0:	27 96       	adiw	r28, 0x07	; 7
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <atomQueueGet>:
 * @retval ATOM_ERR_PARAM Bad parameter
 * @retval ATOM_ERR_QUEUE Problem putting the thread on the suspend queue
 * @retval ATOM_ERR_TIMER Problem registering the timeout
 */
uint8_t atomQueueGet (ATOM_QUEUE *qptr, int32_t timeout, uint8_t *msgptr)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	6c 97       	sbiw	r28, 0x1c	; 28
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	9e 8b       	std	Y+22, r25	; 0x16
    1518:	8d 8b       	std	Y+21, r24	; 0x15
    151a:	4f 8b       	std	Y+23, r20	; 0x17
    151c:	58 8f       	std	Y+24, r21	; 0x18
    151e:	69 8f       	std	Y+25, r22	; 0x19
    1520:	7a 8f       	std	Y+26, r23	; 0x1a
    1522:	3c 8f       	std	Y+28, r19	; 0x1c
    1524:	2b 8f       	std	Y+27, r18	; 0x1b
    QUEUE_TIMER timer_data;
    ATOM_TIMER timer_cb;
    ATOM_TCB *curr_tcb_ptr;

    /* Check parameters */
    if ((qptr == NULL) || (msgptr == NULL))
    1526:	8d 89       	ldd	r24, Y+21	; 0x15
    1528:	9e 89       	ldd	r25, Y+22	; 0x16
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	21 f0       	breq	.+8      	; 0x1536 <atomQueueGet+0x34>
    152e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1530:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	19 f4       	brne	.+6      	; 0x153c <atomQueueGet+0x3a>
    {
        /* Bad pointer */
        status = ATOM_ERR_PARAM;
    1536:	89 ec       	ldi	r24, 0xC9	; 201
    1538:	8b 83       	std	Y+3, r24	; 0x03
    153a:	c3 c0       	rjmp	.+390    	; 0x16c2 <atomQueueGet+0x1c0>
    }
    else
    {
        /* Protect access to the queue object and OS queues */
        CRITICAL_START ();
    153c:	ef e5       	ldi	r30, 0x5F	; 95
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	8c 83       	std	Y+4, r24	; 0x04
    1544:	f8 94       	cli

        /* If no messages on the queue, block the calling thread */
        if (qptr->num_msgs_stored == 0)
    1546:	ed 89       	ldd	r30, Y+21	; 0x15
    1548:	fe 89       	ldd	r31, Y+22	; 0x16
    154a:	86 89       	ldd	r24, Z+22	; 0x16
    154c:	97 89       	ldd	r25, Z+23	; 0x17
    154e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1550:	b1 8d       	ldd	r27, Z+25	; 0x19
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	a1 05       	cpc	r26, r1
    1556:	b1 05       	cpc	r27, r1
    1558:	09 f0       	breq	.+2      	; 0x155c <atomQueueGet+0x5a>
    155a:	a0 c0       	rjmp	.+320    	; 0x169c <atomQueueGet+0x19a>
        {
            /* If called with timeout >= 0, we should block */
            if (timeout >= 0)
    155c:	8f 89       	ldd	r24, Y+23	; 0x17
    155e:	98 8d       	ldd	r25, Y+24	; 0x18
    1560:	a9 8d       	ldd	r26, Y+25	; 0x19
    1562:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1564:	bb 23       	and	r27, r27
    1566:	0c f4       	brge	.+2      	; 0x156a <atomQueueGet+0x68>
    1568:	92 c0       	rjmp	.+292    	; 0x168e <atomQueueGet+0x18c>
            {
                /* Queue is empty, block the calling thread */

                /* Get the current TCB */
                curr_tcb_ptr = atomCurrentContext();
    156a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <atomCurrentContext>
    156e:	9a 83       	std	Y+2, r25	; 0x02
    1570:	89 83       	std	Y+1, r24	; 0x01

                /* Check we are actually in thread context */
                if (curr_tcb_ptr)
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	09 f4       	brne	.+2      	; 0x157c <atomQueueGet+0x7a>
    157a:	82 c0       	rjmp	.+260    	; 0x1680 <atomQueueGet+0x17e>
                {
                    /* Add current thread to the list suspended on receives */
                    if (tcbEnqueuePriority (&qptr->getSuspQ, curr_tcb_ptr) == ATOM_OK)
    157c:	8d 89       	ldd	r24, Y+21	; 0x15
    157e:	9e 89       	ldd	r25, Y+22	; 0x16
    1580:	02 96       	adiw	r24, 0x02	; 2
    1582:	29 81       	ldd	r18, Y+1	; 0x01
    1584:	3a 81       	ldd	r19, Y+2	; 0x02
    1586:	b9 01       	movw	r22, r18
    1588:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>
    158c:	88 23       	and	r24, r24
    158e:	09 f0       	breq	.+2      	; 0x1592 <atomQueueGet+0x90>
    1590:	70 c0       	rjmp	.+224    	; 0x1672 <atomQueueGet+0x170>
                    {
                        /* Set suspended status for the current thread */
                        curr_tcb_ptr->suspended = TRUE;
    1592:	e9 81       	ldd	r30, Y+1	; 0x01
    1594:	fa 81       	ldd	r31, Y+2	; 0x02
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	85 87       	std	Z+13, r24	; 0x0d

                        /* Track errors */
                        status = ATOM_OK;
    159a:	1b 82       	std	Y+3, r1	; 0x03

                        /* Register a timer callback if requested */
                        if (timeout)
    159c:	8f 89       	ldd	r24, Y+23	; 0x17
    159e:	98 8d       	ldd	r25, Y+24	; 0x18
    15a0:	a9 8d       	ldd	r26, Y+25	; 0x19
    15a2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	a1 05       	cpc	r26, r1
    15a8:	b1 05       	cpc	r27, r1
    15aa:	d9 f1       	breq	.+118    	; 0x1622 <atomQueueGet+0x120>
                        {
                            /**
                             * Fill out the data needed by the callback to
                             * wake us up.
                             */
                            timer_data.tcb_ptr = curr_tcb_ptr;
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	9e 83       	std	Y+6, r25	; 0x06
    15b2:	8d 83       	std	Y+5, r24	; 0x05
                            timer_data.queue_ptr = qptr;
    15b4:	8d 89       	ldd	r24, Y+21	; 0x15
    15b6:	9e 89       	ldd	r25, Y+22	; 0x16
    15b8:	98 87       	std	Y+8, r25	; 0x08
    15ba:	8f 83       	std	Y+7, r24	; 0x07
                            timer_data.suspQ = &qptr->getSuspQ;
    15bc:	8d 89       	ldd	r24, Y+21	; 0x15
    15be:	9e 89       	ldd	r25, Y+22	; 0x16
    15c0:	02 96       	adiw	r24, 0x02	; 2
    15c2:	9a 87       	std	Y+10, r25	; 0x0a
    15c4:	89 87       	std	Y+9, r24	; 0x09

                            /* Fill out the timer callback request structure */
                            timer_cb.cb_func = atomQueueTimerCallback;
    15c6:	89 e5       	ldi	r24, 0x59	; 89
    15c8:	9c e0       	ldi	r25, 0x0C	; 12
    15ca:	9c 87       	std	Y+12, r25	; 0x0c
    15cc:	8b 87       	std	Y+11, r24	; 0x0b
                            timer_cb.cb_data = (POINTER)&timer_data;
    15ce:	ce 01       	movw	r24, r28
    15d0:	05 96       	adiw	r24, 0x05	; 5
    15d2:	9e 87       	std	Y+14, r25	; 0x0e
    15d4:	8d 87       	std	Y+13, r24	; 0x0d
                            timer_cb.cb_ticks = timeout;
    15d6:	8f 89       	ldd	r24, Y+23	; 0x17
    15d8:	98 8d       	ldd	r25, Y+24	; 0x18
    15da:	a9 8d       	ldd	r26, Y+25	; 0x19
    15dc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    15de:	8f 87       	std	Y+15, r24	; 0x0f
    15e0:	98 8b       	std	Y+16, r25	; 0x10
    15e2:	a9 8b       	std	Y+17, r26	; 0x11
    15e4:	ba 8b       	std	Y+18, r27	; 0x12
                            /**
                             * Store the timer details in the TCB so that we
                             * can cancel the timer callback if the queue is
                             * put before the timeout occurs.
                             */
                            curr_tcb_ptr->suspend_timo_cb = &timer_cb;
    15e6:	e9 81       	ldd	r30, Y+1	; 0x01
    15e8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ea:	ce 01       	movw	r24, r28
    15ec:	0b 96       	adiw	r24, 0x0b	; 11
    15ee:	90 8b       	std	Z+16, r25	; 0x10
    15f0:	87 87       	std	Z+15, r24	; 0x0f

                            /* Register a callback on timeout */
                            if (atomTimerRegister (&timer_cb) != ATOM_OK)
    15f2:	ce 01       	movw	r24, r28
    15f4:	0b 96       	adiw	r24, 0x0b	; 11
    15f6:	0e 94 3b 10 	call	0x2076	; 0x2076 <atomTimerRegister>
    15fa:	88 23       	and	r24, r24
    15fc:	b1 f0       	breq	.+44     	; 0x162a <atomQueueGet+0x128>
                            {
                                /* Timer registration failed */
                                status = ATOM_ERR_TIMER;
    15fe:	8d ec       	ldi	r24, 0xCD	; 205
    1600:	8b 83       	std	Y+3, r24	; 0x03

                                /* Clean up and return to the caller */
                                (void)tcbDequeueEntry (&qptr->getSuspQ, curr_tcb_ptr);
    1602:	8d 89       	ldd	r24, Y+21	; 0x15
    1604:	9e 89       	ldd	r25, Y+22	; 0x16
    1606:	02 96       	adiw	r24, 0x02	; 2
    1608:	29 81       	ldd	r18, Y+1	; 0x01
    160a:	3a 81       	ldd	r19, Y+2	; 0x02
    160c:	b9 01       	movw	r22, r18
    160e:	0e 94 57 06 	call	0xcae	; 0xcae <tcbDequeueEntry>
                                curr_tcb_ptr->suspended = FALSE;
    1612:	e9 81       	ldd	r30, Y+1	; 0x01
    1614:	fa 81       	ldd	r31, Y+2	; 0x02
    1616:	15 86       	std	Z+13, r1	; 0x0d
                                curr_tcb_ptr->suspend_timo_cb = NULL;
    1618:	e9 81       	ldd	r30, Y+1	; 0x01
    161a:	fa 81       	ldd	r31, Y+2	; 0x02
    161c:	10 8a       	std	Z+16, r1	; 0x10
    161e:	17 86       	std	Z+15, r1	; 0x0f
    1620:	04 c0       	rjmp	.+8      	; 0x162a <atomQueueGet+0x128>

                        /* Set no timeout requested */
                        else
                        {
                            /* No need to cancel timeouts on this one */
                            curr_tcb_ptr->suspend_timo_cb = NULL;
    1622:	e9 81       	ldd	r30, Y+1	; 0x01
    1624:	fa 81       	ldd	r31, Y+2	; 0x02
    1626:	10 8a       	std	Z+16, r1	; 0x10
    1628:	17 86       	std	Z+15, r1	; 0x0f
                        }

                        /* Exit critical region */
                        CRITICAL_END ();
    162a:	ef e5       	ldi	r30, 0x5F	; 95
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	80 83       	st	Z, r24

                        /* Check no errors occurred */
                        if (status == ATOM_OK)
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	88 23       	and	r24, r24
    1636:	09 f0       	breq	.+2      	; 0x163a <atomQueueGet+0x138>
    1638:	44 c0       	rjmp	.+136    	; 0x16c2 <atomQueueGet+0x1c0>
                            /**
                             * Current thread now blocking, schedule in a new
                             * one. We already know we are in thread context
                             * so can call the scheduler from here.
                             */
                            atomSched (FALSE);
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	0e 94 6f 03 	call	0x6de	; 0x6de <atomSched>
                            /**
                             * Normal atomQueuePut() wakeups will set ATOM_OK
                             * status, while timeouts will set ATOM_TIMEOUT
                             * and queue deletions will set ATOM_ERR_DELETED.
                             */
                            status = curr_tcb_ptr->suspend_wake_status;
    1640:	e9 81       	ldd	r30, Y+1	; 0x01
    1642:	fa 81       	ldd	r31, Y+2	; 0x02
    1644:	86 85       	ldd	r24, Z+14	; 0x0e
    1646:	8b 83       	std	Y+3, r24	; 0x03
                             * put on the queue and we can now copy it out.
                             * Otherwise we were woken because we timed out
                             * waiting for a message, or the queue was
                             * deleted, so we should just quit.
                             */
                            if (status == ATOM_OK)
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	88 23       	and	r24, r24
    164c:	d1 f5       	brne	.+116    	; 0x16c2 <atomQueueGet+0x1c0>
                            {
                                /* Enter critical region */
                                CRITICAL_START();
    164e:	ef e5       	ldi	r30, 0x5F	; 95
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	8c 83       	std	Y+4, r24	; 0x04
    1656:	f8 94       	cli

                                /* Copy the message out of the queue */
                                status = queue_remove (qptr, msgptr);
    1658:	8d 89       	ldd	r24, Y+21	; 0x15
    165a:	9e 89       	ldd	r25, Y+22	; 0x16
    165c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    165e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1660:	b9 01       	movw	r22, r18
    1662:	0e 94 9d 0c 	call	0x193a	; 0x193a <queue_remove>
    1666:	8b 83       	std	Y+3, r24	; 0x03

                                /* Exit critical region */
                                CRITICAL_END();
    1668:	ef e5       	ldi	r30, 0x5F	; 95
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	8c 81       	ldd	r24, Y+4	; 0x04
    166e:	80 83       	st	Z, r24
    1670:	28 c0       	rjmp	.+80     	; 0x16c2 <atomQueueGet+0x1c0>
                        }
                    }
                    else
                    {
                        /* There was an error putting this thread on the suspend list */
                        CRITICAL_END ();
    1672:	ef e5       	ldi	r30, 0x5F	; 95
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	80 83       	st	Z, r24
                        status = ATOM_ERR_QUEUE;
    167a:	8c ec       	ldi	r24, 0xCC	; 204
    167c:	8b 83       	std	Y+3, r24	; 0x03
    167e:	21 c0       	rjmp	.+66     	; 0x16c2 <atomQueueGet+0x1c0>
                    }
                }
                else
                {
                    /* Not currently in thread context, can't suspend */
                    CRITICAL_END ();
    1680:	ef e5       	ldi	r30, 0x5F	; 95
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	8c 81       	ldd	r24, Y+4	; 0x04
    1686:	80 83       	st	Z, r24
                    status = ATOM_ERR_CONTEXT;
    1688:	88 ec       	ldi	r24, 0xC8	; 200
    168a:	8b 83       	std	Y+3, r24	; 0x03
    168c:	1a c0       	rjmp	.+52     	; 0x16c2 <atomQueueGet+0x1c0>
                }
            }
            else
            {
                /* timeout == -1, requested not to block and queue is empty */
                CRITICAL_END();
    168e:	ef e5       	ldi	r30, 0x5F	; 95
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	80 83       	st	Z, r24
                status = ATOM_WOULDBLOCK;
    1696:	83 e0       	ldi	r24, 0x03	; 3
    1698:	8b 83       	std	Y+3, r24	; 0x03
    169a:	13 c0       	rjmp	.+38     	; 0x16c2 <atomQueueGet+0x1c0>
            }
        }
        else
        {
            /* No need to block, there is a message to copy out of the queue */
            status = queue_remove (qptr, msgptr);
    169c:	8d 89       	ldd	r24, Y+21	; 0x15
    169e:	9e 89       	ldd	r25, Y+22	; 0x16
    16a0:	2b 8d       	ldd	r18, Y+27	; 0x1b
    16a2:	3c 8d       	ldd	r19, Y+28	; 0x1c
    16a4:	b9 01       	movw	r22, r18
    16a6:	0e 94 9d 0c 	call	0x193a	; 0x193a <queue_remove>
    16aa:	8b 83       	std	Y+3, r24	; 0x03

            /* Exit critical region */
            CRITICAL_END ();
    16ac:	ef e5       	ldi	r30, 0x5F	; 95
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	80 83       	st	Z, r24
            /**
             * The scheduler may now make a policy decision to thread
             * switch if we are currently in thread context. If we are
             * in interrupt context it will be handled by atomIntExit().
             */
            if (atomCurrentContext())
    16b4:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <atomCurrentContext>
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	19 f0       	breq	.+6      	; 0x16c2 <atomQueueGet+0x1c0>
                atomSched (FALSE);
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	0e 94 6f 03 	call	0x6de	; 0x6de <atomSched>
        }
    }

    return (status);
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    16c4:	6c 96       	adiw	r28, 0x1c	; 28
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <atomQueuePut>:
 * @retval ATOM_ERR_PARAM Bad parameter
 * @retval ATOM_ERR_QUEUE Problem putting the thread on the suspend queue
 * @retval ATOM_ERR_TIMER Problem registering the timeout
 */
uint8_t atomQueuePut (ATOM_QUEUE *qptr, int32_t timeout, uint8_t *msgptr)
{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	6c 97       	sbiw	r28, 0x1c	; 28
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	9e 8b       	std	Y+22, r25	; 0x16
    16ec:	8d 8b       	std	Y+21, r24	; 0x15
    16ee:	4f 8b       	std	Y+23, r20	; 0x17
    16f0:	58 8f       	std	Y+24, r21	; 0x18
    16f2:	69 8f       	std	Y+25, r22	; 0x19
    16f4:	7a 8f       	std	Y+26, r23	; 0x1a
    16f6:	3c 8f       	std	Y+28, r19	; 0x1c
    16f8:	2b 8f       	std	Y+27, r18	; 0x1b
    QUEUE_TIMER timer_data;
    ATOM_TIMER timer_cb;
    ATOM_TCB *curr_tcb_ptr;

    /* Check parameters */
    if ((qptr == NULL) || (msgptr == NULL))
    16fa:	8d 89       	ldd	r24, Y+21	; 0x15
    16fc:	9e 89       	ldd	r25, Y+22	; 0x16
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	21 f0       	breq	.+8      	; 0x170a <atomQueuePut+0x34>
    1702:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1704:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	19 f4       	brne	.+6      	; 0x1710 <atomQueuePut+0x3a>
    {
        /* Bad pointer */
        status = ATOM_ERR_PARAM;
    170a:	89 ec       	ldi	r24, 0xC9	; 201
    170c:	8b 83       	std	Y+3, r24	; 0x03
    170e:	c7 c0       	rjmp	.+398    	; 0x189e <atomQueuePut+0x1c8>
    }
    else
    {
        /* Protect access to the queue object and OS queues */
        CRITICAL_START ();
    1710:	ef e5       	ldi	r30, 0x5F	; 95
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	8c 83       	std	Y+4, r24	; 0x04
    1718:	f8 94       	cli

        /* If queue is full, block the calling thread */
        if (qptr->num_msgs_stored == qptr->max_num_msgs)
    171a:	ed 89       	ldd	r30, Y+21	; 0x15
    171c:	fe 89       	ldd	r31, Y+22	; 0x16
    171e:	26 89       	ldd	r18, Z+22	; 0x16
    1720:	37 89       	ldd	r19, Z+23	; 0x17
    1722:	40 8d       	ldd	r20, Z+24	; 0x18
    1724:	51 8d       	ldd	r21, Z+25	; 0x19
    1726:	ed 89       	ldd	r30, Y+21	; 0x15
    1728:	fe 89       	ldd	r31, Y+22	; 0x16
    172a:	82 85       	ldd	r24, Z+10	; 0x0a
    172c:	93 85       	ldd	r25, Z+11	; 0x0b
    172e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1730:	b5 85       	ldd	r27, Z+13	; 0x0d
    1732:	28 17       	cp	r18, r24
    1734:	39 07       	cpc	r19, r25
    1736:	4a 07       	cpc	r20, r26
    1738:	5b 07       	cpc	r21, r27
    173a:	09 f0       	breq	.+2      	; 0x173e <atomQueuePut+0x68>
    173c:	9d c0       	rjmp	.+314    	; 0x1878 <atomQueuePut+0x1a2>
        {
            /* If called with timeout >= 0, we should block */
            if (timeout >= 0)
    173e:	8f 89       	ldd	r24, Y+23	; 0x17
    1740:	98 8d       	ldd	r25, Y+24	; 0x18
    1742:	a9 8d       	ldd	r26, Y+25	; 0x19
    1744:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1746:	bb 23       	and	r27, r27
    1748:	0c f4       	brge	.+2      	; 0x174c <atomQueuePut+0x76>
    174a:	8f c0       	rjmp	.+286    	; 0x186a <atomQueuePut+0x194>
            {
                /* Queue is full, block the calling thread */

                /* Get the current TCB */
                curr_tcb_ptr = atomCurrentContext();
    174c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <atomCurrentContext>
    1750:	9a 83       	std	Y+2, r25	; 0x02
    1752:	89 83       	std	Y+1, r24	; 0x01

                /* Check we are actually in thread context */
                if (curr_tcb_ptr)
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	9a 81       	ldd	r25, Y+2	; 0x02
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	09 f4       	brne	.+2      	; 0x175e <atomQueuePut+0x88>
    175c:	7f c0       	rjmp	.+254    	; 0x185c <atomQueuePut+0x186>
                {
                    /* Add current thread to the suspend list on sends */
                    if (tcbEnqueuePriority (&qptr->putSuspQ, curr_tcb_ptr) == ATOM_OK)
    175e:	8d 89       	ldd	r24, Y+21	; 0x15
    1760:	9e 89       	ldd	r25, Y+22	; 0x16
    1762:	29 81       	ldd	r18, Y+1	; 0x01
    1764:	3a 81       	ldd	r19, Y+2	; 0x02
    1766:	b9 01       	movw	r22, r18
    1768:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>
    176c:	88 23       	and	r24, r24
    176e:	09 f0       	breq	.+2      	; 0x1772 <atomQueuePut+0x9c>
    1770:	6e c0       	rjmp	.+220    	; 0x184e <atomQueuePut+0x178>
                    {
                        /* Set suspended status for the current thread */
                        curr_tcb_ptr->suspended = TRUE;
    1772:	e9 81       	ldd	r30, Y+1	; 0x01
    1774:	fa 81       	ldd	r31, Y+2	; 0x02
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	85 87       	std	Z+13, r24	; 0x0d

                        /* Track errors */
                        status = ATOM_OK;
    177a:	1b 82       	std	Y+3, r1	; 0x03

                        /* Register a timer callback if requested */
                        if (timeout)
    177c:	8f 89       	ldd	r24, Y+23	; 0x17
    177e:	98 8d       	ldd	r25, Y+24	; 0x18
    1780:	a9 8d       	ldd	r26, Y+25	; 0x19
    1782:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	a1 05       	cpc	r26, r1
    1788:	b1 05       	cpc	r27, r1
    178a:	c9 f1       	breq	.+114    	; 0x17fe <atomQueuePut+0x128>
                        {
                            /**
                             * Fill out the data needed by the callback to
                             * wake us up.
                             */
                            timer_data.tcb_ptr = curr_tcb_ptr;
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	9a 81       	ldd	r25, Y+2	; 0x02
    1790:	9e 83       	std	Y+6, r25	; 0x06
    1792:	8d 83       	std	Y+5, r24	; 0x05
                            timer_data.queue_ptr = qptr;
    1794:	8d 89       	ldd	r24, Y+21	; 0x15
    1796:	9e 89       	ldd	r25, Y+22	; 0x16
    1798:	98 87       	std	Y+8, r25	; 0x08
    179a:	8f 83       	std	Y+7, r24	; 0x07
                            timer_data.suspQ = &qptr->putSuspQ;
    179c:	8d 89       	ldd	r24, Y+21	; 0x15
    179e:	9e 89       	ldd	r25, Y+22	; 0x16
    17a0:	9a 87       	std	Y+10, r25	; 0x0a
    17a2:	89 87       	std	Y+9, r24	; 0x09


                            /* Fill out the timer callback request structure */
                            timer_cb.cb_func = atomQueueTimerCallback;
    17a4:	89 e5       	ldi	r24, 0x59	; 89
    17a6:	9c e0       	ldi	r25, 0x0C	; 12
    17a8:	9c 87       	std	Y+12, r25	; 0x0c
    17aa:	8b 87       	std	Y+11, r24	; 0x0b
                            timer_cb.cb_data = (POINTER)&timer_data;
    17ac:	ce 01       	movw	r24, r28
    17ae:	05 96       	adiw	r24, 0x05	; 5
    17b0:	9e 87       	std	Y+14, r25	; 0x0e
    17b2:	8d 87       	std	Y+13, r24	; 0x0d
                            timer_cb.cb_ticks = timeout;
    17b4:	8f 89       	ldd	r24, Y+23	; 0x17
    17b6:	98 8d       	ldd	r25, Y+24	; 0x18
    17b8:	a9 8d       	ldd	r26, Y+25	; 0x19
    17ba:	ba 8d       	ldd	r27, Y+26	; 0x1a
    17bc:	8f 87       	std	Y+15, r24	; 0x0f
    17be:	98 8b       	std	Y+16, r25	; 0x10
    17c0:	a9 8b       	std	Y+17, r26	; 0x11
    17c2:	ba 8b       	std	Y+18, r27	; 0x12
                             * Store the timer details in the TCB so that we
                             * can cancel the timer callback if a message is
                             * removed from the queue before the timeout
                             * occurs.
                             */
                            curr_tcb_ptr->suspend_timo_cb = &timer_cb;
    17c4:	e9 81       	ldd	r30, Y+1	; 0x01
    17c6:	fa 81       	ldd	r31, Y+2	; 0x02
    17c8:	ce 01       	movw	r24, r28
    17ca:	0b 96       	adiw	r24, 0x0b	; 11
    17cc:	90 8b       	std	Z+16, r25	; 0x10
    17ce:	87 87       	std	Z+15, r24	; 0x0f

                            /* Register a callback on timeout */
                            if (atomTimerRegister (&timer_cb) != ATOM_OK)
    17d0:	ce 01       	movw	r24, r28
    17d2:	0b 96       	adiw	r24, 0x0b	; 11
    17d4:	0e 94 3b 10 	call	0x2076	; 0x2076 <atomTimerRegister>
    17d8:	88 23       	and	r24, r24
    17da:	a9 f0       	breq	.+42     	; 0x1806 <atomQueuePut+0x130>
                            {
                                /* Timer registration failed */
                                status = ATOM_ERR_TIMER;
    17dc:	8d ec       	ldi	r24, 0xCD	; 205
    17de:	8b 83       	std	Y+3, r24	; 0x03

                                /* Clean up and return to the caller */
                                (void)tcbDequeueEntry (&qptr->putSuspQ, curr_tcb_ptr);
    17e0:	8d 89       	ldd	r24, Y+21	; 0x15
    17e2:	9e 89       	ldd	r25, Y+22	; 0x16
    17e4:	29 81       	ldd	r18, Y+1	; 0x01
    17e6:	3a 81       	ldd	r19, Y+2	; 0x02
    17e8:	b9 01       	movw	r22, r18
    17ea:	0e 94 57 06 	call	0xcae	; 0xcae <tcbDequeueEntry>
                                curr_tcb_ptr->suspended = FALSE;
    17ee:	e9 81       	ldd	r30, Y+1	; 0x01
    17f0:	fa 81       	ldd	r31, Y+2	; 0x02
    17f2:	15 86       	std	Z+13, r1	; 0x0d
                                curr_tcb_ptr->suspend_timo_cb = NULL;
    17f4:	e9 81       	ldd	r30, Y+1	; 0x01
    17f6:	fa 81       	ldd	r31, Y+2	; 0x02
    17f8:	10 8a       	std	Z+16, r1	; 0x10
    17fa:	17 86       	std	Z+15, r1	; 0x0f
    17fc:	04 c0       	rjmp	.+8      	; 0x1806 <atomQueuePut+0x130>

                        /* Set no timeout requested */
                        else
                        {
                            /* No need to cancel timeouts on this one */
                            curr_tcb_ptr->suspend_timo_cb = NULL;
    17fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1800:	fa 81       	ldd	r31, Y+2	; 0x02
    1802:	10 8a       	std	Z+16, r1	; 0x10
    1804:	17 86       	std	Z+15, r1	; 0x0f
                        }

                        /* Exit critical region */
                        CRITICAL_END ();
    1806:	ef e5       	ldi	r30, 0x5F	; 95
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	80 83       	st	Z, r24

                        /* Check timer registration was successful */
                        if (status == ATOM_OK)
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	88 23       	and	r24, r24
    1812:	09 f0       	breq	.+2      	; 0x1816 <atomQueuePut+0x140>
    1814:	44 c0       	rjmp	.+136    	; 0x189e <atomQueuePut+0x1c8>
                            /**
                             * Current thread now blocking, schedule in a new
                             * one. We already know we are in thread context
                             * so can call the scheduler from here.
                             */
                            atomSched (FALSE);
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	0e 94 6f 03 	call	0x6de	; 0x6de <atomSched>
                            /**
                             * Normal atomQueueGet() wakeups will set ATOM_OK
                             * status, while timeouts will set ATOM_TIMEOUT
                             * and queue deletions will set ATOM_ERR_DELETED.
                             */
                            status = curr_tcb_ptr->suspend_wake_status;
    181c:	e9 81       	ldd	r30, Y+1	; 0x01
    181e:	fa 81       	ldd	r31, Y+2	; 0x02
    1820:	86 85       	ldd	r24, Z+14	; 0x0e
    1822:	8b 83       	std	Y+3, r24	; 0x03
                             * removed from the queue and we can now add ours.
                             * Otherwise we were woken because we timed out
                             * waiting for a message, or the queue was
                             * deleted, so we should just quit.
                             */
                            if (status == ATOM_OK)
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	88 23       	and	r24, r24
    1828:	d1 f5       	brne	.+116    	; 0x189e <atomQueuePut+0x1c8>
                            {
                                /* Enter critical region */
                                CRITICAL_START();
    182a:	ef e5       	ldi	r30, 0x5F	; 95
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	8c 83       	std	Y+4, r24	; 0x04
    1832:	f8 94       	cli

                                /* Copy the message into the queue */
                                status = queue_insert (qptr, msgptr);
    1834:	8d 89       	ldd	r24, Y+21	; 0x15
    1836:	9e 89       	ldd	r25, Y+22	; 0x16
    1838:	2b 8d       	ldd	r18, Y+27	; 0x1b
    183a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    183c:	b9 01       	movw	r22, r18
    183e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <queue_insert>
    1842:	8b 83       	std	Y+3, r24	; 0x03

                                /* Exit critical region */
                                CRITICAL_END();
    1844:	ef e5       	ldi	r30, 0x5F	; 95
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	80 83       	st	Z, r24
    184c:	28 c0       	rjmp	.+80     	; 0x189e <atomQueuePut+0x1c8>
                        }
                    }
                    else
                    {
                        /* There was an error putting this thread on the suspend list */
                        CRITICAL_END ();
    184e:	ef e5       	ldi	r30, 0x5F	; 95
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	80 83       	st	Z, r24
                        status = ATOM_ERR_QUEUE;
    1856:	8c ec       	ldi	r24, 0xCC	; 204
    1858:	8b 83       	std	Y+3, r24	; 0x03
    185a:	21 c0       	rjmp	.+66     	; 0x189e <atomQueuePut+0x1c8>
                    }
                }
                else
                {
                    /* Not currently in thread context, can't suspend */
                    CRITICAL_END ();
    185c:	ef e5       	ldi	r30, 0x5F	; 95
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	8c 81       	ldd	r24, Y+4	; 0x04
    1862:	80 83       	st	Z, r24
                    status = ATOM_ERR_CONTEXT;
    1864:	88 ec       	ldi	r24, 0xC8	; 200
    1866:	8b 83       	std	Y+3, r24	; 0x03
    1868:	1a c0       	rjmp	.+52     	; 0x189e <atomQueuePut+0x1c8>
                }
            }
            else
            {
                /* timeout == -1, cannot block. Just return queue is full */
                CRITICAL_END();
    186a:	ef e5       	ldi	r30, 0x5F	; 95
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	80 83       	st	Z, r24
                status = ATOM_WOULDBLOCK;
    1872:	83 e0       	ldi	r24, 0x03	; 3
    1874:	8b 83       	std	Y+3, r24	; 0x03
    1876:	13 c0       	rjmp	.+38     	; 0x189e <atomQueuePut+0x1c8>
            }
        }
        else
        {
            /* No need to block, there is space to copy into the queue */
            status = queue_insert (qptr, msgptr);
    1878:	8d 89       	ldd	r24, Y+21	; 0x15
    187a:	9e 89       	ldd	r25, Y+22	; 0x16
    187c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    187e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1880:	b9 01       	movw	r22, r18
    1882:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <queue_insert>
    1886:	8b 83       	std	Y+3, r24	; 0x03

            /* Exit critical region */
            CRITICAL_END ();
    1888:	ef e5       	ldi	r30, 0x5F	; 95
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	8c 81       	ldd	r24, Y+4	; 0x04
    188e:	80 83       	st	Z, r24
            /**
             * The scheduler may now make a policy decision to thread
             * switch if we are currently in thread context. If we are
             * in interrupt context it will be handled by atomIntExit().
             */
            if (atomCurrentContext())
    1890:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <atomCurrentContext>
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	19 f0       	breq	.+6      	; 0x189e <atomQueuePut+0x1c8>
                atomSched (FALSE);
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	0e 94 6f 03 	call	0x6de	; 0x6de <atomSched>
        }
    }

    return (status);
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    18a0:	6c 96       	adiw	r28, 0x1c	; 28
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <atomQueueTimerCallback>:
 * queue details.
 *
 * @param[in] cb_data Pointer to a QUEUE_TIMER object
 */
static void atomQueueTimerCallback (POINTER cb_data)
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <atomQueueTimerCallback+0x6>
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <atomQueueTimerCallback+0x8>
    18ba:	0f 92       	push	r0
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	9d 83       	std	Y+5, r25	; 0x05
    18c2:	8c 83       	std	Y+4, r24	; 0x04
    QUEUE_TIMER *timer_data_ptr;
    CRITICAL_STORE;

    /* Get the QUEUE_TIMER structure pointer */
    timer_data_ptr = (QUEUE_TIMER *)cb_data;
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	9d 81       	ldd	r25, Y+5	; 0x05
    18c8:	9b 83       	std	Y+3, r25	; 0x03
    18ca:	8a 83       	std	Y+2, r24	; 0x02

    /* Check parameter is valid */
    if (timer_data_ptr)
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	9b 81       	ldd	r25, Y+3	; 0x03
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	59 f1       	breq	.+86     	; 0x192a <atomQueueTimerCallback+0x78>
    {
        /* Enter critical region */
        CRITICAL_START ();
    18d4:	ef e5       	ldi	r30, 0x5F	; 95
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	f8 94       	cli

        /* Set status to indicate to the waiting thread that it timed out */
        timer_data_ptr->tcb_ptr->suspend_wake_status = ATOM_TIMEOUT;
    18de:	ea 81       	ldd	r30, Y+2	; 0x02
    18e0:	fb 81       	ldd	r31, Y+3	; 0x03
    18e2:	01 90       	ld	r0, Z+
    18e4:	f0 81       	ld	r31, Z
    18e6:	e0 2d       	mov	r30, r0
    18e8:	82 e0       	ldi	r24, 0x02	; 2
    18ea:	86 87       	std	Z+14, r24	; 0x0e

        /* Flag as no timeout registered */
        timer_data_ptr->tcb_ptr->suspend_timo_cb = NULL;
    18ec:	ea 81       	ldd	r30, Y+2	; 0x02
    18ee:	fb 81       	ldd	r31, Y+3	; 0x03
    18f0:	01 90       	ld	r0, Z+
    18f2:	f0 81       	ld	r31, Z
    18f4:	e0 2d       	mov	r30, r0
    18f6:	10 8a       	std	Z+16, r1	; 0x10
    18f8:	17 86       	std	Z+15, r1	; 0x0f

        /**
         * Remove this thread from the queue's suspend list. Handles threads
         * suspended on the receive list as well as the send list.
         */
        (void)tcbDequeueEntry (timer_data_ptr->suspQ, timer_data_ptr->tcb_ptr);
    18fa:	ea 81       	ldd	r30, Y+2	; 0x02
    18fc:	fb 81       	ldd	r31, Y+3	; 0x03
    18fe:	84 81       	ldd	r24, Z+4	; 0x04
    1900:	95 81       	ldd	r25, Z+5	; 0x05
    1902:	ea 81       	ldd	r30, Y+2	; 0x02
    1904:	fb 81       	ldd	r31, Y+3	; 0x03
    1906:	20 81       	ld	r18, Z
    1908:	31 81       	ldd	r19, Z+1	; 0x01
    190a:	b9 01       	movw	r22, r18
    190c:	0e 94 57 06 	call	0xcae	; 0xcae <tcbDequeueEntry>

        /* Put the thread on the ready queue */
        (void)tcbEnqueuePriority (&tcbReadyQ, timer_data_ptr->tcb_ptr);
    1910:	ea 81       	ldd	r30, Y+2	; 0x02
    1912:	fb 81       	ldd	r31, Y+3	; 0x03
    1914:	20 81       	ld	r18, Z
    1916:	31 81       	ldd	r19, Z+1	; 0x01
    1918:	83 e5       	ldi	r24, 0x53	; 83
    191a:	91 e0       	ldi	r25, 0x01	; 1
    191c:	b9 01       	movw	r22, r18
    191e:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>

        /* Exit critical region */
        CRITICAL_END ();
    1922:	ef e5       	ldi	r30, 0x5F	; 95
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	80 83       	st	Z, r24
        /**
         * Note that we don't call the scheduler now as it will be called
         * when we exit the ISR by atomIntExit().
         */
    }
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <queue_remove>:
 * @retval ATOM_ERR_PARAM Bad parameter
 * @retval ATOM_ERR_QUEUE Problem putting a thread on the ready queue
 * @retval ATOM_ERR_TIMER Problem cancelling a timeout
 */
static uint8_t queue_remove (ATOM_QUEUE *qptr, uint8_t* msgptr)
{
    193a:	ef 92       	push	r14
    193c:	ff 92       	push	r15
    193e:	0f 93       	push	r16
    1940:	1f 93       	push	r17
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	27 97       	sbiw	r28, 0x07	; 7
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	9d 83       	std	Y+5, r25	; 0x05
    1958:	8c 83       	std	Y+4, r24	; 0x04
    195a:	7f 83       	std	Y+7, r23	; 0x07
    195c:	6e 83       	std	Y+6, r22	; 0x06
    uint8_t status;
    ATOM_TCB *tcb_ptr;

    /* Check parameters */
    if ((qptr == NULL) || (msgptr == NULL))
    195e:	8c 81       	ldd	r24, Y+4	; 0x04
    1960:	9d 81       	ldd	r25, Y+5	; 0x05
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	21 f0       	breq	.+8      	; 0x196e <queue_remove+0x34>
    1966:	8e 81       	ldd	r24, Y+6	; 0x06
    1968:	9f 81       	ldd	r25, Y+7	; 0x07
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	19 f4       	brne	.+6      	; 0x1974 <queue_remove+0x3a>
    {
        /* Bad pointer */
        status = ATOM_ERR_PARAM;
    196e:	89 ec       	ldi	r24, 0xC9	; 201
    1970:	8b 83       	std	Y+3, r24	; 0x03
    1972:	93 c0       	rjmp	.+294    	; 0x1a9a <queue_remove+0x160>
    }
    else
    {
        /* There is a message on the queue, copy it out */
        memcpy (msgptr, (qptr->buff_ptr + qptr->remove_index), qptr->unit_size);
    1974:	ec 81       	ldd	r30, Y+4	; 0x04
    1976:	fd 81       	ldd	r31, Y+5	; 0x05
    1978:	24 81       	ldd	r18, Z+4	; 0x04
    197a:	35 81       	ldd	r19, Z+5	; 0x05
    197c:	ec 81       	ldd	r30, Y+4	; 0x04
    197e:	fd 81       	ldd	r31, Y+5	; 0x05
    1980:	82 89       	ldd	r24, Z+18	; 0x12
    1982:	93 89       	ldd	r25, Z+19	; 0x13
    1984:	a4 89       	ldd	r26, Z+20	; 0x14
    1986:	b5 89       	ldd	r27, Z+21	; 0x15
    1988:	a9 01       	movw	r20, r18
    198a:	48 0f       	add	r20, r24
    198c:	59 1f       	adc	r21, r25
    198e:	ec 81       	ldd	r30, Y+4	; 0x04
    1990:	fd 81       	ldd	r31, Y+5	; 0x05
    1992:	86 81       	ldd	r24, Z+6	; 0x06
    1994:	97 81       	ldd	r25, Z+7	; 0x07
    1996:	a0 85       	ldd	r26, Z+8	; 0x08
    1998:	b1 85       	ldd	r27, Z+9	; 0x09
    199a:	9c 01       	movw	r18, r24
    199c:	8e 81       	ldd	r24, Y+6	; 0x06
    199e:	9f 81       	ldd	r25, Y+7	; 0x07
    19a0:	ba 01       	movw	r22, r20
    19a2:	a9 01       	movw	r20, r18
    19a4:	0e 94 47 13 	call	0x268e	; 0x268e <memcpy>
        qptr->remove_index += qptr->unit_size;
    19a8:	ec 81       	ldd	r30, Y+4	; 0x04
    19aa:	fd 81       	ldd	r31, Y+5	; 0x05
    19ac:	22 89       	ldd	r18, Z+18	; 0x12
    19ae:	33 89       	ldd	r19, Z+19	; 0x13
    19b0:	44 89       	ldd	r20, Z+20	; 0x14
    19b2:	55 89       	ldd	r21, Z+21	; 0x15
    19b4:	ec 81       	ldd	r30, Y+4	; 0x04
    19b6:	fd 81       	ldd	r31, Y+5	; 0x05
    19b8:	86 81       	ldd	r24, Z+6	; 0x06
    19ba:	97 81       	ldd	r25, Z+7	; 0x07
    19bc:	a0 85       	ldd	r26, Z+8	; 0x08
    19be:	b1 85       	ldd	r27, Z+9	; 0x09
    19c0:	82 0f       	add	r24, r18
    19c2:	93 1f       	adc	r25, r19
    19c4:	a4 1f       	adc	r26, r20
    19c6:	b5 1f       	adc	r27, r21
    19c8:	ec 81       	ldd	r30, Y+4	; 0x04
    19ca:	fd 81       	ldd	r31, Y+5	; 0x05
    19cc:	82 8b       	std	Z+18, r24	; 0x12
    19ce:	93 8b       	std	Z+19, r25	; 0x13
    19d0:	a4 8b       	std	Z+20, r26	; 0x14
    19d2:	b5 8b       	std	Z+21, r27	; 0x15
        qptr->num_msgs_stored--;
    19d4:	ec 81       	ldd	r30, Y+4	; 0x04
    19d6:	fd 81       	ldd	r31, Y+5	; 0x05
    19d8:	86 89       	ldd	r24, Z+22	; 0x16
    19da:	97 89       	ldd	r25, Z+23	; 0x17
    19dc:	a0 8d       	ldd	r26, Z+24	; 0x18
    19de:	b1 8d       	ldd	r27, Z+25	; 0x19
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	a1 09       	sbc	r26, r1
    19e4:	b1 09       	sbc	r27, r1
    19e6:	ec 81       	ldd	r30, Y+4	; 0x04
    19e8:	fd 81       	ldd	r31, Y+5	; 0x05
    19ea:	86 8b       	std	Z+22, r24	; 0x16
    19ec:	97 8b       	std	Z+23, r25	; 0x17
    19ee:	a0 8f       	std	Z+24, r26	; 0x18
    19f0:	b1 8f       	std	Z+25, r27	; 0x19

        /* Check if the remove index should now wrap to the beginning */
        if (qptr->remove_index >= (qptr->unit_size * qptr->max_num_msgs))
    19f2:	ec 81       	ldd	r30, Y+4	; 0x04
    19f4:	fd 81       	ldd	r31, Y+5	; 0x05
    19f6:	e2 88       	ldd	r14, Z+18	; 0x12
    19f8:	f3 88       	ldd	r15, Z+19	; 0x13
    19fa:	04 89       	ldd	r16, Z+20	; 0x14
    19fc:	15 89       	ldd	r17, Z+21	; 0x15
    19fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1a00:	fd 81       	ldd	r31, Y+5	; 0x05
    1a02:	86 81       	ldd	r24, Z+6	; 0x06
    1a04:	97 81       	ldd	r25, Z+7	; 0x07
    1a06:	a0 85       	ldd	r26, Z+8	; 0x08
    1a08:	b1 85       	ldd	r27, Z+9	; 0x09
    1a0a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a0c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a0e:	22 85       	ldd	r18, Z+10	; 0x0a
    1a10:	33 85       	ldd	r19, Z+11	; 0x0b
    1a12:	44 85       	ldd	r20, Z+12	; 0x0c
    1a14:	55 85       	ldd	r21, Z+13	; 0x0d
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	0e 94 01 13 	call	0x2602	; 0x2602 <__mulsi3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	e8 16       	cp	r14, r24
    1a24:	f9 06       	cpc	r15, r25
    1a26:	0a 07       	cpc	r16, r26
    1a28:	1b 07       	cpc	r17, r27
    1a2a:	30 f0       	brcs	.+12     	; 0x1a38 <queue_remove+0xfe>
            qptr->remove_index = 0;
    1a2c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a2e:	fd 81       	ldd	r31, Y+5	; 0x05
    1a30:	12 8a       	std	Z+18, r1	; 0x12
    1a32:	13 8a       	std	Z+19, r1	; 0x13
    1a34:	14 8a       	std	Z+20, r1	; 0x14
    1a36:	15 8a       	std	Z+21, r1	; 0x15
        /**
         * If there are threads waiting to send, wake one up now. Waiting
         * threads are woken up in priority order, with same-priority
         * threads woken up in FIFO order.
         */
        tcb_ptr = tcbDequeueHead (&qptr->putSuspQ);
    1a38:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3c:	0e 94 0f 06 	call	0xc1e	; 0xc1e <tcbDequeueHead>
    1a40:	9a 83       	std	Y+2, r25	; 0x02
    1a42:	89 83       	std	Y+1, r24	; 0x01
        if (tcb_ptr)
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	9a 81       	ldd	r25, Y+2	; 0x02
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	31 f1       	breq	.+76     	; 0x1a98 <queue_remove+0x15e>
        {
            /* Move the waiting thread to the ready queue */
            if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) == ATOM_OK)
    1a4c:	83 e5       	ldi	r24, 0x53	; 83
    1a4e:	91 e0       	ldi	r25, 0x01	; 1
    1a50:	29 81       	ldd	r18, Y+1	; 0x01
    1a52:	3a 81       	ldd	r19, Y+2	; 0x02
    1a54:	b9 01       	movw	r22, r18
    1a56:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>
    1a5a:	88 23       	and	r24, r24
    1a5c:	d1 f4       	brne	.+52     	; 0x1a92 <queue_remove+0x158>
            {
                /* Set OK status to be returned to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_OK;
    1a5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a60:	fa 81       	ldd	r31, Y+2	; 0x02
    1a62:	16 86       	std	Z+14, r1	; 0x0e

                /* If there's a timeout on this suspension, cancel it */
                if ((tcb_ptr->suspend_timo_cb != NULL)
    1a64:	e9 81       	ldd	r30, Y+1	; 0x01
    1a66:	fa 81       	ldd	r31, Y+2	; 0x02
    1a68:	87 85       	ldd	r24, Z+15	; 0x0f
    1a6a:	90 89       	ldd	r25, Z+16	; 0x10
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	59 f0       	breq	.+22     	; 0x1a86 <queue_remove+0x14c>
    1a70:	e9 81       	ldd	r30, Y+1	; 0x01
    1a72:	fa 81       	ldd	r31, Y+2	; 0x02
    1a74:	87 85       	ldd	r24, Z+15	; 0x0f
    1a76:	90 89       	ldd	r25, Z+16	; 0x10
    1a78:	0e 94 8b 10 	call	0x2116	; 0x2116 <atomTimerCancel>
    1a7c:	88 23       	and	r24, r24
    1a7e:	19 f0       	breq	.+6      	; 0x1a86 <queue_remove+0x14c>
                    && (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK))
                {
                    /* There was a problem cancelling a timeout */
                    status = ATOM_ERR_TIMER;
    1a80:	8d ec       	ldi	r24, 0xCD	; 205
    1a82:	8b 83       	std	Y+3, r24	; 0x03
    1a84:	0a c0       	rjmp	.+20     	; 0x1a9a <queue_remove+0x160>
                }
                else
                {
                    /* Flag as no timeout registered */
                    tcb_ptr->suspend_timo_cb = NULL;
    1a86:	e9 81       	ldd	r30, Y+1	; 0x01
    1a88:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8a:	10 8a       	std	Z+16, r1	; 0x10
    1a8c:	17 86       	std	Z+15, r1	; 0x0f

                    /* Successful */
                    status = ATOM_OK;
    1a8e:	1b 82       	std	Y+3, r1	; 0x03
    1a90:	04 c0       	rjmp	.+8      	; 0x1a9a <queue_remove+0x160>
            {
                /**
                 * There was a problem putting the thread on the ready
                 * queue.
                 */
                status = ATOM_ERR_QUEUE;
    1a92:	8c ec       	ldi	r24, 0xCC	; 204
    1a94:	8b 83       	std	Y+3, r24	; 0x03
    1a96:	01 c0       	rjmp	.+2      	; 0x1a9a <queue_remove+0x160>
            }
        }
        else
        {
            /* There were no threads waiting to send */
            status = ATOM_OK;
    1a98:	1b 82       	std	Y+3, r1	; 0x03
        }
    }

    return (status);
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a9c:	27 96       	adiw	r28, 0x07	; 7
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	1f 91       	pop	r17
    1aae:	0f 91       	pop	r16
    1ab0:	ff 90       	pop	r15
    1ab2:	ef 90       	pop	r14
    1ab4:	08 95       	ret

00001ab6 <queue_insert>:
 * @retval ATOM_ERR_PARAM Bad parameter
 * @retval ATOM_ERR_QUEUE Problem putting a thread on the ready queue
 * @retval ATOM_ERR_TIMER Problem cancelling a timeout
 */
static uint8_t queue_insert (ATOM_QUEUE *qptr, uint8_t* msgptr)
{
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	27 97       	sbiw	r28, 0x07	; 7
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	9d 83       	std	Y+5, r25	; 0x05
    1ad4:	8c 83       	std	Y+4, r24	; 0x04
    1ad6:	7f 83       	std	Y+7, r23	; 0x07
    1ad8:	6e 83       	std	Y+6, r22	; 0x06
    uint8_t status;
    ATOM_TCB *tcb_ptr;

    /* Check parameters */
    if ((qptr == NULL) || (msgptr == NULL))
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	21 f0       	breq	.+8      	; 0x1aea <queue_insert+0x34>
    1ae2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	19 f4       	brne	.+6      	; 0x1af0 <queue_insert+0x3a>
    {
        /* Bad pointer */
        status = ATOM_ERR_PARAM;
    1aea:	89 ec       	ldi	r24, 0xC9	; 201
    1aec:	8b 83       	std	Y+3, r24	; 0x03
    1aee:	94 c0       	rjmp	.+296    	; 0x1c18 <queue_insert+0x162>
    }
    else
    {
        /* There is space in the queue, copy it in */
        memcpy ((qptr->buff_ptr + qptr->insert_index), msgptr, qptr->unit_size);
    1af0:	ec 81       	ldd	r30, Y+4	; 0x04
    1af2:	fd 81       	ldd	r31, Y+5	; 0x05
    1af4:	24 81       	ldd	r18, Z+4	; 0x04
    1af6:	35 81       	ldd	r19, Z+5	; 0x05
    1af8:	ec 81       	ldd	r30, Y+4	; 0x04
    1afa:	fd 81       	ldd	r31, Y+5	; 0x05
    1afc:	86 85       	ldd	r24, Z+14	; 0x0e
    1afe:	97 85       	ldd	r25, Z+15	; 0x0f
    1b00:	a0 89       	ldd	r26, Z+16	; 0x10
    1b02:	b1 89       	ldd	r27, Z+17	; 0x11
    1b04:	b9 01       	movw	r22, r18
    1b06:	68 0f       	add	r22, r24
    1b08:	79 1f       	adc	r23, r25
    1b0a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b0c:	fd 81       	ldd	r31, Y+5	; 0x05
    1b0e:	86 81       	ldd	r24, Z+6	; 0x06
    1b10:	97 81       	ldd	r25, Z+7	; 0x07
    1b12:	a0 85       	ldd	r26, Z+8	; 0x08
    1b14:	b1 85       	ldd	r27, Z+9	; 0x09
    1b16:	ac 01       	movw	r20, r24
    1b18:	2e 81       	ldd	r18, Y+6	; 0x06
    1b1a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	b9 01       	movw	r22, r18
    1b20:	0e 94 47 13 	call	0x268e	; 0x268e <memcpy>
        qptr->insert_index += qptr->unit_size;
    1b24:	ec 81       	ldd	r30, Y+4	; 0x04
    1b26:	fd 81       	ldd	r31, Y+5	; 0x05
    1b28:	26 85       	ldd	r18, Z+14	; 0x0e
    1b2a:	37 85       	ldd	r19, Z+15	; 0x0f
    1b2c:	40 89       	ldd	r20, Z+16	; 0x10
    1b2e:	51 89       	ldd	r21, Z+17	; 0x11
    1b30:	ec 81       	ldd	r30, Y+4	; 0x04
    1b32:	fd 81       	ldd	r31, Y+5	; 0x05
    1b34:	86 81       	ldd	r24, Z+6	; 0x06
    1b36:	97 81       	ldd	r25, Z+7	; 0x07
    1b38:	a0 85       	ldd	r26, Z+8	; 0x08
    1b3a:	b1 85       	ldd	r27, Z+9	; 0x09
    1b3c:	82 0f       	add	r24, r18
    1b3e:	93 1f       	adc	r25, r19
    1b40:	a4 1f       	adc	r26, r20
    1b42:	b5 1f       	adc	r27, r21
    1b44:	ec 81       	ldd	r30, Y+4	; 0x04
    1b46:	fd 81       	ldd	r31, Y+5	; 0x05
    1b48:	86 87       	std	Z+14, r24	; 0x0e
    1b4a:	97 87       	std	Z+15, r25	; 0x0f
    1b4c:	a0 8b       	std	Z+16, r26	; 0x10
    1b4e:	b1 8b       	std	Z+17, r27	; 0x11
        qptr->num_msgs_stored++;
    1b50:	ec 81       	ldd	r30, Y+4	; 0x04
    1b52:	fd 81       	ldd	r31, Y+5	; 0x05
    1b54:	86 89       	ldd	r24, Z+22	; 0x16
    1b56:	97 89       	ldd	r25, Z+23	; 0x17
    1b58:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b5a:	b1 8d       	ldd	r27, Z+25	; 0x19
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	a1 1d       	adc	r26, r1
    1b60:	b1 1d       	adc	r27, r1
    1b62:	ec 81       	ldd	r30, Y+4	; 0x04
    1b64:	fd 81       	ldd	r31, Y+5	; 0x05
    1b66:	86 8b       	std	Z+22, r24	; 0x16
    1b68:	97 8b       	std	Z+23, r25	; 0x17
    1b6a:	a0 8f       	std	Z+24, r26	; 0x18
    1b6c:	b1 8f       	std	Z+25, r27	; 0x19

        /* Check if the insert index should now wrap to the beginning */
        if (qptr->insert_index >= (qptr->unit_size * qptr->max_num_msgs))
    1b6e:	ec 81       	ldd	r30, Y+4	; 0x04
    1b70:	fd 81       	ldd	r31, Y+5	; 0x05
    1b72:	e6 84       	ldd	r14, Z+14	; 0x0e
    1b74:	f7 84       	ldd	r15, Z+15	; 0x0f
    1b76:	00 89       	ldd	r16, Z+16	; 0x10
    1b78:	11 89       	ldd	r17, Z+17	; 0x11
    1b7a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b7c:	fd 81       	ldd	r31, Y+5	; 0x05
    1b7e:	86 81       	ldd	r24, Z+6	; 0x06
    1b80:	97 81       	ldd	r25, Z+7	; 0x07
    1b82:	a0 85       	ldd	r26, Z+8	; 0x08
    1b84:	b1 85       	ldd	r27, Z+9	; 0x09
    1b86:	ec 81       	ldd	r30, Y+4	; 0x04
    1b88:	fd 81       	ldd	r31, Y+5	; 0x05
    1b8a:	22 85       	ldd	r18, Z+10	; 0x0a
    1b8c:	33 85       	ldd	r19, Z+11	; 0x0b
    1b8e:	44 85       	ldd	r20, Z+12	; 0x0c
    1b90:	55 85       	ldd	r21, Z+13	; 0x0d
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	0e 94 01 13 	call	0x2602	; 0x2602 <__mulsi3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	e8 16       	cp	r14, r24
    1ba0:	f9 06       	cpc	r15, r25
    1ba2:	0a 07       	cpc	r16, r26
    1ba4:	1b 07       	cpc	r17, r27
    1ba6:	30 f0       	brcs	.+12     	; 0x1bb4 <queue_insert+0xfe>
            qptr->insert_index = 0;
    1ba8:	ec 81       	ldd	r30, Y+4	; 0x04
    1baa:	fd 81       	ldd	r31, Y+5	; 0x05
    1bac:	16 86       	std	Z+14, r1	; 0x0e
    1bae:	17 86       	std	Z+15, r1	; 0x0f
    1bb0:	10 8a       	std	Z+16, r1	; 0x10
    1bb2:	11 8a       	std	Z+17, r1	; 0x11
        /**
         * If there are threads waiting to receive, wake one up now. Waiting
         * threads are woken up in priority order, with same-priority
         * threads woken up in FIFO order.
         */
        tcb_ptr = tcbDequeueHead (&qptr->getSuspQ);
    1bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb8:	02 96       	adiw	r24, 0x02	; 2
    1bba:	0e 94 0f 06 	call	0xc1e	; 0xc1e <tcbDequeueHead>
    1bbe:	9a 83       	std	Y+2, r25	; 0x02
    1bc0:	89 83       	std	Y+1, r24	; 0x01
        if (tcb_ptr)
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	31 f1       	breq	.+76     	; 0x1c16 <queue_insert+0x160>
        {
            /* Move the waiting thread to the ready queue */
            if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) == ATOM_OK)
    1bca:	83 e5       	ldi	r24, 0x53	; 83
    1bcc:	91 e0       	ldi	r25, 0x01	; 1
    1bce:	29 81       	ldd	r18, Y+1	; 0x01
    1bd0:	3a 81       	ldd	r19, Y+2	; 0x02
    1bd2:	b9 01       	movw	r22, r18
    1bd4:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>
    1bd8:	88 23       	and	r24, r24
    1bda:	d1 f4       	brne	.+52     	; 0x1c10 <queue_insert+0x15a>
            {
                /* Set OK status to be returned to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_OK;
    1bdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bde:	fa 81       	ldd	r31, Y+2	; 0x02
    1be0:	16 86       	std	Z+14, r1	; 0x0e

                /* If there's a timeout on this suspension, cancel it */
                if ((tcb_ptr->suspend_timo_cb != NULL)
    1be2:	e9 81       	ldd	r30, Y+1	; 0x01
    1be4:	fa 81       	ldd	r31, Y+2	; 0x02
    1be6:	87 85       	ldd	r24, Z+15	; 0x0f
    1be8:	90 89       	ldd	r25, Z+16	; 0x10
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	59 f0       	breq	.+22     	; 0x1c04 <queue_insert+0x14e>
    1bee:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf2:	87 85       	ldd	r24, Z+15	; 0x0f
    1bf4:	90 89       	ldd	r25, Z+16	; 0x10
    1bf6:	0e 94 8b 10 	call	0x2116	; 0x2116 <atomTimerCancel>
    1bfa:	88 23       	and	r24, r24
    1bfc:	19 f0       	breq	.+6      	; 0x1c04 <queue_insert+0x14e>
                    && (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK))
                {
                    /* There was a problem cancelling a timeout */
                    status = ATOM_ERR_TIMER;
    1bfe:	8d ec       	ldi	r24, 0xCD	; 205
    1c00:	8b 83       	std	Y+3, r24	; 0x03
    1c02:	0a c0       	rjmp	.+20     	; 0x1c18 <queue_insert+0x162>
                }
                else
                {
                    /* Flag as no timeout registered */
                    tcb_ptr->suspend_timo_cb = NULL;
    1c04:	e9 81       	ldd	r30, Y+1	; 0x01
    1c06:	fa 81       	ldd	r31, Y+2	; 0x02
    1c08:	10 8a       	std	Z+16, r1	; 0x10
    1c0a:	17 86       	std	Z+15, r1	; 0x0f

                    /* Successful */
                    status = ATOM_OK;
    1c0c:	1b 82       	std	Y+3, r1	; 0x03
    1c0e:	04 c0       	rjmp	.+8      	; 0x1c18 <queue_insert+0x162>
            {
                /**
                 * There was a problem putting the thread on the ready
                 * queue.
                 */
                status = ATOM_ERR_QUEUE;
    1c10:	8c ec       	ldi	r24, 0xCC	; 204
    1c12:	8b 83       	std	Y+3, r24	; 0x03
    1c14:	01 c0       	rjmp	.+2      	; 0x1c18 <queue_insert+0x162>
            }
        }
        else
        {
            /* There were no threads waiting to send */
            status = ATOM_OK;
    1c16:	1b 82       	std	Y+3, r1	; 0x03
        }
    }

    return (status);
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c1a:	27 96       	adiw	r28, 0x07	; 7
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ff 90       	pop	r15
    1c30:	ef 90       	pop	r14
    1c32:	08 95       	ret

00001c34 <atomSemCreate>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 */
uint8_t atomSemCreate (ATOM_SEM *sem, uint8_t initial_count)
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <atomSemCreate+0x6>
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <atomSemCreate+0x8>
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	9b 83       	std	Y+3, r25	; 0x03
    1c42:	8a 83       	std	Y+2, r24	; 0x02
    1c44:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t status;

    /* Parameter check */
    if (sem == NULL)
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	19 f4       	brne	.+6      	; 0x1c54 <atomSemCreate+0x20>
    {
        /* Bad semaphore pointer */
        status = ATOM_ERR_PARAM;
    1c4e:	89 ec       	ldi	r24, 0xC9	; 201
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	09 c0       	rjmp	.+18     	; 0x1c66 <atomSemCreate+0x32>
    }
    else
    {
        /* Set the initial count */
        sem->count = initial_count;
    1c54:	ea 81       	ldd	r30, Y+2	; 0x02
    1c56:	fb 81       	ldd	r31, Y+3	; 0x03
    1c58:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5a:	82 83       	std	Z+2, r24	; 0x02

        /* Initialise the suspended threads queue */
        sem->suspQ = NULL;
    1c5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1c5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1c60:	11 82       	std	Z+1, r1	; 0x01
    1c62:	10 82       	st	Z, r1

        /* Successful */
        status = ATOM_OK;
    1c64:	19 82       	std	Y+1, r1	; 0x01
    }

    return (status);
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <atomSemDelete>:
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_QUEUE Problem putting a woken thread on the ready queue
 * @retval ATOM_ERR_TIMER Problem cancelling a timeout on a woken thread
 */
uint8_t atomSemDelete (ATOM_SEM *sem)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	27 97       	sbiw	r28, 0x07	; 7
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	9f 83       	std	Y+7, r25	; 0x07
    1c8c:	8e 83       	std	Y+6, r24	; 0x06
    uint8_t status;
    CRITICAL_STORE;
    ATOM_TCB *tcb_ptr;
    uint8_t woken_threads = FALSE;
    1c8e:	19 82       	std	Y+1, r1	; 0x01

    /* Parameter check */
    if (sem == NULL)
    1c90:	8e 81       	ldd	r24, Y+6	; 0x06
    1c92:	9f 81       	ldd	r25, Y+7	; 0x07
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	19 f4       	brne	.+6      	; 0x1c9e <atomSemDelete+0x28>
    {
        /* Bad semaphore pointer */
        status = ATOM_ERR_PARAM;
    1c98:	89 ec       	ldi	r24, 0xC9	; 201
    1c9a:	8d 83       	std	Y+5, r24	; 0x05
    1c9c:	52 c0       	rjmp	.+164    	; 0x1d42 <atomSemDelete+0xcc>
    }
    else
    {
        /* Default to success status unless errors occur during wakeup */
        status = ATOM_OK;
    1c9e:	1d 82       	std	Y+5, r1	; 0x05

        /* Wake up all suspended tasks */
        while (1)
        {
            /* Enter critical region */
            CRITICAL_START ();
    1ca0:	ef e5       	ldi	r30, 0x5F	; 95
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	8c 83       	std	Y+4, r24	; 0x04
    1ca8:	f8 94       	cli

            /* Check if any threads are suspended */
            tcb_ptr = tcbDequeueHead (&sem->suspQ);
    1caa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cac:	9f 81       	ldd	r25, Y+7	; 0x07
    1cae:	0e 94 0f 06 	call	0xc1e	; 0xc1e <tcbDequeueHead>
    1cb2:	9b 83       	std	Y+3, r25	; 0x03
    1cb4:	8a 83       	std	Y+2, r24	; 0x02

            /* A thread is suspended on the semaphore */
            if (tcb_ptr)
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	a1 f1       	breq	.+104    	; 0x1d26 <atomSemDelete+0xb0>
            {
                /* Return error status to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_ERR_DELETED;
    1cbe:	ea 81       	ldd	r30, Y+2	; 0x02
    1cc0:	fb 81       	ldd	r31, Y+3	; 0x03
    1cc2:	8a ec       	ldi	r24, 0xCA	; 202
    1cc4:	86 87       	std	Z+14, r24	; 0x0e

                /* Put the thread on the ready queue */
                if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) != ATOM_OK)
    1cc6:	83 e5       	ldi	r24, 0x53	; 83
    1cc8:	91 e0       	ldi	r25, 0x01	; 1
    1cca:	2a 81       	ldd	r18, Y+2	; 0x02
    1ccc:	3b 81       	ldd	r19, Y+3	; 0x03
    1cce:	b9 01       	movw	r22, r18
    1cd0:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>
    1cd4:	88 23       	and	r24, r24
    1cd6:	39 f0       	breq	.+14     	; 0x1ce6 <atomSemDelete+0x70>
                {
                    /* Exit critical region */
                    CRITICAL_END ();
    1cd8:	ef e5       	ldi	r30, 0x5F	; 95
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cde:	80 83       	st	Z, r24

                    /* Quit the loop, returning error */
                    status = ATOM_ERR_QUEUE;
    1ce0:	8c ec       	ldi	r24, 0xCC	; 204
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	24 c0       	rjmp	.+72     	; 0x1d2e <atomSemDelete+0xb8>
                    break;
                }

                /* If there's a timeout on this suspension, cancel it */
                if (tcb_ptr->suspend_timo_cb)
    1ce6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ce8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cea:	87 85       	ldd	r24, Z+15	; 0x0f
    1cec:	90 89       	ldd	r25, Z+16	; 0x10
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	99 f0       	breq	.+38     	; 0x1d18 <atomSemDelete+0xa2>
                {
                    /* Cancel the callback */
                    if (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK)
    1cf2:	ea 81       	ldd	r30, Y+2	; 0x02
    1cf4:	fb 81       	ldd	r31, Y+3	; 0x03
    1cf6:	87 85       	ldd	r24, Z+15	; 0x0f
    1cf8:	90 89       	ldd	r25, Z+16	; 0x10
    1cfa:	0e 94 8b 10 	call	0x2116	; 0x2116 <atomTimerCancel>
    1cfe:	88 23       	and	r24, r24
    1d00:	39 f0       	breq	.+14     	; 0x1d10 <atomSemDelete+0x9a>
                    {
                        /* Exit critical region */
                        CRITICAL_END ();
    1d02:	ef e5       	ldi	r30, 0x5F	; 95
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	8c 81       	ldd	r24, Y+4	; 0x04
    1d08:	80 83       	st	Z, r24

                        /* Quit the loop, returning error */
                        status = ATOM_ERR_TIMER;
    1d0a:	8d ec       	ldi	r24, 0xCD	; 205
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <atomSemDelete+0xb8>
                        break;
                    }

                    /* Flag as no timeout registered */
                    tcb_ptr->suspend_timo_cb = NULL;
    1d10:	ea 81       	ldd	r30, Y+2	; 0x02
    1d12:	fb 81       	ldd	r31, Y+3	; 0x03
    1d14:	10 8a       	std	Z+16, r1	; 0x10
    1d16:	17 86       	std	Z+15, r1	; 0x0f

                }

                /* Exit critical region */
                CRITICAL_END ();
    1d18:	ef e5       	ldi	r30, 0x5F	; 95
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1e:	80 83       	st	Z, r24

                /* Request a reschedule */
                woken_threads = TRUE;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	bd cf       	rjmp	.-134    	; 0x1ca0 <atomSemDelete+0x2a>

            /* No more suspended threads */
            else
            {
                /* Exit critical region and quit the loop */
                CRITICAL_END ();
    1d26:	ef e5       	ldi	r30, 0x5F	; 95
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2c:	80 83       	st	Z, r24
                break;
            }
        }

        /* Call scheduler if any threads were woken up */
        if (woken_threads == TRUE)
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	39 f4       	brne	.+14     	; 0x1d42 <atomSemDelete+0xcc>
        {
            /**
             * Only call the scheduler if we are in thread context, otherwise
             * it will be called on exiting the ISR by atomIntExit().
             */
            if (atomCurrentContext())
    1d34:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <atomCurrentContext>
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	19 f0       	breq	.+6      	; 0x1d42 <atomSemDelete+0xcc>
                atomSched (FALSE);
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	0e 94 6f 03 	call	0x6de	; 0x6de <atomSched>
        }
    }

    return (status);
    1d42:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d44:	27 96       	adiw	r28, 0x07	; 7
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <atomSemGet>:
 * @retval ATOM_ERR_PARAM Bad parameter
 * @retval ATOM_ERR_QUEUE Problem putting the thread on the suspend queue
 * @retval ATOM_ERR_TIMER Problem registering the timeout
 */
uint8_t atomSemGet (ATOM_SEM *sem, int32_t timeout)
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	68 97       	sbiw	r28, 0x18	; 24
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	9c 8b       	std	Y+20, r25	; 0x14
    1d6c:	8b 8b       	std	Y+19, r24	; 0x13
    1d6e:	4d 8b       	std	Y+21, r20	; 0x15
    1d70:	5e 8b       	std	Y+22, r21	; 0x16
    1d72:	6f 8b       	std	Y+23, r22	; 0x17
    1d74:	78 8f       	std	Y+24, r23	; 0x18
    SEM_TIMER timer_data;
    ATOM_TIMER timer_cb;
    ATOM_TCB *curr_tcb_ptr;

    /* Check parameters */
    if (sem == NULL)
    1d76:	8b 89       	ldd	r24, Y+19	; 0x13
    1d78:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	19 f4       	brne	.+6      	; 0x1d84 <atomSemGet+0x2e>
    {
        /* Bad semaphore pointer */
        status = ATOM_ERR_PARAM;
    1d7e:	89 ec       	ldi	r24, 0xC9	; 201
    1d80:	8b 83       	std	Y+3, r24	; 0x03
    1d82:	9a c0       	rjmp	.+308    	; 0x1eb8 <atomSemGet+0x162>
    }
    else
    {
        /* Protect access to the semaphore object and OS queues */
        CRITICAL_START ();
    1d84:	ef e5       	ldi	r30, 0x5F	; 95
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	8c 83       	std	Y+4, r24	; 0x04
    1d8c:	f8 94       	cli

        /* If count is zero, block the calling thread */
        if (sem->count == 0)
    1d8e:	eb 89       	ldd	r30, Y+19	; 0x13
    1d90:	fc 89       	ldd	r31, Y+20	; 0x14
    1d92:	82 81       	ldd	r24, Z+2	; 0x02
    1d94:	88 23       	and	r24, r24
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <atomSemGet+0x44>
    1d98:	83 c0       	rjmp	.+262    	; 0x1ea0 <atomSemGet+0x14a>
        {
            /* If called with timeout >= 0, we should block */
            if (timeout >= 0)
    1d9a:	8d 89       	ldd	r24, Y+21	; 0x15
    1d9c:	9e 89       	ldd	r25, Y+22	; 0x16
    1d9e:	af 89       	ldd	r26, Y+23	; 0x17
    1da0:	b8 8d       	ldd	r27, Y+24	; 0x18
    1da2:	bb 23       	and	r27, r27
    1da4:	0c f4       	brge	.+2      	; 0x1da8 <atomSemGet+0x52>
    1da6:	75 c0       	rjmp	.+234    	; 0x1e92 <atomSemGet+0x13c>
            {
                /* Count is zero, block the calling thread */

                /* Get the current TCB */
                curr_tcb_ptr = atomCurrentContext();
    1da8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <atomCurrentContext>
    1dac:	9a 83       	std	Y+2, r25	; 0x02
    1dae:	89 83       	std	Y+1, r24	; 0x01

                /* Check we are actually in thread context */
                if (curr_tcb_ptr)
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	9a 81       	ldd	r25, Y+2	; 0x02
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	09 f4       	brne	.+2      	; 0x1dba <atomSemGet+0x64>
    1db8:	65 c0       	rjmp	.+202    	; 0x1e84 <atomSemGet+0x12e>
                {
                    /* Add current thread to the suspend list on this semaphore */
                    if (tcbEnqueuePriority (&sem->suspQ, curr_tcb_ptr) != ATOM_OK)
    1dba:	8b 89       	ldd	r24, Y+19	; 0x13
    1dbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dbe:	29 81       	ldd	r18, Y+1	; 0x01
    1dc0:	3a 81       	ldd	r19, Y+2	; 0x02
    1dc2:	b9 01       	movw	r22, r18
    1dc4:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>
    1dc8:	88 23       	and	r24, r24
    1dca:	39 f0       	breq	.+14     	; 0x1dda <atomSemGet+0x84>
                    {
                        /* Exit critical region */
                        CRITICAL_END ();
    1dcc:	ef e5       	ldi	r30, 0x5F	; 95
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd2:	80 83       	st	Z, r24

                        /* There was an error putting this thread on the suspend list */
                        status = ATOM_ERR_QUEUE;
    1dd4:	8c ec       	ldi	r24, 0xCC	; 204
    1dd6:	8b 83       	std	Y+3, r24	; 0x03
    1dd8:	6f c0       	rjmp	.+222    	; 0x1eb8 <atomSemGet+0x162>
                    }
                    else
                    {
                        /* Set suspended status for the current thread */
                        curr_tcb_ptr->suspended = TRUE;
    1dda:	e9 81       	ldd	r30, Y+1	; 0x01
    1ddc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	85 87       	std	Z+13, r24	; 0x0d

                        /* Track errors */
                        status = ATOM_OK;
    1de2:	1b 82       	std	Y+3, r1	; 0x03

                        /* Register a timer callback if requested */
                        if (timeout)
    1de4:	8d 89       	ldd	r24, Y+21	; 0x15
    1de6:	9e 89       	ldd	r25, Y+22	; 0x16
    1de8:	af 89       	ldd	r26, Y+23	; 0x17
    1dea:	b8 8d       	ldd	r27, Y+24	; 0x18
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	a1 05       	cpc	r26, r1
    1df0:	b1 05       	cpc	r27, r1
    1df2:	a9 f1       	breq	.+106    	; 0x1e5e <atomSemGet+0x108>
                        {
                            /* Fill out the data needed by the callback to wake us up */
                            timer_data.tcb_ptr = curr_tcb_ptr;
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	9a 81       	ldd	r25, Y+2	; 0x02
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
                            timer_data.sem_ptr = sem;
    1dfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1e00:	98 87       	std	Y+8, r25	; 0x08
    1e02:	8f 83       	std	Y+7, r24	; 0x07

                            /* Fill out the timer callback request structure */
                            timer_cb.cb_func = atomSemTimerCallback;
    1e04:	87 ef       	ldi	r24, 0xF7	; 247
    1e06:	9f e0       	ldi	r25, 0x0F	; 15
    1e08:	9a 87       	std	Y+10, r25	; 0x0a
    1e0a:	89 87       	std	Y+9, r24	; 0x09
                            timer_cb.cb_data = (POINTER)&timer_data;
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	05 96       	adiw	r24, 0x05	; 5
    1e10:	9c 87       	std	Y+12, r25	; 0x0c
    1e12:	8b 87       	std	Y+11, r24	; 0x0b
                            timer_cb.cb_ticks = timeout;
    1e14:	8d 89       	ldd	r24, Y+21	; 0x15
    1e16:	9e 89       	ldd	r25, Y+22	; 0x16
    1e18:	af 89       	ldd	r26, Y+23	; 0x17
    1e1a:	b8 8d       	ldd	r27, Y+24	; 0x18
    1e1c:	8d 87       	std	Y+13, r24	; 0x0d
    1e1e:	9e 87       	std	Y+14, r25	; 0x0e
    1e20:	af 87       	std	Y+15, r26	; 0x0f
    1e22:	b8 8b       	std	Y+16, r27	; 0x10
                            /**
                             * Store the timer details in the TCB so that we can
                             * cancel the timer callback if the semaphore is put
                             * before the timeout occurs.
                             */
                            curr_tcb_ptr->suspend_timo_cb = &timer_cb;
    1e24:	e9 81       	ldd	r30, Y+1	; 0x01
    1e26:	fa 81       	ldd	r31, Y+2	; 0x02
    1e28:	ce 01       	movw	r24, r28
    1e2a:	09 96       	adiw	r24, 0x09	; 9
    1e2c:	90 8b       	std	Z+16, r25	; 0x10
    1e2e:	87 87       	std	Z+15, r24	; 0x0f

                            /* Register a callback on timeout */
                            if (atomTimerRegister (&timer_cb) != ATOM_OK)
    1e30:	ce 01       	movw	r24, r28
    1e32:	09 96       	adiw	r24, 0x09	; 9
    1e34:	0e 94 3b 10 	call	0x2076	; 0x2076 <atomTimerRegister>
    1e38:	88 23       	and	r24, r24
    1e3a:	a9 f0       	breq	.+42     	; 0x1e66 <atomSemGet+0x110>
                            {
                                /* Timer registration failed */
                                status = ATOM_ERR_TIMER;
    1e3c:	8d ec       	ldi	r24, 0xCD	; 205
    1e3e:	8b 83       	std	Y+3, r24	; 0x03

                                /* Clean up and return to the caller */
                                (void)tcbDequeueEntry (&sem->suspQ, curr_tcb_ptr);
    1e40:	8b 89       	ldd	r24, Y+19	; 0x13
    1e42:	9c 89       	ldd	r25, Y+20	; 0x14
    1e44:	29 81       	ldd	r18, Y+1	; 0x01
    1e46:	3a 81       	ldd	r19, Y+2	; 0x02
    1e48:	b9 01       	movw	r22, r18
    1e4a:	0e 94 57 06 	call	0xcae	; 0xcae <tcbDequeueEntry>
                                curr_tcb_ptr->suspended = FALSE;
    1e4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e50:	fa 81       	ldd	r31, Y+2	; 0x02
    1e52:	15 86       	std	Z+13, r1	; 0x0d
                                curr_tcb_ptr->suspend_timo_cb = NULL;
    1e54:	e9 81       	ldd	r30, Y+1	; 0x01
    1e56:	fa 81       	ldd	r31, Y+2	; 0x02
    1e58:	10 8a       	std	Z+16, r1	; 0x10
    1e5a:	17 86       	std	Z+15, r1	; 0x0f
    1e5c:	04 c0       	rjmp	.+8      	; 0x1e66 <atomSemGet+0x110>

                        /* Set no timeout requested */
                        else
                        {
                            /* No need to cancel timeouts on this one */
                            curr_tcb_ptr->suspend_timo_cb = NULL;
    1e5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e60:	fa 81       	ldd	r31, Y+2	; 0x02
    1e62:	10 8a       	std	Z+16, r1	; 0x10
    1e64:	17 86       	std	Z+15, r1	; 0x0f
                        }

                        /* Exit critical region */
                        CRITICAL_END ();
    1e66:	ef e5       	ldi	r30, 0x5F	; 95
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6c:	80 83       	st	Z, r24

                        /* Check no errors have occurred */
                        if (status == ATOM_OK)
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	88 23       	and	r24, r24
    1e72:	11 f5       	brne	.+68     	; 0x1eb8 <atomSemGet+0x162>
                            /**
                             * Current thread now blocking, schedule in a new
                             * one. We already know we are in thread context
                             * so can call the scheduler from here.
                             */
                            atomSched (FALSE);
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	0e 94 6f 03 	call	0x6de	; 0x6de <atomSched>
                            /**
                             * Normal atomSemPut() wakeups will set ATOM_OK status,
                             * while timeouts will set ATOM_TIMEOUT and semaphore
                             * deletions will set ATOM_ERR_DELETED.
                             */
                            status = curr_tcb_ptr->suspend_wake_status;
    1e7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7e:	86 85       	ldd	r24, Z+14	; 0x0e
    1e80:	8b 83       	std	Y+3, r24	; 0x03
    1e82:	1a c0       	rjmp	.+52     	; 0x1eb8 <atomSemGet+0x162>
                    }
                }
                else
                {
                    /* Exit critical region */
                    CRITICAL_END ();
    1e84:	ef e5       	ldi	r30, 0x5F	; 95
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	80 83       	st	Z, r24

                    /* Not currently in thread context, can't suspend */
                    status = ATOM_ERR_CONTEXT;
    1e8c:	88 ec       	ldi	r24, 0xC8	; 200
    1e8e:	8b 83       	std	Y+3, r24	; 0x03
    1e90:	13 c0       	rjmp	.+38     	; 0x1eb8 <atomSemGet+0x162>
                }
            }
            else
            {
                /* timeout == -1, requested not to block and count is zero */
                CRITICAL_END();
    1e92:	ef e5       	ldi	r30, 0x5F	; 95
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	8c 81       	ldd	r24, Y+4	; 0x04
    1e98:	80 83       	st	Z, r24
                status = ATOM_WOULDBLOCK;
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	8b 83       	std	Y+3, r24	; 0x03
    1e9e:	0c c0       	rjmp	.+24     	; 0x1eb8 <atomSemGet+0x162>
            }
        }
        else
        {
            /* Count is non-zero, just decrement it and return to calling thread */
            sem->count--;
    1ea0:	eb 89       	ldd	r30, Y+19	; 0x13
    1ea2:	fc 89       	ldd	r31, Y+20	; 0x14
    1ea4:	82 81       	ldd	r24, Z+2	; 0x02
    1ea6:	81 50       	subi	r24, 0x01	; 1
    1ea8:	eb 89       	ldd	r30, Y+19	; 0x13
    1eaa:	fc 89       	ldd	r31, Y+20	; 0x14
    1eac:	82 83       	std	Z+2, r24	; 0x02

            /* Exit critical region */
            CRITICAL_END ();
    1eae:	ef e5       	ldi	r30, 0x5F	; 95
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb4:	80 83       	st	Z, r24

            /* Successful */
            status = ATOM_OK;
    1eb6:	1b 82       	std	Y+3, r1	; 0x03
        }
    }

    return (status);
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1eba:	68 96       	adiw	r28, 0x18	; 24
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <atomSemPut>:
 * @retval ATOM_ERR_PARAM Bad parameter
 * @retval ATOM_ERR_QUEUE Problem putting a woken thread on the ready queue
 * @retval ATOM_ERR_TIMER Problem cancelling a timeout for a woken thread
 */
uint8_t atomSemPut (ATOM_SEM * sem)
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <atomSemPut+0x6>
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <atomSemPut+0x8>
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <atomSemPut+0xa>
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	9e 83       	std	Y+6, r25	; 0x06
    1edc:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t status;
    CRITICAL_STORE;
    ATOM_TCB *tcb_ptr;

    /* Check parameters */
    if (sem == NULL)
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	19 f4       	brne	.+6      	; 0x1eec <atomSemPut+0x20>
    {
        /* Bad semaphore pointer */
        status = ATOM_ERR_PARAM;
    1ee6:	89 ec       	ldi	r24, 0xC9	; 201
    1ee8:	8c 83       	std	Y+4, r24	; 0x04
    1eea:	5a c0       	rjmp	.+180    	; 0x1fa0 <atomSemPut+0xd4>
    }
    else
    {
        /* Protect access to the semaphore object and OS queues */
        CRITICAL_START ();
    1eec:	ef e5       	ldi	r30, 0x5F	; 95
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	8b 83       	std	Y+3, r24	; 0x03
    1ef4:	f8 94       	cli

        /* If any threads are blocking on the semaphore, wake up one */
        if (sem->suspQ)
    1ef6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ef8:	fe 81       	ldd	r31, Y+6	; 0x06
    1efa:	80 81       	ld	r24, Z
    1efc:	91 81       	ldd	r25, Z+1	; 0x01
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	d9 f1       	breq	.+118    	; 0x1f78 <atomSemPut+0xac>
            /**
             * Threads are woken up in priority order, with a FIFO system
             * used on same priority threads. We always take the head,
             * ordering is taken care of by an ordered list enqueue.
             */
            tcb_ptr = tcbDequeueHead (&sem->suspQ);
    1f02:	8d 81       	ldd	r24, Y+5	; 0x05
    1f04:	9e 81       	ldd	r25, Y+6	; 0x06
    1f06:	0e 94 0f 06 	call	0xc1e	; 0xc1e <tcbDequeueHead>
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01
            if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) != ATOM_OK)
    1f0e:	83 e5       	ldi	r24, 0x53	; 83
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	29 81       	ldd	r18, Y+1	; 0x01
    1f14:	3a 81       	ldd	r19, Y+2	; 0x02
    1f16:	b9 01       	movw	r22, r18
    1f18:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>
    1f1c:	88 23       	and	r24, r24
    1f1e:	39 f0       	breq	.+14     	; 0x1f2e <atomSemPut+0x62>
            {
                /* Exit critical region */
                CRITICAL_END ();
    1f20:	ef e5       	ldi	r30, 0x5F	; 95
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	80 83       	st	Z, r24

                /* There was a problem putting the thread on the ready queue */
                status = ATOM_ERR_QUEUE;
    1f28:	8c ec       	ldi	r24, 0xCC	; 204
    1f2a:	8c 83       	std	Y+4, r24	; 0x04
    1f2c:	39 c0       	rjmp	.+114    	; 0x1fa0 <atomSemPut+0xd4>
            }
            else
            {
                /* Set OK status to be returned to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_OK;
    1f2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f30:	fa 81       	ldd	r31, Y+2	; 0x02
    1f32:	16 86       	std	Z+14, r1	; 0x0e

                /* If there's a timeout on this suspension, cancel it */
                if ((tcb_ptr->suspend_timo_cb != NULL)
    1f34:	e9 81       	ldd	r30, Y+1	; 0x01
    1f36:	fa 81       	ldd	r31, Y+2	; 0x02
    1f38:	87 85       	ldd	r24, Z+15	; 0x0f
    1f3a:	90 89       	ldd	r25, Z+16	; 0x10
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	59 f0       	breq	.+22     	; 0x1f56 <atomSemPut+0x8a>
    1f40:	e9 81       	ldd	r30, Y+1	; 0x01
    1f42:	fa 81       	ldd	r31, Y+2	; 0x02
    1f44:	87 85       	ldd	r24, Z+15	; 0x0f
    1f46:	90 89       	ldd	r25, Z+16	; 0x10
    1f48:	0e 94 8b 10 	call	0x2116	; 0x2116 <atomTimerCancel>
    1f4c:	88 23       	and	r24, r24
    1f4e:	19 f0       	breq	.+6      	; 0x1f56 <atomSemPut+0x8a>
                    && (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK))
                {
                    /* There was a problem cancelling a timeout on this semaphore */
                    status = ATOM_ERR_TIMER;
    1f50:	8d ec       	ldi	r24, 0xCD	; 205
    1f52:	8c 83       	std	Y+4, r24	; 0x04
    1f54:	05 c0       	rjmp	.+10     	; 0x1f60 <atomSemPut+0x94>
                }
                else
                {
                    /* Flag as no timeout registered */
                    tcb_ptr->suspend_timo_cb = NULL;
    1f56:	e9 81       	ldd	r30, Y+1	; 0x01
    1f58:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5a:	10 8a       	std	Z+16, r1	; 0x10
    1f5c:	17 86       	std	Z+15, r1	; 0x0f

                    /* Successful */
                    status = ATOM_OK;
    1f5e:	1c 82       	std	Y+4, r1	; 0x04
                }

                /* Exit critical region */
                CRITICAL_END ();
    1f60:	ef e5       	ldi	r30, 0x5F	; 95
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	80 83       	st	Z, r24
                /**
                 * The scheduler may now make a policy decision to thread
                 * switch if we are currently in thread context. If we are
                 * in interrupt context it will be handled by atomIntExit().
                 */
                if (atomCurrentContext())
    1f68:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <atomCurrentContext>
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	c1 f0       	breq	.+48     	; 0x1fa0 <atomSemPut+0xd4>
                    atomSched (FALSE);
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	0e 94 6f 03 	call	0x6de	; 0x6de <atomSched>
    1f76:	14 c0       	rjmp	.+40     	; 0x1fa0 <atomSemPut+0xd4>

        /* If no threads waiting, just increment the count and return */
        else
        {
            /* Check for count overflow */
            if (sem->count == 255)
    1f78:	ed 81       	ldd	r30, Y+5	; 0x05
    1f7a:	fe 81       	ldd	r31, Y+6	; 0x06
    1f7c:	82 81       	ldd	r24, Z+2	; 0x02
    1f7e:	8f 3f       	cpi	r24, 0xFF	; 255
    1f80:	19 f4       	brne	.+6      	; 0x1f88 <atomSemPut+0xbc>
            {
                /* Don't increment, just return error status */
                status = ATOM_ERR_OVF;
    1f82:	8b ec       	ldi	r24, 0xCB	; 203
    1f84:	8c 83       	std	Y+4, r24	; 0x04
    1f86:	08 c0       	rjmp	.+16     	; 0x1f98 <atomSemPut+0xcc>
            }
            else
            {
                /* Increment the count and return success */
                sem->count++;
    1f88:	ed 81       	ldd	r30, Y+5	; 0x05
    1f8a:	fe 81       	ldd	r31, Y+6	; 0x06
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	8f 5f       	subi	r24, 0xFF	; 255
    1f90:	ed 81       	ldd	r30, Y+5	; 0x05
    1f92:	fe 81       	ldd	r31, Y+6	; 0x06
    1f94:	82 83       	std	Z+2, r24	; 0x02
                status = ATOM_OK;
    1f96:	1c 82       	std	Y+4, r1	; 0x04
            }

            /* Exit critical region */
            CRITICAL_END ();
    1f98:	ef e5       	ldi	r30, 0x5F	; 95
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	80 83       	st	Z, r24
        }
    }

    return (status);
    1fa0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1fa2:	26 96       	adiw	r28, 0x06	; 6
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <atomSemResetCount>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameter
 */
uint8_t atomSemResetCount (ATOM_SEM *sem, uint8_t count)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <atomSemResetCount+0x6>
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <atomSemResetCount+0x8>
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	9b 83       	std	Y+3, r25	; 0x03
    1fc2:	8a 83       	std	Y+2, r24	; 0x02
    1fc4:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t status;

    /* Parameter check */
    if (sem == NULL)
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	19 f4       	brne	.+6      	; 0x1fd4 <atomSemResetCount+0x20>
    {
        /* Bad semaphore pointer */
        status = ATOM_ERR_PARAM;
    1fce:	89 ec       	ldi	r24, 0xC9	; 201
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	05 c0       	rjmp	.+10     	; 0x1fde <atomSemResetCount+0x2a>
    }
    else
    {
        /* Set the count */
        sem->count = count;
    1fd4:	ea 81       	ldd	r30, Y+2	; 0x02
    1fd6:	fb 81       	ldd	r31, Y+3	; 0x03
    1fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fda:	82 83       	std	Z+2, r24	; 0x02

        /* Successful */
        status = ATOM_OK;
    1fdc:	19 82       	std	Y+1, r1	; 0x01
    }

    return (status);
    1fde:	89 81       	ldd	r24, Y+1	; 0x01

}
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <atomSemTimerCallback>:
 * semaphore details.
 *
 * @param[in] cb_data Pointer to a SEM_TIMER object
 */
static void atomSemTimerCallback (POINTER cb_data)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <atomSemTimerCallback+0x6>
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <atomSemTimerCallback+0x8>
    1ff6:	0f 92       	push	r0
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	9d 83       	std	Y+5, r25	; 0x05
    1ffe:	8c 83       	std	Y+4, r24	; 0x04
    SEM_TIMER *timer_data_ptr;
    CRITICAL_STORE;

    /* Get the SEM_TIMER structure pointer */
    timer_data_ptr = (SEM_TIMER *)cb_data;
    2000:	8c 81       	ldd	r24, Y+4	; 0x04
    2002:	9d 81       	ldd	r25, Y+5	; 0x05
    2004:	9b 83       	std	Y+3, r25	; 0x03
    2006:	8a 83       	std	Y+2, r24	; 0x02

    /* Check parameter is valid */
    if (timer_data_ptr)
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	9b 81       	ldd	r25, Y+3	; 0x03
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	59 f1       	breq	.+86     	; 0x2066 <atomSemTimerCallback+0x78>
    {
        /* Enter critical region */
        CRITICAL_START ();
    2010:	ef e5       	ldi	r30, 0x5F	; 95
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	f8 94       	cli

        /* Set status to indicate to the waiting thread that it timed out */
        timer_data_ptr->tcb_ptr->suspend_wake_status = ATOM_TIMEOUT;
    201a:	ea 81       	ldd	r30, Y+2	; 0x02
    201c:	fb 81       	ldd	r31, Y+3	; 0x03
    201e:	01 90       	ld	r0, Z+
    2020:	f0 81       	ld	r31, Z
    2022:	e0 2d       	mov	r30, r0
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	86 87       	std	Z+14, r24	; 0x0e

        /* Flag as no timeout registered */
        timer_data_ptr->tcb_ptr->suspend_timo_cb = NULL;
    2028:	ea 81       	ldd	r30, Y+2	; 0x02
    202a:	fb 81       	ldd	r31, Y+3	; 0x03
    202c:	01 90       	ld	r0, Z+
    202e:	f0 81       	ld	r31, Z
    2030:	e0 2d       	mov	r30, r0
    2032:	10 8a       	std	Z+16, r1	; 0x10
    2034:	17 86       	std	Z+15, r1	; 0x0f

        /* Remove this thread from the semaphore's suspend list */
        (void)tcbDequeueEntry (&timer_data_ptr->sem_ptr->suspQ, timer_data_ptr->tcb_ptr);
    2036:	ea 81       	ldd	r30, Y+2	; 0x02
    2038:	fb 81       	ldd	r31, Y+3	; 0x03
    203a:	82 81       	ldd	r24, Z+2	; 0x02
    203c:	93 81       	ldd	r25, Z+3	; 0x03
    203e:	ea 81       	ldd	r30, Y+2	; 0x02
    2040:	fb 81       	ldd	r31, Y+3	; 0x03
    2042:	20 81       	ld	r18, Z
    2044:	31 81       	ldd	r19, Z+1	; 0x01
    2046:	b9 01       	movw	r22, r18
    2048:	0e 94 57 06 	call	0xcae	; 0xcae <tcbDequeueEntry>

        /* Put the thread on the ready queue */
        (void)tcbEnqueuePriority (&tcbReadyQ, timer_data_ptr->tcb_ptr);
    204c:	ea 81       	ldd	r30, Y+2	; 0x02
    204e:	fb 81       	ldd	r31, Y+3	; 0x03
    2050:	20 81       	ld	r18, Z
    2052:	31 81       	ldd	r19, Z+1	; 0x01
    2054:	83 e5       	ldi	r24, 0x53	; 83
    2056:	91 e0       	ldi	r25, 0x01	; 1
    2058:	b9 01       	movw	r22, r18
    205a:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>

        /* Exit critical region */
        CRITICAL_END ();
    205e:	ef e5       	ldi	r30, 0x5F	; 95
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	80 83       	st	Z, r24
        /**
         * Note that we don't call the scheduler now as it will be called
         * when we exit the ISR by atomIntExit().
         */
    }
}
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <atomTimerRegister>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 */
uint8_t atomTimerRegister (ATOM_TIMER *timer_ptr)
{
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	00 d0       	rcall	.+0      	; 0x207c <atomTimerRegister+0x6>
    207c:	00 d0       	rcall	.+0      	; 0x207e <atomTimerRegister+0x8>
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	9c 83       	std	Y+4, r25	; 0x04
    2084:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t status;
    CRITICAL_STORE;

    /* Parameter check */
    if ((timer_ptr == NULL) || (timer_ptr->cb_func == NULL)
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	9c 81       	ldd	r25, Y+4	; 0x04
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	81 f0       	breq	.+32     	; 0x20ae <atomTimerRegister+0x38>
    208e:	eb 81       	ldd	r30, Y+3	; 0x03
    2090:	fc 81       	ldd	r31, Y+4	; 0x04
    2092:	80 81       	ld	r24, Z
    2094:	91 81       	ldd	r25, Z+1	; 0x01
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	51 f0       	breq	.+20     	; 0x20ae <atomTimerRegister+0x38>
    209a:	eb 81       	ldd	r30, Y+3	; 0x03
    209c:	fc 81       	ldd	r31, Y+4	; 0x04
    209e:	84 81       	ldd	r24, Z+4	; 0x04
    20a0:	95 81       	ldd	r25, Z+5	; 0x05
    20a2:	a6 81       	ldd	r26, Z+6	; 0x06
    20a4:	b7 81       	ldd	r27, Z+7	; 0x07
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	a1 05       	cpc	r26, r1
    20aa:	b1 05       	cpc	r27, r1
    20ac:	19 f4       	brne	.+6      	; 0x20b4 <atomTimerRegister+0x3e>
        || (timer_ptr->cb_ticks == 0))
    {
        /* Return error */
        status = ATOM_ERR_PARAM;
    20ae:	89 ec       	ldi	r24, 0xC9	; 201
    20b0:	8a 83       	std	Y+2, r24	; 0x02
    20b2:	29 c0       	rjmp	.+82     	; 0x2106 <atomTimerRegister+0x90>
    }
    else
    {
        /* Protect the list */
        CRITICAL_START ();
    20b4:	ef e5       	ldi	r30, 0x5F	; 95
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	f8 94       	cli
         * of the list. On each system tick increment the list is walked
         * and the remaining ticks count for that timer is decremented.
         * Once the remaining ticks reaches zero, the timer callback is
         * made.
         */
        if (timer_queue == NULL)
    20be:	80 91 6c 01 	lds	r24, 0x016C
    20c2:	90 91 6d 01 	lds	r25, 0x016D
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	59 f4       	brne	.+22     	; 0x20e0 <atomTimerRegister+0x6a>
        {
            /* List is empty, insert new head */
            timer_ptr->next_timer = NULL;
    20ca:	eb 81       	ldd	r30, Y+3	; 0x03
    20cc:	fc 81       	ldd	r31, Y+4	; 0x04
    20ce:	11 86       	std	Z+9, r1	; 0x09
    20d0:	10 86       	std	Z+8, r1	; 0x08
            timer_queue = timer_ptr;
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	90 93 6d 01 	sts	0x016D, r25
    20da:	80 93 6c 01 	sts	0x016C, r24
    20de:	0e c0       	rjmp	.+28     	; 0x20fc <atomTimerRegister+0x86>
        }
        else
        {
            /* List has at least one entry, enqueue new timer before */
            timer_ptr->next_timer = timer_queue;
    20e0:	80 91 6c 01 	lds	r24, 0x016C
    20e4:	90 91 6d 01 	lds	r25, 0x016D
    20e8:	eb 81       	ldd	r30, Y+3	; 0x03
    20ea:	fc 81       	ldd	r31, Y+4	; 0x04
    20ec:	91 87       	std	Z+9, r25	; 0x09
    20ee:	80 87       	std	Z+8, r24	; 0x08
            timer_queue = timer_ptr;
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	90 93 6d 01 	sts	0x016D, r25
    20f8:	80 93 6c 01 	sts	0x016C, r24
        }

        /* End of list protection */
        CRITICAL_END ();
    20fc:	ef e5       	ldi	r30, 0x5F	; 95
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	80 83       	st	Z, r24

        /* Successful */
        status = ATOM_OK;
    2104:	1a 82       	std	Y+2, r1	; 0x02
    }

    return (status);
    2106:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <atomTimerCancel>:
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 * @retval ATOM_ERR_NOT_FOUND Timer registration was not found
 */
uint8_t atomTimerCancel (ATOM_TIMER *timer_ptr)
{
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	28 97       	sbiw	r28, 0x08	; 8
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	98 87       	std	Y+8, r25	; 0x08
    212c:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t status = ATOM_ERR_NOT_FOUND;
    212e:	8e ec       	ldi	r24, 0xCE	; 206
    2130:	8e 83       	std	Y+6, r24	; 0x06
    ATOM_TIMER *prev_ptr, *next_ptr;
    CRITICAL_STORE;

    /* Parameter check */
    if (timer_ptr == NULL)
    2132:	8f 81       	ldd	r24, Y+7	; 0x07
    2134:	98 85       	ldd	r25, Y+8	; 0x08
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	19 f4       	brne	.+6      	; 0x2140 <atomTimerCancel+0x2a>
    {
        /* Return error */
        status = ATOM_ERR_PARAM;
    213a:	89 ec       	ldi	r24, 0xC9	; 201
    213c:	8e 83       	std	Y+6, r24	; 0x06
    213e:	45 c0       	rjmp	.+138    	; 0x21ca <atomTimerCancel+0xb4>
    }
    else
    {
        /* Protect the list */
        CRITICAL_START ();
    2140:	ef e5       	ldi	r30, 0x5F	; 95
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	f8 94       	cli

        /* Walk the list to find the relevant timer */
        prev_ptr = next_ptr = timer_queue;
    214a:	80 91 6c 01 	lds	r24, 0x016C
    214e:	90 91 6d 01 	lds	r25, 0x016D
    2152:	9b 83       	std	Y+3, r25	; 0x03
    2154:	8a 83       	std	Y+2, r24	; 0x02
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	9b 81       	ldd	r25, Y+3	; 0x03
    215a:	9d 83       	std	Y+5, r25	; 0x05
    215c:	8c 83       	std	Y+4, r24	; 0x04
    215e:	2d c0       	rjmp	.+90     	; 0x21ba <atomTimerCancel+0xa4>
        while (next_ptr)
        {
            /* Is this entry the one we're looking for? */
            if (next_ptr == timer_ptr)
    2160:	2a 81       	ldd	r18, Y+2	; 0x02
    2162:	3b 81       	ldd	r19, Y+3	; 0x03
    2164:	8f 81       	ldd	r24, Y+7	; 0x07
    2166:	98 85       	ldd	r25, Y+8	; 0x08
    2168:	28 17       	cp	r18, r24
    216a:	39 07       	cpc	r19, r25
    216c:	e1 f4       	brne	.+56     	; 0x21a6 <atomTimerCancel+0x90>
            {
                if (next_ptr == timer_queue)
    216e:	20 91 6c 01 	lds	r18, 0x016C
    2172:	30 91 6d 01 	lds	r19, 0x016D
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	9b 81       	ldd	r25, Y+3	; 0x03
    217a:	82 17       	cp	r24, r18
    217c:	93 07       	cpc	r25, r19
    217e:	49 f4       	brne	.+18     	; 0x2192 <atomTimerCancel+0x7c>
                {
                    /* We're removing the list head */
                    timer_queue = next_ptr->next_timer;
    2180:	ea 81       	ldd	r30, Y+2	; 0x02
    2182:	fb 81       	ldd	r31, Y+3	; 0x03
    2184:	80 85       	ldd	r24, Z+8	; 0x08
    2186:	91 85       	ldd	r25, Z+9	; 0x09
    2188:	90 93 6d 01 	sts	0x016D, r25
    218c:	80 93 6c 01 	sts	0x016C, r24
    2190:	08 c0       	rjmp	.+16     	; 0x21a2 <atomTimerCancel+0x8c>
                }
                else
                {
                    /* We're removing a mid or tail TCB */
                    prev_ptr->next_timer = next_ptr->next_timer;
    2192:	ea 81       	ldd	r30, Y+2	; 0x02
    2194:	fb 81       	ldd	r31, Y+3	; 0x03
    2196:	80 85       	ldd	r24, Z+8	; 0x08
    2198:	91 85       	ldd	r25, Z+9	; 0x09
    219a:	ec 81       	ldd	r30, Y+4	; 0x04
    219c:	fd 81       	ldd	r31, Y+5	; 0x05
    219e:	91 87       	std	Z+9, r25	; 0x09
    21a0:	80 87       	std	Z+8, r24	; 0x08
                }

                /* Successful */
                status = ATOM_OK;
    21a2:	1e 82       	std	Y+6, r1	; 0x06
    21a4:	0e c0       	rjmp	.+28     	; 0x21c2 <atomTimerCancel+0xac>
                break;
            }

            /* Move on to the next in the list */
            prev_ptr = next_ptr;
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	9b 81       	ldd	r25, Y+3	; 0x03
    21aa:	9d 83       	std	Y+5, r25	; 0x05
    21ac:	8c 83       	std	Y+4, r24	; 0x04
            next_ptr = next_ptr->next_timer;
    21ae:	ea 81       	ldd	r30, Y+2	; 0x02
    21b0:	fb 81       	ldd	r31, Y+3	; 0x03
    21b2:	80 85       	ldd	r24, Z+8	; 0x08
    21b4:	91 85       	ldd	r25, Z+9	; 0x09
    21b6:	9b 83       	std	Y+3, r25	; 0x03
    21b8:	8a 83       	std	Y+2, r24	; 0x02
        /* Protect the list */
        CRITICAL_START ();

        /* Walk the list to find the relevant timer */
        prev_ptr = next_ptr = timer_queue;
        while (next_ptr)
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	9b 81       	ldd	r25, Y+3	; 0x03
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	79 f6       	brne	.-98     	; 0x2160 <atomTimerCancel+0x4a>
            next_ptr = next_ptr->next_timer;

        }

        /* End of list protection */
        CRITICAL_END ();
    21c2:	ef e5       	ldi	r30, 0x5F	; 95
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	80 83       	st	Z, r24
     }

    return (status);
    21ca:	8e 81       	ldd	r24, Y+6	; 0x06
}
    21cc:	28 96       	adiw	r28, 0x08	; 8
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <atomTimeGet>:
 *
 * @retval Current system tick count

 */
uint32_t atomTimeGet(void)
{
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    return (system_ticks);
    21e6:	80 91 6e 01 	lds	r24, 0x016E
    21ea:	90 91 6f 01 	lds	r25, 0x016F
    21ee:	a0 91 70 01 	lds	r26, 0x0170
    21f2:	b0 91 71 01 	lds	r27, 0x0171
}
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <atomTimeSet>:
 * @param[in] new_time New system tick time value
 *
 * @return None
 */
void atomTimeSet(uint32_t new_time)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	00 d0       	rcall	.+0      	; 0x2206 <atomTimeSet+0x6>
    2206:	00 d0       	rcall	.+0      	; 0x2208 <atomTimeSet+0x8>
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	69 83       	std	Y+1, r22	; 0x01
    220e:	7a 83       	std	Y+2, r23	; 0x02
    2210:	8b 83       	std	Y+3, r24	; 0x03
    2212:	9c 83       	std	Y+4, r25	; 0x04
    system_ticks = new_time;
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	ab 81       	ldd	r26, Y+3	; 0x03
    221a:	bc 81       	ldd	r27, Y+4	; 0x04
    221c:	80 93 6e 01 	sts	0x016E, r24
    2220:	90 93 6f 01 	sts	0x016F, r25
    2224:	a0 93 70 01 	sts	0x0170, r26
    2228:	b0 93 71 01 	sts	0x0171, r27
}
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <atomTimerTick>:
 *  2. Call back to any registered timer callbacks
 *
 * @return None
 */
void atomTimerTick (void)
{
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    /* Only do anything if the OS is started */
    if (atomOSStarted)
    2242:	80 91 55 01 	lds	r24, 0x0155
    2246:	88 23       	and	r24, r24
    2248:	a9 f0       	breq	.+42     	; 0x2274 <atomTimerTick+0x3a>
    {
        /* Increment the system tick count */
        system_ticks++;
    224a:	80 91 6e 01 	lds	r24, 0x016E
    224e:	90 91 6f 01 	lds	r25, 0x016F
    2252:	a0 91 70 01 	lds	r26, 0x0170
    2256:	b0 91 71 01 	lds	r27, 0x0171
    225a:	01 96       	adiw	r24, 0x01	; 1
    225c:	a1 1d       	adc	r26, r1
    225e:	b1 1d       	adc	r27, r1
    2260:	80 93 6e 01 	sts	0x016E, r24
    2264:	90 93 6f 01 	sts	0x016F, r25
    2268:	a0 93 70 01 	sts	0x0170, r26
    226c:	b0 93 71 01 	sts	0x0171, r27

        /* Check for any callbacks that are due */
        atomTimerCallbacks ();
    2270:	0e 94 a3 11 	call	0x2346	; 0x2346 <atomTimerCallbacks>
    }
}
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <atomTimerDelay>:
 * @retval ATOM_OK Successful delay
 * @retval ATOM_ERR_PARAM Bad parameter (ticks must be non-zero)
 * @retval ATOM_ERR_CONTEXT Not called from thread context
 */
uint8_t atomTimerDelay (uint32_t ticks)
{
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	64 97       	sbiw	r28, 0x14	; 20
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	cd bf       	out	0x3d, r28	; 61
    228e:	69 8b       	std	Y+17, r22	; 0x11
    2290:	7a 8b       	std	Y+18, r23	; 0x12
    2292:	8b 8b       	std	Y+19, r24	; 0x13
    2294:	9c 8b       	std	Y+20, r25	; 0x14
    DELAY_TIMER timer_data;
    CRITICAL_STORE;
    uint8_t status;

    /* Get the current TCB  */
    curr_tcb_ptr = atomCurrentContext();
    2296:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <atomCurrentContext>
    229a:	9c 83       	std	Y+4, r25	; 0x04
    229c:	8b 83       	std	Y+3, r24	; 0x03

    /* Parameter check */
    if (ticks == 0)
    229e:	89 89       	ldd	r24, Y+17	; 0x11
    22a0:	9a 89       	ldd	r25, Y+18	; 0x12
    22a2:	ab 89       	ldd	r26, Y+19	; 0x13
    22a4:	bc 89       	ldd	r27, Y+20	; 0x14
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	a1 05       	cpc	r26, r1
    22aa:	b1 05       	cpc	r27, r1
    22ac:	19 f4       	brne	.+6      	; 0x22b4 <atomTimerDelay+0x3a>
    {
        /* Return error */
        status = ATOM_ERR_PARAM;
    22ae:	89 ec       	ldi	r24, 0xC9	; 201
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	3f c0       	rjmp	.+126    	; 0x2332 <atomTimerDelay+0xb8>
    }

    /* Check we are actually in thread context */
    else if (curr_tcb_ptr == NULL)
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	9c 81       	ldd	r25, Y+4	; 0x04
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	19 f4       	brne	.+6      	; 0x22c2 <atomTimerDelay+0x48>
    {
        /* Not currently in thread context, can't suspend */
        status = ATOM_ERR_CONTEXT;
    22bc:	88 ec       	ldi	r24, 0xC8	; 200
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	38 c0       	rjmp	.+112    	; 0x2332 <atomTimerDelay+0xb8>

    /* Otherwise safe to proceed */
    else
    {
        /* Protect the system queues */
        CRITICAL_START ();
    22c2:	ef e5       	ldi	r30, 0x5F	; 95
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	8a 83       	std	Y+2, r24	; 0x02
    22ca:	f8 94       	cli

        /* Set suspended status for the current thread */
        curr_tcb_ptr->suspended = TRUE;
    22cc:	eb 81       	ldd	r30, Y+3	; 0x03
    22ce:	fc 81       	ldd	r31, Y+4	; 0x04
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	85 87       	std	Z+13, r24	; 0x0d

        /* Register the timer callback */

        /* Fill out the data needed by the callback to wake us up */
        timer_data.tcb_ptr = curr_tcb_ptr;
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	98 8b       	std	Y+16, r25	; 0x10
    22da:	8f 87       	std	Y+15, r24	; 0x0f

        /* Fill out the timer callback request structure */
        timer_cb.cb_func = atomTimerDelayCallback;
    22dc:	80 e5       	ldi	r24, 0x50	; 80
    22de:	92 e1       	ldi	r25, 0x12	; 18
    22e0:	9e 83       	std	Y+6, r25	; 0x06
    22e2:	8d 83       	std	Y+5, r24	; 0x05
        timer_cb.cb_data = (POINTER)&timer_data;
    22e4:	ce 01       	movw	r24, r28
    22e6:	0f 96       	adiw	r24, 0x0f	; 15
    22e8:	98 87       	std	Y+8, r25	; 0x08
    22ea:	8f 83       	std	Y+7, r24	; 0x07
        timer_cb.cb_ticks = ticks;
    22ec:	89 89       	ldd	r24, Y+17	; 0x11
    22ee:	9a 89       	ldd	r25, Y+18	; 0x12
    22f0:	ab 89       	ldd	r26, Y+19	; 0x13
    22f2:	bc 89       	ldd	r27, Y+20	; 0x14
    22f4:	89 87       	std	Y+9, r24	; 0x09
    22f6:	9a 87       	std	Y+10, r25	; 0x0a
    22f8:	ab 87       	std	Y+11, r26	; 0x0b
    22fa:	bc 87       	std	Y+12, r27	; 0x0c

        /* Store the timeout callback details, though we don't use it */
        curr_tcb_ptr->suspend_timo_cb = &timer_cb;
    22fc:	eb 81       	ldd	r30, Y+3	; 0x03
    22fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2300:	ce 01       	movw	r24, r28
    2302:	05 96       	adiw	r24, 0x05	; 5
    2304:	90 8b       	std	Z+16, r25	; 0x10
    2306:	87 87       	std	Z+15, r24	; 0x0f

        /* Register the callback */
        if (atomTimerRegister (&timer_cb) != ATOM_OK)
    2308:	ce 01       	movw	r24, r28
    230a:	05 96       	adiw	r24, 0x05	; 5
    230c:	0e 94 3b 10 	call	0x2076	; 0x2076 <atomTimerRegister>
    2310:	88 23       	and	r24, r24
    2312:	39 f0       	breq	.+14     	; 0x2322 <atomTimerDelay+0xa8>
        {
            /* Exit critical region */
            CRITICAL_END ();
    2314:	ef e5       	ldi	r30, 0x5F	; 95
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	80 83       	st	Z, r24

            /* Timer registration didn't work, won't get a callback */
            status = ATOM_ERR_TIMER;
    231c:	8d ec       	ldi	r24, 0xCD	; 205
    231e:	89 83       	std	Y+1, r24	; 0x01
    2320:	08 c0       	rjmp	.+16     	; 0x2332 <atomTimerDelay+0xb8>
        }
        else
        {
            /* Exit critical region */
            CRITICAL_END ();
    2322:	ef e5       	ldi	r30, 0x5F	; 95
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	80 83       	st	Z, r24

            /* Successful timer registration */
            status = ATOM_OK;
    232a:	19 82       	std	Y+1, r1	; 0x01

            /* Current thread should now block, schedule in another */
            atomSched (FALSE);
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	0e 94 6f 03 	call	0x6de	; 0x6de <atomSched>
        }
    }

    return (status);
    2332:	89 81       	ldd	r24, Y+1	; 0x01
}
    2334:	64 96       	adiw	r28, 0x14	; 20
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	de bf       	out	0x3e, r29	; 62
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	cd bf       	out	0x3d, r28	; 61
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <atomTimerCallbacks>:
 * Find any callbacks that are due and call them up.
 *
 * @return None
 */
static void atomTimerCallbacks (void)
{
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	2a 97       	sbiw	r28, 0x0a	; 10
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
    ATOM_TIMER *prev_ptr, *next_ptr, *saved_next_ptr;
    ATOM_TIMER *callback_list_tail = NULL, *callback_list_head = NULL;
    235a:	1c 82       	std	Y+4, r1	; 0x04
    235c:	1b 82       	std	Y+3, r1	; 0x03
    235e:	1a 82       	std	Y+2, r1	; 0x02
    2360:	19 82       	std	Y+1, r1	; 0x01

    /*
     * Walk the list decrementing each timer's remaining ticks count and
     * looking for due callbacks.
     */
    prev_ptr = next_ptr = timer_queue;
    2362:	80 91 6c 01 	lds	r24, 0x016C
    2366:	90 91 6d 01 	lds	r25, 0x016D
    236a:	98 87       	std	Y+8, r25	; 0x08
    236c:	8f 83       	std	Y+7, r24	; 0x07
    236e:	8f 81       	ldd	r24, Y+7	; 0x07
    2370:	98 85       	ldd	r25, Y+8	; 0x08
    2372:	9a 87       	std	Y+10, r25	; 0x0a
    2374:	89 87       	std	Y+9, r24	; 0x09
    2376:	5f c0       	rjmp	.+190    	; 0x2436 <atomTimerCallbacks+0xf0>
    while (next_ptr)
    {
        /* Save the next timer in the list (we adjust next_ptr for callbacks) */
        saved_next_ptr = next_ptr->next_timer;
    2378:	ef 81       	ldd	r30, Y+7	; 0x07
    237a:	f8 85       	ldd	r31, Y+8	; 0x08
    237c:	80 85       	ldd	r24, Z+8	; 0x08
    237e:	91 85       	ldd	r25, Z+9	; 0x09
    2380:	9e 83       	std	Y+6, r25	; 0x06
    2382:	8d 83       	std	Y+5, r24	; 0x05
 
        /* Is this entry due? */
        if (--(next_ptr->cb_ticks) == 0)
    2384:	ef 81       	ldd	r30, Y+7	; 0x07
    2386:	f8 85       	ldd	r31, Y+8	; 0x08
    2388:	84 81       	ldd	r24, Z+4	; 0x04
    238a:	95 81       	ldd	r25, Z+5	; 0x05
    238c:	a6 81       	ldd	r26, Z+6	; 0x06
    238e:	b7 81       	ldd	r27, Z+7	; 0x07
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	a1 09       	sbc	r26, r1
    2394:	b1 09       	sbc	r27, r1
    2396:	ef 81       	ldd	r30, Y+7	; 0x07
    2398:	f8 85       	ldd	r31, Y+8	; 0x08
    239a:	84 83       	std	Z+4, r24	; 0x04
    239c:	95 83       	std	Z+5, r25	; 0x05
    239e:	a6 83       	std	Z+6, r26	; 0x06
    23a0:	b7 83       	std	Z+7, r27	; 0x07
    23a2:	ef 81       	ldd	r30, Y+7	; 0x07
    23a4:	f8 85       	ldd	r31, Y+8	; 0x08
    23a6:	84 81       	ldd	r24, Z+4	; 0x04
    23a8:	95 81       	ldd	r25, Z+5	; 0x05
    23aa:	a6 81       	ldd	r26, Z+6	; 0x06
    23ac:	b7 81       	ldd	r27, Z+7	; 0x07
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	a1 05       	cpc	r26, r1
    23b2:	b1 05       	cpc	r27, r1
    23b4:	c1 f5       	brne	.+112    	; 0x2426 <atomTimerCallbacks+0xe0>
        {
            /* Remove the entry from the timer list */
            if (next_ptr == timer_queue)
    23b6:	20 91 6c 01 	lds	r18, 0x016C
    23ba:	30 91 6d 01 	lds	r19, 0x016D
    23be:	8f 81       	ldd	r24, Y+7	; 0x07
    23c0:	98 85       	ldd	r25, Y+8	; 0x08
    23c2:	82 17       	cp	r24, r18
    23c4:	93 07       	cpc	r25, r19
    23c6:	49 f4       	brne	.+18     	; 0x23da <atomTimerCallbacks+0x94>
            {
                /* We're removing the list head */
                timer_queue = next_ptr->next_timer;
    23c8:	ef 81       	ldd	r30, Y+7	; 0x07
    23ca:	f8 85       	ldd	r31, Y+8	; 0x08
    23cc:	80 85       	ldd	r24, Z+8	; 0x08
    23ce:	91 85       	ldd	r25, Z+9	; 0x09
    23d0:	90 93 6d 01 	sts	0x016D, r25
    23d4:	80 93 6c 01 	sts	0x016C, r24
    23d8:	08 c0       	rjmp	.+16     	; 0x23ea <atomTimerCallbacks+0xa4>
            }
            else
            {
                /* We're removing a mid or tail timer */
                prev_ptr->next_timer = next_ptr->next_timer;
    23da:	ef 81       	ldd	r30, Y+7	; 0x07
    23dc:	f8 85       	ldd	r31, Y+8	; 0x08
    23de:	80 85       	ldd	r24, Z+8	; 0x08
    23e0:	91 85       	ldd	r25, Z+9	; 0x09
    23e2:	e9 85       	ldd	r30, Y+9	; 0x09
    23e4:	fa 85       	ldd	r31, Y+10	; 0x0a
    23e6:	91 87       	std	Z+9, r25	; 0x09
    23e8:	80 87       	std	Z+8, r24	; 0x08
             * the timer list.
             *
             * We reuse the ATOM_TIMER structure's next_ptr to maintain the
             * callback list.
             */
            if (callback_list_head == NULL)
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	9a 81       	ldd	r25, Y+2	; 0x02
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	49 f4       	brne	.+18     	; 0x2404 <atomTimerCallbacks+0xbe>
            {
                /* First callback request in the list */ 
                callback_list_head = callback_list_tail = next_ptr;
    23f2:	8f 81       	ldd	r24, Y+7	; 0x07
    23f4:	98 85       	ldd	r25, Y+8	; 0x08
    23f6:	9c 83       	std	Y+4, r25	; 0x04
    23f8:	8b 83       	std	Y+3, r24	; 0x03
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01
    2402:	0c c0       	rjmp	.+24     	; 0x241c <atomTimerCallbacks+0xd6>
            }
            else
            {
                /* Add callback request to the list tail */
                callback_list_tail->next_timer = next_ptr;
    2404:	eb 81       	ldd	r30, Y+3	; 0x03
    2406:	fc 81       	ldd	r31, Y+4	; 0x04
    2408:	8f 81       	ldd	r24, Y+7	; 0x07
    240a:	98 85       	ldd	r25, Y+8	; 0x08
    240c:	91 87       	std	Z+9, r25	; 0x09
    240e:	80 87       	std	Z+8, r24	; 0x08
                callback_list_tail = callback_list_tail->next_timer;
    2410:	eb 81       	ldd	r30, Y+3	; 0x03
    2412:	fc 81       	ldd	r31, Y+4	; 0x04
    2414:	80 85       	ldd	r24, Z+8	; 0x08
    2416:	91 85       	ldd	r25, Z+9	; 0x09
    2418:	9c 83       	std	Y+4, r25	; 0x04
    241a:	8b 83       	std	Y+3, r24	; 0x03
            }

            /* Mark this timer as the end of the callback list */
            next_ptr->next_timer = NULL;
    241c:	ef 81       	ldd	r30, Y+7	; 0x07
    241e:	f8 85       	ldd	r31, Y+8	; 0x08
    2420:	11 86       	std	Z+9, r1	; 0x09
    2422:	10 86       	std	Z+8, r1	; 0x08
    2424:	04 c0       	rjmp	.+8      	; 0x242e <atomTimerCallbacks+0xe8>
        {
            /*
             * Update prev_ptr to this entry. We will need it if we want
             * to remove a mid or tail timer.
             */
            prev_ptr = next_ptr;
    2426:	8f 81       	ldd	r24, Y+7	; 0x07
    2428:	98 85       	ldd	r25, Y+8	; 0x08
    242a:	9a 87       	std	Y+10, r25	; 0x0a
    242c:	89 87       	std	Y+9, r24	; 0x09
        }

        /* Move on to the next in the list */
        next_ptr = saved_next_ptr;
    242e:	8d 81       	ldd	r24, Y+5	; 0x05
    2430:	9e 81       	ldd	r25, Y+6	; 0x06
    2432:	98 87       	std	Y+8, r25	; 0x08
    2434:	8f 83       	std	Y+7, r24	; 0x07
    /*
     * Walk the list decrementing each timer's remaining ticks count and
     * looking for due callbacks.
     */
    prev_ptr = next_ptr = timer_queue;
    while (next_ptr)
    2436:	8f 81       	ldd	r24, Y+7	; 0x07
    2438:	98 85       	ldd	r25, Y+8	; 0x08
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	09 f0       	breq	.+2      	; 0x2440 <atomTimerCallbacks+0xfa>
    243e:	9c cf       	rjmp	.-200    	; 0x2378 <atomTimerCallbacks+0x32>

    /*
     * Check if any callbacks were due. We call them after we walk the list
     * in case they want to register new timers (and hence walk the list).
     */
    if (callback_list_head)
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	9a 81       	ldd	r25, Y+2	; 0x02
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	19 f1       	breq	.+70     	; 0x248e <atomTimerCallbacks+0x148>
    {
        /* Walk the callback list */
        next_ptr = callback_list_head;
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	98 87       	std	Y+8, r25	; 0x08
    244e:	8f 83       	std	Y+7, r24	; 0x07
    2450:	1a c0       	rjmp	.+52     	; 0x2486 <atomTimerCallbacks+0x140>
        {
            /*
             *  Save the next timer in the list (in case the callback
             *  modifies the list by registering again.
             */
            saved_next_ptr = next_ptr->next_timer;
    2452:	ef 81       	ldd	r30, Y+7	; 0x07
    2454:	f8 85       	ldd	r31, Y+8	; 0x08
    2456:	80 85       	ldd	r24, Z+8	; 0x08
    2458:	91 85       	ldd	r25, Z+9	; 0x09
    245a:	9e 83       	std	Y+6, r25	; 0x06
    245c:	8d 83       	std	Y+5, r24	; 0x05

            /* Call the registered callback */
            if (next_ptr->cb_func)
    245e:	ef 81       	ldd	r30, Y+7	; 0x07
    2460:	f8 85       	ldd	r31, Y+8	; 0x08
    2462:	80 81       	ld	r24, Z
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	51 f0       	breq	.+20     	; 0x247e <atomTimerCallbacks+0x138>
            {
                next_ptr->cb_func (next_ptr->cb_data);
    246a:	ef 81       	ldd	r30, Y+7	; 0x07
    246c:	f8 85       	ldd	r31, Y+8	; 0x08
    246e:	20 81       	ld	r18, Z
    2470:	31 81       	ldd	r19, Z+1	; 0x01
    2472:	ef 81       	ldd	r30, Y+7	; 0x07
    2474:	f8 85       	ldd	r31, Y+8	; 0x08
    2476:	82 81       	ldd	r24, Z+2	; 0x02
    2478:	93 81       	ldd	r25, Z+3	; 0x03
    247a:	f9 01       	movw	r30, r18
    247c:	09 95       	icall
            }

            /* Move on to the next callback in the list */
            next_ptr = saved_next_ptr;
    247e:	8d 81       	ldd	r24, Y+5	; 0x05
    2480:	9e 81       	ldd	r25, Y+6	; 0x06
    2482:	98 87       	std	Y+8, r25	; 0x08
    2484:	8f 83       	std	Y+7, r24	; 0x07
     */
    if (callback_list_head)
    {
        /* Walk the callback list */
        next_ptr = callback_list_head;
        while (next_ptr)
    2486:	8f 81       	ldd	r24, Y+7	; 0x07
    2488:	98 85       	ldd	r25, Y+8	; 0x08
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	11 f7       	brne	.-60     	; 0x2452 <atomTimerCallbacks+0x10c>
            /* Move on to the next callback in the list */
            next_ptr = saved_next_ptr;
        }
    }

}
    248e:	2a 96       	adiw	r28, 0x0a	; 10
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	de bf       	out	0x3e, r29	; 62
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	cd bf       	out	0x3d, r28	; 61
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <atomTimerDelayCallback>:
 * @param[in] cb_data Callback parameter (DELAY_TIMER ptr for sleeping thread)
 *
 * @return None
 */
static void atomTimerDelayCallback (POINTER cb_data)
{
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <atomTimerDelayCallback+0x6>
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <atomTimerDelayCallback+0x8>
    24a8:	0f 92       	push	r0
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	9d 83       	std	Y+5, r25	; 0x05
    24b0:	8c 83       	std	Y+4, r24	; 0x04
    DELAY_TIMER *timer_data_ptr;
    CRITICAL_STORE;

    /* Get the DELAY_TIMER structure pointer */
    timer_data_ptr = (DELAY_TIMER *)cb_data;
    24b2:	8c 81       	ldd	r24, Y+4	; 0x04
    24b4:	9d 81       	ldd	r25, Y+5	; 0x05
    24b6:	9b 83       	std	Y+3, r25	; 0x03
    24b8:	8a 83       	std	Y+2, r24	; 0x02

    /* Check parameter is valid */
    if (timer_data_ptr)
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	9b 81       	ldd	r25, Y+3	; 0x03
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	91 f0       	breq	.+36     	; 0x24e6 <atomTimerDelayCallback+0x46>
    {
        /* Enter critical region */
        CRITICAL_START ();
    24c2:	ef e5       	ldi	r30, 0x5F	; 95
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	89 83       	std	Y+1, r24	; 0x01
    24ca:	f8 94       	cli

        /* Put the thread on the ready queue */
        (void)tcbEnqueuePriority (&tcbReadyQ, timer_data_ptr->tcb_ptr);
    24cc:	ea 81       	ldd	r30, Y+2	; 0x02
    24ce:	fb 81       	ldd	r31, Y+3	; 0x03
    24d0:	20 81       	ld	r18, Z
    24d2:	31 81       	ldd	r19, Z+1	; 0x01
    24d4:	83 e5       	ldi	r24, 0x53	; 83
    24d6:	91 e0       	ldi	r25, 0x01	; 1
    24d8:	b9 01       	movw	r22, r18
    24da:	0e 94 84 05 	call	0xb08	; 0xb08 <tcbEnqueuePriority>

        /* Exit critical region */
        CRITICAL_END ();
    24de:	ef e5       	ldi	r30, 0x5F	; 95
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	80 83       	st	Z, r24
         * Don't call the scheduler yet. The ISR exit routine will do this
         * in case there are other callbacks to be made, which may also make
         * threads ready.
         */
    }
}
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <gpioInit>:

#include "board.h"


void gpioInit()
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
	sbi(dDIR,DIR);
    24fe:	aa e2       	ldi	r26, 0x2A	; 42
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	ea e2       	ldi	r30, 0x2A	; 42
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	84 60       	ori	r24, 0x04	; 4
    250a:	8c 93       	st	X, r24
	cbi(pDIR, DIR);
    250c:	ab e2       	ldi	r26, 0x2B	; 43
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	eb e2       	ldi	r30, 0x2B	; 43
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	8b 7f       	andi	r24, 0xFB	; 251
    2518:	8c 93       	st	X, r24
}
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <main>:
	/*Forward declarations */
static void main_thread_func (uint32_t data);


int main ( void )
	{
    2520:	8f 92       	push	r8
    2522:	af 92       	push	r10
    2524:	bf 92       	push	r11
    2526:	cf 92       	push	r12
    2528:	df 92       	push	r13
    252a:	ef 92       	push	r14
    252c:	ff 92       	push	r15
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	0f 92       	push	r0
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
	    int8_t status;
	    // tạo ngăn chứ cho thread idle
	    SP = (int)&idle_thread_stack[(IDLE_STACK_SIZE_BYTES/2) - 1];
    253c:	ed e5       	ldi	r30, 0x5D	; 93
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	8f e8       	ldi	r24, 0x8F	; 143
    2542:	92 e0       	ldi	r25, 0x02	; 2
    2544:	91 83       	std	Z+1, r25	; 0x01
    2546:	80 83       	st	Z, r24
	    // khoi tao atomOS
	    status = atomOSInit(&idle_thread_stack[0], IDLE_STACK_SIZE_BYTES, FALSE);
    2548:	80 e5       	ldi	r24, 0x50	; 80
    254a:	92 e0       	ldi	r25, 0x02	; 2
    254c:	40 e8       	ldi	r20, 0x80	; 128
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	70 e0       	ldi	r23, 0x00	; 0
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	0e 94 0b 05 	call	0xa16	; 0xa16 <atomOSInit>
    255a:	89 83       	std	Y+1, r24	; 0x01
	    if (status == ATOM_OK)
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	88 23       	and	r24, r24
    2560:	19 f5       	brne	.+70     	; 0x25a8 <main+0x88>
	    {
	        /* Enable the system tick timer */
	        avrInitSystemTickTimer();
    2562:	0e 94 9d 00 	call	0x13a	; 0x13a <avrInitSystemTickTimer>

	        /* Create an application thread */
	        status = atomThreadCreate(&main_tcb,
    2566:	82 e7       	ldi	r24, 0x72	; 114
    2568:	91 e0       	ldi	r25, 0x01	; 1
    256a:	25 ed       	ldi	r18, 0xD5	; 213
    256c:	32 e1       	ldi	r19, 0x12	; 18
    256e:	e4 e8       	ldi	r30, 0x84	; 132
    2570:	f1 e0       	ldi	r31, 0x01	; 1
    2572:	60 e1       	ldi	r22, 0x10	; 16
    2574:	a9 01       	movw	r20, r18
    2576:	00 e0       	ldi	r16, 0x00	; 0
    2578:	10 e0       	ldi	r17, 0x00	; 0
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	7f 01       	movw	r14, r30
    2580:	0f 2e       	mov	r0, r31
    2582:	fc ec       	ldi	r31, 0xCC	; 204
    2584:	af 2e       	mov	r10, r31
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	bf 2e       	mov	r11, r31
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	cf 2e       	mov	r12, r31
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	df 2e       	mov	r13, r31
    2592:	f0 2d       	mov	r31, r0
    2594:	88 24       	eor	r8, r8
    2596:	8a 94       	dec	r8
    2598:	0e 94 1b 04 	call	0x836	; 0x836 <atomThreadCreate>
    259c:	89 83       	std	Y+1, r24	; 0x01
	                     TEST_THREAD_PRIO, main_thread_func, 0,
	                     &main_thread_stack[0],
	                     MAIN_STACK_SIZE_BYTES,
	                     TRUE);
	        if (status == ATOM_OK)
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	88 23       	and	r24, r24
    25a2:	11 f4       	brne	.+4      	; 0x25a8 <main+0x88>
	        {
	        	//archFirstThreadRestore();
	            atomOSStart();
    25a4:	0e 94 57 05 	call	0xaae	; 0xaae <atomOSStart>
    25a8:	ff cf       	rjmp	.-2      	; 0x25a8 <main+0x88>

000025aa <main_thread_func>:
	    return (0);
	}


static void main_thread_func (uint32_t data)
	{
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	2a 97       	sbiw	r28, 0x0a	; 10
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	f8 94       	cli
    25b8:	de bf       	out	0x3e, r29	; 62
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	cd bf       	out	0x3d, r28	; 61
    25be:	6f 83       	std	Y+7, r22	; 0x07
    25c0:	78 87       	std	Y+8, r23	; 0x08
    25c2:	89 87       	std	Y+9, r24	; 0x09
    25c4:	9a 87       	std	Y+10, r25	; 0x0a
	    uint32_t test_status;
	    int sleep_ticks;
	    /* Initialise UART (9600bps) */
	    uart_init(9600);
    25c6:	80 e8       	ldi	r24, 0x80	; 128
    25c8:	95 e2       	ldi	r25, 0x25	; 37
    25ca:	0e 94 72 02 	call	0x4e4	; 0x4e4 <uart_init>
	    gpioInit();
    25ce:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <gpioInit>
	    sei();
    25d2:	78 94       	sei
	    /**
	     * Redirect stdout via the UART. Note that the UART write routine
	     * is protected via a semaphore, so the OS must be started before
	     * use of the UART.
	     */
	    stdout = &uart_stdout;
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	91 e0       	ldi	r25, 0x01	; 1
    25d8:	90 93 d3 02 	sts	0x02D3, r25
    25dc:	80 93 d2 02 	sts	0x02D2, r24
	    }
	#endif

	    while (1)
	    {
	    	SEND;
    25e0:	ab e2       	ldi	r26, 0x2B	; 43
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	eb e2       	ldi	r30, 0x2B	; 43
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	84 60       	ori	r24, 0x04	; 4
    25ec:	8c 93       	st	X, r24
	    	uart_putc('h');
    25ee:	88 e6       	ldi	r24, 0x68	; 104
    25f0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <uart_putc>
	    	atomTimerDelay(1000);
    25f4:	68 ee       	ldi	r22, 0xE8	; 232
    25f6:	73 e0       	ldi	r23, 0x03	; 3
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	0e 94 3d 11 	call	0x227a	; 0x227a <atomTimerDelay>
    2600:	ef cf       	rjmp	.-34     	; 0x25e0 <main_thread_func+0x36>

00002602 <__mulsi3>:
    2602:	62 9f       	mul	r22, r18
    2604:	d0 01       	movw	r26, r0
    2606:	73 9f       	mul	r23, r19
    2608:	f0 01       	movw	r30, r0
    260a:	82 9f       	mul	r24, r18
    260c:	e0 0d       	add	r30, r0
    260e:	f1 1d       	adc	r31, r1
    2610:	64 9f       	mul	r22, r20
    2612:	e0 0d       	add	r30, r0
    2614:	f1 1d       	adc	r31, r1
    2616:	92 9f       	mul	r25, r18
    2618:	f0 0d       	add	r31, r0
    261a:	83 9f       	mul	r24, r19
    261c:	f0 0d       	add	r31, r0
    261e:	74 9f       	mul	r23, r20
    2620:	f0 0d       	add	r31, r0
    2622:	65 9f       	mul	r22, r21
    2624:	f0 0d       	add	r31, r0
    2626:	99 27       	eor	r25, r25
    2628:	72 9f       	mul	r23, r18
    262a:	b0 0d       	add	r27, r0
    262c:	e1 1d       	adc	r30, r1
    262e:	f9 1f       	adc	r31, r25
    2630:	63 9f       	mul	r22, r19
    2632:	b0 0d       	add	r27, r0
    2634:	e1 1d       	adc	r30, r1
    2636:	f9 1f       	adc	r31, r25
    2638:	bd 01       	movw	r22, r26
    263a:	cf 01       	movw	r24, r30
    263c:	11 24       	eor	r1, r1
    263e:	08 95       	ret

00002640 <__divmodhi4>:
    2640:	97 fb       	bst	r25, 7
    2642:	09 2e       	mov	r0, r25
    2644:	07 26       	eor	r0, r23
    2646:	0a d0       	rcall	.+20     	; 0x265c <__divmodhi4_neg1>
    2648:	77 fd       	sbrc	r23, 7
    264a:	04 d0       	rcall	.+8      	; 0x2654 <__divmodhi4_neg2>
    264c:	0c d0       	rcall	.+24     	; 0x2666 <__udivmodhi4>
    264e:	06 d0       	rcall	.+12     	; 0x265c <__divmodhi4_neg1>
    2650:	00 20       	and	r0, r0
    2652:	1a f4       	brpl	.+6      	; 0x265a <__divmodhi4_exit>

00002654 <__divmodhi4_neg2>:
    2654:	70 95       	com	r23
    2656:	61 95       	neg	r22
    2658:	7f 4f       	sbci	r23, 0xFF	; 255

0000265a <__divmodhi4_exit>:
    265a:	08 95       	ret

0000265c <__divmodhi4_neg1>:
    265c:	f6 f7       	brtc	.-4      	; 0x265a <__divmodhi4_exit>
    265e:	90 95       	com	r25
    2660:	81 95       	neg	r24
    2662:	9f 4f       	sbci	r25, 0xFF	; 255
    2664:	08 95       	ret

00002666 <__udivmodhi4>:
    2666:	aa 1b       	sub	r26, r26
    2668:	bb 1b       	sub	r27, r27
    266a:	51 e1       	ldi	r21, 0x11	; 17
    266c:	07 c0       	rjmp	.+14     	; 0x267c <__udivmodhi4_ep>

0000266e <__udivmodhi4_loop>:
    266e:	aa 1f       	adc	r26, r26
    2670:	bb 1f       	adc	r27, r27
    2672:	a6 17       	cp	r26, r22
    2674:	b7 07       	cpc	r27, r23
    2676:	10 f0       	brcs	.+4      	; 0x267c <__udivmodhi4_ep>
    2678:	a6 1b       	sub	r26, r22
    267a:	b7 0b       	sbc	r27, r23

0000267c <__udivmodhi4_ep>:
    267c:	88 1f       	adc	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	5a 95       	dec	r21
    2682:	a9 f7       	brne	.-22     	; 0x266e <__udivmodhi4_loop>
    2684:	80 95       	com	r24
    2686:	90 95       	com	r25
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	08 95       	ret

0000268e <memcpy>:
    268e:	fb 01       	movw	r30, r22
    2690:	dc 01       	movw	r26, r24
    2692:	02 c0       	rjmp	.+4      	; 0x2698 <memcpy+0xa>
    2694:	01 90       	ld	r0, Z+
    2696:	0d 92       	st	X+, r0
    2698:	41 50       	subi	r20, 0x01	; 1
    269a:	50 40       	sbci	r21, 0x00	; 0
    269c:	d8 f7       	brcc	.-10     	; 0x2694 <memcpy+0x6>
    269e:	08 95       	ret

000026a0 <_exit>:
    26a0:	f8 94       	cli

000026a2 <__stop_program>:
    26a2:	ff cf       	rjmp	.-2      	; 0x26a2 <__stop_program>
